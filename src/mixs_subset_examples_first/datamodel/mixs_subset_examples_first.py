# Auto generated from mixs_subset_examples_first.yaml by pythongen.py version: 0.9.0
# Generation date: 2023-05-01T15:06:57
# Schema: MIxS
#
# id: https://github.com/turbomam/mixs-subset-examples-first/tree/main/src/mixs_subset_examples_first
# description: A LinkML implementation of the MIxS specification that's intended to be self-documenting and
#              DataHarmonizer compatible. Will include valid and invalid data examples.
# license: MIT

import dataclasses
import sys
import re
from jsonasobj2 import JsonObj, as_dict
from typing import Optional, List, Union, Dict, ClassVar, Any
from dataclasses import dataclass
from linkml_runtime.linkml_model.meta import EnumDefinition, PermissibleValue, PvFormulaOptions

from linkml_runtime.utils.slot import Slot
from linkml_runtime.utils.metamodelcore import empty_list, empty_dict, bnode
from linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int
from linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from linkml_runtime.utils.formatutils import camelcase, underscore, sfx
from linkml_runtime.utils.enumerations import EnumDefinitionImpl
from rdflib import Namespace, URIRef
from linkml_runtime.utils.curienamespace import CurieNamespace
from linkml_runtime.utils.metamodelcore import Bool, Curie, Decimal, ElementIdentifier, NCName, NodeIdentifier, URI, URIorCURIE, XSDDate, XSDDateTime, XSDTime

metamodel_version = "1.7.0"
version = None

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
MIXS = CurieNamespace('MIXS', 'http://example.com/')
LINKML = CurieNamespace('linkml', 'https://w3id.org/linkml/')
SCHEMA = CurieNamespace('schema', 'http://schema.org/')
SHEX = CurieNamespace('shex', 'http://www.w3.org/ns/shex#')
XSD = CurieNamespace('xsd', 'http://www.w3.org/2001/XMLSchema#')
DEFAULT_ = MIXS


# Types
class String(str):
    """ A character string """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "string"
    type_model_uri = MIXS.String


class Integer(int):
    """ An integer """
    type_class_uri = XSD.integer
    type_class_curie = "xsd:integer"
    type_name = "integer"
    type_model_uri = MIXS.Integer


class Boolean(Bool):
    """ A binary (true or false) value """
    type_class_uri = XSD.boolean
    type_class_curie = "xsd:boolean"
    type_name = "boolean"
    type_model_uri = MIXS.Boolean


class Float(float):
    """ A real number that conforms to the xsd:float specification """
    type_class_uri = XSD.float
    type_class_curie = "xsd:float"
    type_name = "float"
    type_model_uri = MIXS.Float


class Double(float):
    """ A real number that conforms to the xsd:double specification """
    type_class_uri = XSD.double
    type_class_curie = "xsd:double"
    type_name = "double"
    type_model_uri = MIXS.Double


class Decimal(Decimal):
    """ A real number with arbitrary precision that conforms to the xsd:decimal specification """
    type_class_uri = XSD.decimal
    type_class_curie = "xsd:decimal"
    type_name = "decimal"
    type_model_uri = MIXS.Decimal


class Time(XSDTime):
    """ A time object represents a (local) time of day, independent of any particular day """
    type_class_uri = XSD.dateTime
    type_class_curie = "xsd:dateTime"
    type_name = "time"
    type_model_uri = MIXS.Time


class Date(XSDDate):
    """ a date (year, month and day) in an idealized calendar """
    type_class_uri = XSD.date
    type_class_curie = "xsd:date"
    type_name = "date"
    type_model_uri = MIXS.Date


class Datetime(XSDDateTime):
    """ The combination of a date and time """
    type_class_uri = XSD.dateTime
    type_class_curie = "xsd:dateTime"
    type_name = "datetime"
    type_model_uri = MIXS.Datetime


class DateOrDatetime(str):
    """ Either a date or a datetime """
    type_class_uri = LINKML.DateOrDatetime
    type_class_curie = "linkml:DateOrDatetime"
    type_name = "date_or_datetime"
    type_model_uri = MIXS.DateOrDatetime


class Uriorcurie(URIorCURIE):
    """ a URI or a CURIE """
    type_class_uri = XSD.anyURI
    type_class_curie = "xsd:anyURI"
    type_name = "uriorcurie"
    type_model_uri = MIXS.Uriorcurie


class Curie(Curie):
    """ a compact URI """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "curie"
    type_model_uri = MIXS.Curie


class Uri(URI):
    """ a complete URI """
    type_class_uri = XSD.anyURI
    type_class_curie = "xsd:anyURI"
    type_name = "uri"
    type_model_uri = MIXS.Uri


class Ncname(NCName):
    """ Prefix part of CURIE """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "ncname"
    type_model_uri = MIXS.Ncname


class Objectidentifier(ElementIdentifier):
    """ A URI or CURIE that represents an object in the model. """
    type_class_uri = SHEX.iri
    type_class_curie = "shex:iri"
    type_name = "objectidentifier"
    type_model_uri = MIXS.Objectidentifier


class Nodeidentifier(NodeIdentifier):
    """ A URI, CURIE or BNODE that represents a node in a model. """
    type_class_uri = SHEX.nonLiteral
    type_class_curie = "shex:nonLiteral"
    type_name = "nodeidentifier"
    type_model_uri = MIXS.Nodeidentifier


# Class references



@dataclass
class Checklist(YAMLRoot):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS.Checklist
    class_class_curie: ClassVar[str] = "MIXS:Checklist"
    class_name: ClassVar[str] = "Checklist"
    class_model_uri: ClassVar[URIRef] = MIXS.Checklist

    adapters: Optional[str] = None
    alt: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    chimera_check: Optional[str] = None
    collection_date: Optional[str] = None
    compl_appr: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_input: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    detec_type: Optional[str] = None
    elev: Optional[str] = None
    encoded_traits: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    feat_pred: Optional[str] = None
    geo_loc_name: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    host_spec_range: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    mag_cov_software: Optional[str] = None
    mid: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    num_replicons: Optional[int] = None
    number_contig: Optional[int] = None
    otu_class_appr: Optional[str] = None
    otu_db: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    pathogenicity: Optional[str] = None
    pcr_cond: Optional[str] = None
    pcr_primers: Optional[str] = None
    ploidy: Optional[str] = None
    pos_cont_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    pred_genome_type: Optional[str] = None
    project_name: Optional[str] = None
    propagation: Optional[str] = None
    reassembly_bin: Optional[Union[bool, Bool]] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    sim_search_meth: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    size_frac: Optional[str] = None
    sop: Optional[str] = None
    sort_tech: Optional[str] = None
    source_mat_id: Optional[str] = None
    source_uvig: Optional[str] = None
    specific_host: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    tax_class: Optional[str] = None
    tax_ident: Optional[str] = None
    temp: Optional[str] = None
    trna_ext_software: Optional[str] = None
    trnas: Optional[int] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    vir_ident_software: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    wga_amp_kit: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        super().__post_init__(**kwargs)


@dataclass
class Database(YAMLRoot):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS.Database
    class_class_curie: ClassVar[str] = "MIXS:Database"
    class_name: ClassVar[str] = "Database"
    class_model_uri: ClassVar[URIRef] = MIXS.Database

    migs_ba_plant_associated_set: Optional[Union[Union[dict, "MigsBaPlantAssociated"], List[Union[dict, "MigsBaPlantAssociated"]]]] = empty_list()
    migs_ba_sediment_set: Optional[Union[Union[dict, "MigsBaSediment"], List[Union[dict, "MigsBaSediment"]]]] = empty_list()
    migs_ba_set: Optional[Union[Union[dict, "MigsBa"], List[Union[dict, "MigsBa"]]]] = empty_list()
    migs_ba_soil_set: Optional[Union[Union[dict, "MigsBaSoil"], List[Union[dict, "MigsBaSoil"]]]] = empty_list()
    migs_ba_water_set: Optional[Union[Union[dict, "MigsBaWater"], List[Union[dict, "MigsBaWater"]]]] = empty_list()
    mims_plant_associated_set: Optional[Union[Union[dict, "MimsPlantAssociated"], List[Union[dict, "MimsPlantAssociated"]]]] = empty_list()
    mims_sediment_set: Optional[Union[Union[dict, "MimsSediment"], List[Union[dict, "MimsSediment"]]]] = empty_list()
    mims_soil_set: Optional[Union[Union[dict, "MimsSoil"], List[Union[dict, "MimsSoil"]]]] = empty_list()
    mims_water_set: Optional[Union[Union[dict, "MimsWater"], List[Union[dict, "MimsWater"]]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.migs_ba_plant_associated_set, list):
            self.migs_ba_plant_associated_set = [self.migs_ba_plant_associated_set] if self.migs_ba_plant_associated_set is not None else []
        self.migs_ba_plant_associated_set = [v if isinstance(v, MigsBaPlantAssociated) else MigsBaPlantAssociated(**as_dict(v)) for v in self.migs_ba_plant_associated_set]

        if not isinstance(self.migs_ba_sediment_set, list):
            self.migs_ba_sediment_set = [self.migs_ba_sediment_set] if self.migs_ba_sediment_set is not None else []
        self.migs_ba_sediment_set = [v if isinstance(v, MigsBaSediment) else MigsBaSediment(**as_dict(v)) for v in self.migs_ba_sediment_set]

        if not isinstance(self.migs_ba_set, list):
            self.migs_ba_set = [self.migs_ba_set] if self.migs_ba_set is not None else []
        self.migs_ba_set = [v if isinstance(v, MigsBa) else MigsBa(**as_dict(v)) for v in self.migs_ba_set]

        if not isinstance(self.migs_ba_soil_set, list):
            self.migs_ba_soil_set = [self.migs_ba_soil_set] if self.migs_ba_soil_set is not None else []
        self.migs_ba_soil_set = [v if isinstance(v, MigsBaSoil) else MigsBaSoil(**as_dict(v)) for v in self.migs_ba_soil_set]

        if not isinstance(self.migs_ba_water_set, list):
            self.migs_ba_water_set = [self.migs_ba_water_set] if self.migs_ba_water_set is not None else []
        self.migs_ba_water_set = [v if isinstance(v, MigsBaWater) else MigsBaWater(**as_dict(v)) for v in self.migs_ba_water_set]

        if not isinstance(self.mims_plant_associated_set, list):
            self.mims_plant_associated_set = [self.mims_plant_associated_set] if self.mims_plant_associated_set is not None else []
        self.mims_plant_associated_set = [v if isinstance(v, MimsPlantAssociated) else MimsPlantAssociated(**as_dict(v)) for v in self.mims_plant_associated_set]

        if not isinstance(self.mims_sediment_set, list):
            self.mims_sediment_set = [self.mims_sediment_set] if self.mims_sediment_set is not None else []
        self.mims_sediment_set = [v if isinstance(v, MimsSediment) else MimsSediment(**as_dict(v)) for v in self.mims_sediment_set]

        if not isinstance(self.mims_soil_set, list):
            self.mims_soil_set = [self.mims_soil_set] if self.mims_soil_set is not None else []
        self.mims_soil_set = [v if isinstance(v, MimsSoil) else MimsSoil(**as_dict(v)) for v in self.mims_soil_set]

        if not isinstance(self.mims_water_set, list):
            self.mims_water_set = [self.mims_water_set] if self.mims_water_set is not None else []
        self.mims_water_set = [v if isinstance(v, MimsWater) else MimsWater(**as_dict(v)) for v in self.mims_water_set]

        super().__post_init__(**kwargs)


class EnvironmentalPackage(YAMLRoot):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS.EnvironmentalPackage
    class_class_curie: ClassVar[str] = "MIXS:EnvironmentalPackage"
    class_name: ClassVar[str] = "EnvironmentalPackage"
    class_model_uri: ClassVar[URIRef] = MIXS.EnvironmentalPackage


@dataclass
class Agriculture(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016018"]
    class_class_curie: ClassVar[str] = "MIXS:0016018"
    class_name: ClassVar[str] = "Agriculture"
    class_model_uri: ClassVar[URIRef] = MIXS.Agriculture

    adapters: str = None
    assembly_name: str = None
    chem_administration: str = None
    chimera_check: str = None
    food_source: str = None
    host_age: str = None
    host_common_name: str = None
    host_genotype: str = None
    host_height: str = None
    host_length: str = None
    host_life_stage: str = None
    host_phenotype: str = None
    host_spec_range: str = None
    host_taxid: int = None
    host_tot_mass: str = None
    lib_reads_seqd: int = None
    lib_screen: str = None
    lib_vector: str = None
    microbial_biomass: str = None
    mid: str = None
    nucl_acid_amp: str = None
    nucl_acid_ext: str = None
    pathogenicity: str = None
    pcr_cond: str = None
    pcr_primers: str = None
    pool_dna_extracts: str = None
    samp_mat_process: str = None
    samp_size: str = None
    samp_store_dur: str = None
    samp_store_loc: str = None
    samp_vol_we_dna_ext: str = None
    seq_meth: str = None
    sieving: str = None
    soil_type: str = None
    soil_type_meth: str = None
    specific_host: str = None
    store_cond: str = None
    target_gene: str = None
    target_subfragment: str = None
    temp: str = None
    annot: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    climate_environment: Optional[str] = None
    crop_rotation: Optional[str] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    drainage_class: Optional[Union[str, "DRAINAGECLASSENUM"]] = None
    enrichment_protocol: Optional[str] = None
    extreme_event: Optional[str] = None
    fao_class: Optional[Union[str, "FAOCLASSENUM"]] = None
    farm_water_source: Optional[str] = None
    fire: Optional[str] = None
    flooding: Optional[str] = None
    fungicide_regm: Optional[str] = None
    gaseous_environment: Optional[str] = None
    heavy_metals_meth: Optional[str] = None
    herbicide_regm: Optional[str] = None
    horizon_meth: Optional[str] = None
    host_disease_stat: Optional[str] = None
    humidity: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    non_mineral_nutr_regm: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    pesticide_regm: Optional[str] = None
    ph_meth: Optional[str] = None
    ph_regm: Optional[str] = None
    photosynt_activ: Optional[str] = None
    photosynt_activ_meth: Optional[str] = None
    plant_product: Optional[str] = None
    plant_struc: Optional[str] = None
    plant_water_method: Optional[str] = None
    previous_land_use: Optional[str] = None
    previous_land_use_meth: Optional[str] = None
    profile_position: Optional[Union[str, "PROFILEPOSITIONENUM"]] = None
    rel_location: Optional[str] = None
    salt_regm: Optional[str] = None
    samp_pooling: Optional[str] = None
    season_environment: Optional[str] = None
    slope_aspect: Optional[str] = None
    slope_gradient: Optional[str] = None
    soil_cover: Optional[str] = None
    standing_water_regm: Optional[str] = None
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    tot_carb: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_org_carb: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    water_temp_regm: Optional[str] = None
    watering_regm: Optional[str] = None
    adjacent_environment: Optional[str] = None
    agrochem_addition: Optional[str] = None
    ances_data: Optional[str] = None
    anim_water_method: Optional[str] = None
    annual_precpt: Optional[str] = None
    annual_temp: Optional[str] = None
    crop_yield: Optional[str] = None
    cult_isol_date: Optional[str] = None
    cur_land_use: Optional[Union[str, "CURLANDUSEENUM"]] = None
    elev: Optional[str] = None
    farm_equip: Optional[str] = None
    farm_equip_san: Optional[str] = None
    farm_equip_shared: Optional[str] = None
    fertilizer_admin: Optional[str] = None
    food_harvest_proc: Optional[str] = None
    food_prod: Optional[str] = None
    food_product_type: Optional[str] = None
    food_trav_mode: Optional[str] = None
    food_trav_vehic: Optional[str] = None
    genetic_mod: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_subspecf_genlin: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lib_size: Optional[int] = None
    library_prep_kit: Optional[str] = None
    link_class_info: Optional[str] = None
    link_climate_info: Optional[str] = None
    lot_number: Optional[str] = None
    misc_param: Optional[str] = None
    plant_growth_med: Optional[str] = None
    porosity: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_ph: Optional[float] = None
    samp_store_temp: Optional[str] = None
    season: Optional[str] = None
    season_humidity: Optional[str] = None
    season_precpt: Optional[str] = None
    season_temp: Optional[str] = None
    seq_quality_check: Optional[str] = None
    sequencing_location: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    soil_conductivity: Optional[str] = None
    soil_pH: Optional[float] = None
    soil_temp: Optional[str] = None
    solar_irradiance: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    spikein_strain: Optional[str] = None
    water_pH: Optional[float] = None
    water_source_shared: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.adapters):
            self.MissingRequiredField("adapters")
        if not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self._is_empty(self.assembly_name):
            self.MissingRequiredField("assembly_name")
        if not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self._is_empty(self.chem_administration):
            self.MissingRequiredField("chem_administration")
        if not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self._is_empty(self.chimera_check):
            self.MissingRequiredField("chimera_check")
        if not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self._is_empty(self.food_source):
            self.MissingRequiredField("food_source")
        if not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self._is_empty(self.host_age):
            self.MissingRequiredField("host_age")
        if not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self._is_empty(self.host_common_name):
            self.MissingRequiredField("host_common_name")
        if not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self._is_empty(self.host_genotype):
            self.MissingRequiredField("host_genotype")
        if not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self._is_empty(self.host_height):
            self.MissingRequiredField("host_height")
        if not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self._is_empty(self.host_length):
            self.MissingRequiredField("host_length")
        if not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self._is_empty(self.host_life_stage):
            self.MissingRequiredField("host_life_stage")
        if not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self._is_empty(self.host_phenotype):
            self.MissingRequiredField("host_phenotype")
        if not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self._is_empty(self.host_spec_range):
            self.MissingRequiredField("host_spec_range")
        if not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self._is_empty(self.host_taxid):
            self.MissingRequiredField("host_taxid")
        if not isinstance(self.host_taxid, int):
            self.host_taxid = int(self.host_taxid)

        if self._is_empty(self.host_tot_mass):
            self.MissingRequiredField("host_tot_mass")
        if not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self._is_empty(self.lib_reads_seqd):
            self.MissingRequiredField("lib_reads_seqd")
        if not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self._is_empty(self.lib_screen):
            self.MissingRequiredField("lib_screen")
        if not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self._is_empty(self.lib_vector):
            self.MissingRequiredField("lib_vector")
        if not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self._is_empty(self.microbial_biomass):
            self.MissingRequiredField("microbial_biomass")
        if not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if self._is_empty(self.mid):
            self.MissingRequiredField("mid")
        if not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self._is_empty(self.nucl_acid_amp):
            self.MissingRequiredField("nucl_acid_amp")
        if not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self._is_empty(self.nucl_acid_ext):
            self.MissingRequiredField("nucl_acid_ext")
        if not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self._is_empty(self.pathogenicity):
            self.MissingRequiredField("pathogenicity")
        if not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self._is_empty(self.pcr_cond):
            self.MissingRequiredField("pcr_cond")
        if not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self._is_empty(self.pcr_primers):
            self.MissingRequiredField("pcr_primers")
        if not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self._is_empty(self.pool_dna_extracts):
            self.MissingRequiredField("pool_dna_extracts")
        if not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self._is_empty(self.samp_mat_process):
            self.MissingRequiredField("samp_mat_process")
        if not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self._is_empty(self.samp_size):
            self.MissingRequiredField("samp_size")
        if not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self._is_empty(self.samp_store_dur):
            self.MissingRequiredField("samp_store_dur")
        if not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self._is_empty(self.samp_store_loc):
            self.MissingRequiredField("samp_store_loc")
        if not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self._is_empty(self.samp_vol_we_dna_ext):
            self.MissingRequiredField("samp_vol_we_dna_ext")
        if not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.sieving):
            self.MissingRequiredField("sieving")
        if not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self._is_empty(self.soil_type):
            self.MissingRequiredField("soil_type")
        if not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self._is_empty(self.soil_type_meth):
            self.MissingRequiredField("soil_type_meth")
        if not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self._is_empty(self.specific_host):
            self.MissingRequiredField("specific_host")
        if not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self._is_empty(self.store_cond):
            self.MissingRequiredField("store_cond")
        if not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self._is_empty(self.target_subfragment):
            self.MissingRequiredField("target_subfragment")
        if not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.climate_environment is not None and not isinstance(self.climate_environment, str):
            self.climate_environment = str(self.climate_environment)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.drainage_class is not None and not isinstance(self.drainage_class, DRAINAGECLASSENUM):
            self.drainage_class = DRAINAGECLASSENUM(self.drainage_class)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.extreme_event is not None and not isinstance(self.extreme_event, str):
            self.extreme_event = str(self.extreme_event)

        if self.fao_class is not None and not isinstance(self.fao_class, FAOCLASSENUM):
            self.fao_class = FAOCLASSENUM(self.fao_class)

        if self.farm_water_source is not None and not isinstance(self.farm_water_source, str):
            self.farm_water_source = str(self.farm_water_source)

        if self.fire is not None and not isinstance(self.fire, str):
            self.fire = str(self.fire)

        if self.flooding is not None and not isinstance(self.flooding, str):
            self.flooding = str(self.flooding)

        if self.fungicide_regm is not None and not isinstance(self.fungicide_regm, str):
            self.fungicide_regm = str(self.fungicide_regm)

        if self.gaseous_environment is not None and not isinstance(self.gaseous_environment, str):
            self.gaseous_environment = str(self.gaseous_environment)

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.herbicide_regm is not None and not isinstance(self.herbicide_regm, str):
            self.herbicide_regm = str(self.herbicide_regm)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.non_mineral_nutr_regm is not None and not isinstance(self.non_mineral_nutr_regm, str):
            self.non_mineral_nutr_regm = str(self.non_mineral_nutr_regm)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pesticide_regm is not None and not isinstance(self.pesticide_regm, str):
            self.pesticide_regm = str(self.pesticide_regm)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.ph_regm is not None and not isinstance(self.ph_regm, str):
            self.ph_regm = str(self.ph_regm)

        if self.photosynt_activ is not None and not isinstance(self.photosynt_activ, str):
            self.photosynt_activ = str(self.photosynt_activ)

        if self.photosynt_activ_meth is not None and not isinstance(self.photosynt_activ_meth, str):
            self.photosynt_activ_meth = str(self.photosynt_activ_meth)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.previous_land_use_meth is not None and not isinstance(self.previous_land_use_meth, str):
            self.previous_land_use_meth = str(self.previous_land_use_meth)

        if self.profile_position is not None and not isinstance(self.profile_position, PROFILEPOSITIONENUM):
            self.profile_position = PROFILEPOSITIONENUM(self.profile_position)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.salt_regm is not None and not isinstance(self.salt_regm, str):
            self.salt_regm = str(self.salt_regm)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.season_environment is not None and not isinstance(self.season_environment, str):
            self.season_environment = str(self.season_environment)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.standing_water_regm is not None and not isinstance(self.standing_water_regm, str):
            self.standing_water_regm = str(self.standing_water_regm)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.water_temp_regm is not None and not isinstance(self.water_temp_regm, str):
            self.water_temp_regm = str(self.water_temp_regm)

        if self.watering_regm is not None and not isinstance(self.watering_regm, str):
            self.watering_regm = str(self.watering_regm)

        if self.adjacent_environment is not None and not isinstance(self.adjacent_environment, str):
            self.adjacent_environment = str(self.adjacent_environment)

        if self.agrochem_addition is not None and not isinstance(self.agrochem_addition, str):
            self.agrochem_addition = str(self.agrochem_addition)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.anim_water_method is not None and not isinstance(self.anim_water_method, str):
            self.anim_water_method = str(self.anim_water_method)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, CURLANDUSEENUM):
            self.cur_land_use = CURLANDUSEENUM(self.cur_land_use)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.farm_equip is not None and not isinstance(self.farm_equip, str):
            self.farm_equip = str(self.farm_equip)

        if self.farm_equip_san is not None and not isinstance(self.farm_equip_san, str):
            self.farm_equip_san = str(self.farm_equip_san)

        if self.farm_equip_shared is not None and not isinstance(self.farm_equip_shared, str):
            self.farm_equip_shared = str(self.farm_equip_shared)

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.food_harvest_proc is not None and not isinstance(self.food_harvest_proc, str):
            self.food_harvest_proc = str(self.food_harvest_proc)

        if self.food_prod is not None and not isinstance(self.food_prod, str):
            self.food_prod = str(self.food_prod)

        if self.food_product_type is not None and not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self.food_trav_mode is not None and not isinstance(self.food_trav_mode, str):
            self.food_trav_mode = str(self.food_trav_mode)

        if self.food_trav_vehic is not None and not isinstance(self.food_trav_vehic, str):
            self.food_trav_vehic = str(self.food_trav_vehic)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_subspecf_genlin is not None and not isinstance(self.host_subspecf_genlin, str):
            self.host_subspecf_genlin = str(self.host_subspecf_genlin)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.season_humidity is not None and not isinstance(self.season_humidity, str):
            self.season_humidity = str(self.season_humidity)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.soil_pH is not None and not isinstance(self.soil_pH, float):
            self.soil_pH = float(self.soil_pH)

        if self.soil_temp is not None and not isinstance(self.soil_temp, str):
            self.soil_temp = str(self.soil_temp)

        if self.solar_irradiance is not None and not isinstance(self.solar_irradiance, str):
            self.solar_irradiance = str(self.solar_irradiance)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.spikein_strain is not None and not isinstance(self.spikein_strain, str):
            self.spikein_strain = str(self.spikein_strain)

        if self.water_pH is not None and not isinstance(self.water_pH, float):
            self.water_pH = float(self.water_pH)

        if self.water_source_shared is not None and not isinstance(self.water_source_shared, str):
            self.water_source_shared = str(self.water_source_shared)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        super().__post_init__(**kwargs)


@dataclass
class Air(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016000"]
    class_class_curie: ClassVar[str] = "MIXS:0016000"
    class_name: ClassVar[str] = "Air"
    class_model_uri: ClassVar[URIRef] = MIXS.Air

    alt: str = None
    project_name: str = None
    elev: Optional[str] = None
    air_pm_concen: Optional[str] = None
    barometric_press: Optional[str] = None
    carb_dioxide: Optional[str] = None
    carb_monoxide: Optional[str] = None
    chem_administration: Optional[str] = None
    humidity: Optional[str] = None
    methane: Optional[str] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    oxygen: Optional[str] = None
    perturbation: Optional[str] = None
    pollutants: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    solar_irradiance: Optional[str] = None
    temp: Optional[str] = None
    ventilation_rate: Optional[str] = None
    ventilation_type: Optional[str] = None
    volatile_org_comp: Optional[str] = None
    wind_direction: Optional[str] = None
    wind_speed: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.alt):
            self.MissingRequiredField("alt")
        if not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.air_pm_concen is not None and not isinstance(self.air_pm_concen, str):
            self.air_pm_concen = str(self.air_pm_concen)

        if self.barometric_press is not None and not isinstance(self.barometric_press, str):
            self.barometric_press = str(self.barometric_press)

        if self.carb_dioxide is not None and not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if self.carb_monoxide is not None and not isinstance(self.carb_monoxide, str):
            self.carb_monoxide = str(self.carb_monoxide)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.oxygen is not None and not isinstance(self.oxygen, str):
            self.oxygen = str(self.oxygen)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pollutants is not None and not isinstance(self.pollutants, str):
            self.pollutants = str(self.pollutants)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.solar_irradiance is not None and not isinstance(self.solar_irradiance, str):
            self.solar_irradiance = str(self.solar_irradiance)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if self.ventilation_type is not None and not isinstance(self.ventilation_type, str):
            self.ventilation_type = str(self.ventilation_type)

        if self.volatile_org_comp is not None and not isinstance(self.volatile_org_comp, str):
            self.volatile_org_comp = str(self.volatile_org_comp)

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        super().__post_init__(**kwargs)


@dataclass
class BuiltEnvironment(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016001"]
    class_class_curie: ClassVar[str] = "MIXS:0016001"
    class_name: ClassVar[str] = "BuiltEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS.BuiltEnvironment

    abs_air_humidity: str = None
    air_temp: str = None
    build_occup_type: str = None
    building_setting: str = None
    carb_dioxide: str = None
    filter_type: str = None
    heat_cool_type: str = None
    indoor_space: str = None
    light_type: str = None
    occup_density_samp: str = None
    occup_samp: int = None
    organism_count: str = None
    project_name: str = None
    rel_air_humidity: str = None
    space_typ_state: str = None
    typ_occup_density: float = None
    ventilation_type: str = None
    indoor_surf: Optional[str] = None
    surf_air_cont: Optional[str] = None
    surf_humidity: Optional[str] = None
    surf_material: Optional[str] = None
    surf_moisture: Optional[str] = None
    surf_moisture_ph: Optional[float] = None
    surf_temp: Optional[str] = None
    address: Optional[str] = None
    adj_room: Optional[str] = None
    aero_struc: Optional[str] = None
    amount_light: Optional[str] = None
    arch_struc: Optional[str] = None
    avg_dew_point: Optional[str] = None
    avg_occup: Optional[float] = None
    avg_temp: Optional[str] = None
    bathroom_count: Optional[int] = None
    bedroom_count: Optional[int] = None
    build_docs: Optional[str] = None
    built_struc_age: Optional[str] = None
    built_struc_set: Optional[str] = None
    built_struc_type: Optional[str] = None
    ceil_area: Optional[str] = None
    ceil_cond: Optional[str] = None
    ceil_finish_mat: Optional[str] = None
    ceil_struc: Optional[str] = None
    ceil_texture: Optional[str] = None
    ceil_thermal_mass: Optional[str] = None
    ceil_type: Optional[str] = None
    ceil_water_mold: Optional[str] = None
    cool_syst_id: Optional[int] = None
    date_last_rain: Optional[str] = None
    dew_point: Optional[str] = None
    door_comp_type: Optional[str] = None
    door_cond: Optional[str] = None
    door_direct: Optional[str] = None
    door_loc: Optional[str] = None
    door_mat: Optional[str] = None
    door_move: Optional[str] = None
    door_size: Optional[str] = None
    door_type: Optional[str] = None
    door_type_metal: Optional[str] = None
    door_type_wood: Optional[str] = None
    door_water_mold: Optional[str] = None
    drawings: Optional[str] = None
    elevator: Optional[int] = None
    escalator: Optional[int] = None
    exp_duct: Optional[str] = None
    exp_pipe: Optional[int] = None
    ext_door: Optional[int] = None
    ext_wall_orient: Optional[str] = None
    ext_window_orient: Optional[str] = None
    fireplace_type: Optional[str] = None
    floor_age: Optional[str] = None
    floor_area: Optional[str] = None
    floor_cond: Optional[str] = None
    floor_count: Optional[int] = None
    floor_finish_mat: Optional[str] = None
    floor_struc: Optional[str] = None
    floor_thermal_mass: Optional[str] = None
    floor_water_mold: Optional[str] = None
    freq_clean: Optional[str] = None
    freq_cook: Optional[int] = None
    furniture: Optional[str] = None
    gender_restroom: Optional[str] = None
    hall_count: Optional[int] = None
    handidness: Optional[str] = None
    heat_deliv_loc: Optional[str] = None
    heat_sys_deliv_meth: Optional[str] = None
    heat_system_id: Optional[int] = None
    height_carper_fiber: Optional[str] = None
    inside_lux: Optional[str] = None
    int_wall_cond: Optional[str] = None
    last_clean: Optional[str] = None
    max_occup: Optional[int] = None
    mech_struc: Optional[str] = None
    number_pets: Optional[int] = None
    number_plants: Optional[int] = None
    number_resident: Optional[int] = None
    occup_document: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    quad_pos: Optional[str] = None
    rel_humidity_out: Optional[str] = None
    rel_samp_loc: Optional[str] = None
    room_air_exch_rate: Optional[str] = None
    room_architec_elem: Optional[str] = None
    room_condt: Optional[str] = None
    room_connected: Optional[str] = None
    room_count: Optional[int] = None
    room_dim: Optional[str] = None
    room_door_dist: Optional[str] = None
    room_door_share: Optional[str] = None
    room_hallway: Optional[str] = None
    room_loc: Optional[str] = None
    room_moist_dam_hist: Optional[int] = None
    room_net_area: Optional[str] = None
    room_occup: Optional[int] = None
    room_samp_pos: Optional[str] = None
    room_type: Optional[str] = None
    room_vol: Optional[str] = None
    room_wall_share: Optional[str] = None
    room_window_count: Optional[int] = None
    samp_floor: Optional[str] = None
    samp_room_id: Optional[int] = None
    samp_sort_meth: Optional[str] = None
    samp_time_out: Optional[str] = None
    samp_weather: Optional[str] = None
    season: Optional[str] = None
    season_use: Optional[str] = None
    shad_dev_water_mold: Optional[str] = None
    shading_device_cond: Optional[str] = None
    shading_device_loc: Optional[str] = None
    shading_device_mat: Optional[str] = None
    shading_device_type: Optional[str] = None
    specific: Optional[str] = None
    specific_humidity: Optional[str] = None
    substructure_type: Optional[str] = None
    temp_out: Optional[str] = None
    train_line: Optional[str] = None
    train_stat_loc: Optional[str] = None
    train_stop_loc: Optional[str] = None
    vis_media: Optional[str] = None
    wall_area: Optional[str] = None
    wall_const_type: Optional[str] = None
    wall_finish_mat: Optional[str] = None
    wall_height: Optional[str] = None
    wall_loc: Optional[str] = None
    wall_surf_treatment: Optional[str] = None
    wall_texture: Optional[str] = None
    wall_thermal_mass: Optional[str] = None
    wall_water_mold: Optional[str] = None
    water_feat_size: Optional[str] = None
    water_feat_type: Optional[str] = None
    weekday: Optional[str] = None
    window_cond: Optional[str] = None
    window_cover: Optional[str] = None
    window_horiz_pos: Optional[str] = None
    window_loc: Optional[str] = None
    window_mat: Optional[str] = None
    window_open_freq: Optional[int] = None
    window_size: Optional[str] = None
    window_status: Optional[str] = None
    window_type: Optional[str] = None
    window_vert_pos: Optional[str] = None
    window_water_mold: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.abs_air_humidity):
            self.MissingRequiredField("abs_air_humidity")
        if not isinstance(self.abs_air_humidity, str):
            self.abs_air_humidity = str(self.abs_air_humidity)

        if self._is_empty(self.air_temp):
            self.MissingRequiredField("air_temp")
        if not isinstance(self.air_temp, str):
            self.air_temp = str(self.air_temp)

        if self._is_empty(self.build_occup_type):
            self.MissingRequiredField("build_occup_type")
        if not isinstance(self.build_occup_type, str):
            self.build_occup_type = str(self.build_occup_type)

        if self._is_empty(self.building_setting):
            self.MissingRequiredField("building_setting")
        if not isinstance(self.building_setting, str):
            self.building_setting = str(self.building_setting)

        if self._is_empty(self.carb_dioxide):
            self.MissingRequiredField("carb_dioxide")
        if not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if self._is_empty(self.filter_type):
            self.MissingRequiredField("filter_type")
        if not isinstance(self.filter_type, str):
            self.filter_type = str(self.filter_type)

        if self._is_empty(self.heat_cool_type):
            self.MissingRequiredField("heat_cool_type")
        if not isinstance(self.heat_cool_type, str):
            self.heat_cool_type = str(self.heat_cool_type)

        if self._is_empty(self.indoor_space):
            self.MissingRequiredField("indoor_space")
        if not isinstance(self.indoor_space, str):
            self.indoor_space = str(self.indoor_space)

        if self._is_empty(self.light_type):
            self.MissingRequiredField("light_type")
        if not isinstance(self.light_type, str):
            self.light_type = str(self.light_type)

        if self._is_empty(self.occup_density_samp):
            self.MissingRequiredField("occup_density_samp")
        if not isinstance(self.occup_density_samp, str):
            self.occup_density_samp = str(self.occup_density_samp)

        if self._is_empty(self.occup_samp):
            self.MissingRequiredField("occup_samp")
        if not isinstance(self.occup_samp, int):
            self.occup_samp = int(self.occup_samp)

        if self._is_empty(self.organism_count):
            self.MissingRequiredField("organism_count")
        if not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.rel_air_humidity):
            self.MissingRequiredField("rel_air_humidity")
        if not isinstance(self.rel_air_humidity, str):
            self.rel_air_humidity = str(self.rel_air_humidity)

        if self._is_empty(self.space_typ_state):
            self.MissingRequiredField("space_typ_state")
        if not isinstance(self.space_typ_state, str):
            self.space_typ_state = str(self.space_typ_state)

        if self._is_empty(self.typ_occup_density):
            self.MissingRequiredField("typ_occup_density")
        if not isinstance(self.typ_occup_density, float):
            self.typ_occup_density = float(self.typ_occup_density)

        if self._is_empty(self.ventilation_type):
            self.MissingRequiredField("ventilation_type")
        if not isinstance(self.ventilation_type, str):
            self.ventilation_type = str(self.ventilation_type)

        if self.indoor_surf is not None and not isinstance(self.indoor_surf, str):
            self.indoor_surf = str(self.indoor_surf)

        if self.surf_air_cont is not None and not isinstance(self.surf_air_cont, str):
            self.surf_air_cont = str(self.surf_air_cont)

        if self.surf_humidity is not None and not isinstance(self.surf_humidity, str):
            self.surf_humidity = str(self.surf_humidity)

        if self.surf_material is not None and not isinstance(self.surf_material, str):
            self.surf_material = str(self.surf_material)

        if self.surf_moisture is not None and not isinstance(self.surf_moisture, str):
            self.surf_moisture = str(self.surf_moisture)

        if self.surf_moisture_ph is not None and not isinstance(self.surf_moisture_ph, float):
            self.surf_moisture_ph = float(self.surf_moisture_ph)

        if self.surf_temp is not None and not isinstance(self.surf_temp, str):
            self.surf_temp = str(self.surf_temp)

        if self.address is not None and not isinstance(self.address, str):
            self.address = str(self.address)

        if self.adj_room is not None and not isinstance(self.adj_room, str):
            self.adj_room = str(self.adj_room)

        if self.aero_struc is not None and not isinstance(self.aero_struc, str):
            self.aero_struc = str(self.aero_struc)

        if self.amount_light is not None and not isinstance(self.amount_light, str):
            self.amount_light = str(self.amount_light)

        if self.arch_struc is not None and not isinstance(self.arch_struc, str):
            self.arch_struc = str(self.arch_struc)

        if self.avg_dew_point is not None and not isinstance(self.avg_dew_point, str):
            self.avg_dew_point = str(self.avg_dew_point)

        if self.avg_occup is not None and not isinstance(self.avg_occup, float):
            self.avg_occup = float(self.avg_occup)

        if self.avg_temp is not None and not isinstance(self.avg_temp, str):
            self.avg_temp = str(self.avg_temp)

        if self.bathroom_count is not None and not isinstance(self.bathroom_count, int):
            self.bathroom_count = int(self.bathroom_count)

        if self.bedroom_count is not None and not isinstance(self.bedroom_count, int):
            self.bedroom_count = int(self.bedroom_count)

        if self.build_docs is not None and not isinstance(self.build_docs, str):
            self.build_docs = str(self.build_docs)

        if self.built_struc_age is not None and not isinstance(self.built_struc_age, str):
            self.built_struc_age = str(self.built_struc_age)

        if self.built_struc_set is not None and not isinstance(self.built_struc_set, str):
            self.built_struc_set = str(self.built_struc_set)

        if self.built_struc_type is not None and not isinstance(self.built_struc_type, str):
            self.built_struc_type = str(self.built_struc_type)

        if self.ceil_area is not None and not isinstance(self.ceil_area, str):
            self.ceil_area = str(self.ceil_area)

        if self.ceil_cond is not None and not isinstance(self.ceil_cond, str):
            self.ceil_cond = str(self.ceil_cond)

        if self.ceil_finish_mat is not None and not isinstance(self.ceil_finish_mat, str):
            self.ceil_finish_mat = str(self.ceil_finish_mat)

        if self.ceil_struc is not None and not isinstance(self.ceil_struc, str):
            self.ceil_struc = str(self.ceil_struc)

        if self.ceil_texture is not None and not isinstance(self.ceil_texture, str):
            self.ceil_texture = str(self.ceil_texture)

        if self.ceil_thermal_mass is not None and not isinstance(self.ceil_thermal_mass, str):
            self.ceil_thermal_mass = str(self.ceil_thermal_mass)

        if self.ceil_type is not None and not isinstance(self.ceil_type, str):
            self.ceil_type = str(self.ceil_type)

        if self.ceil_water_mold is not None and not isinstance(self.ceil_water_mold, str):
            self.ceil_water_mold = str(self.ceil_water_mold)

        if self.cool_syst_id is not None and not isinstance(self.cool_syst_id, int):
            self.cool_syst_id = int(self.cool_syst_id)

        if self.date_last_rain is not None and not isinstance(self.date_last_rain, str):
            self.date_last_rain = str(self.date_last_rain)

        if self.dew_point is not None and not isinstance(self.dew_point, str):
            self.dew_point = str(self.dew_point)

        if self.door_comp_type is not None and not isinstance(self.door_comp_type, str):
            self.door_comp_type = str(self.door_comp_type)

        if self.door_cond is not None and not isinstance(self.door_cond, str):
            self.door_cond = str(self.door_cond)

        if self.door_direct is not None and not isinstance(self.door_direct, str):
            self.door_direct = str(self.door_direct)

        if self.door_loc is not None and not isinstance(self.door_loc, str):
            self.door_loc = str(self.door_loc)

        if self.door_mat is not None and not isinstance(self.door_mat, str):
            self.door_mat = str(self.door_mat)

        if self.door_move is not None and not isinstance(self.door_move, str):
            self.door_move = str(self.door_move)

        if self.door_size is not None and not isinstance(self.door_size, str):
            self.door_size = str(self.door_size)

        if self.door_type is not None and not isinstance(self.door_type, str):
            self.door_type = str(self.door_type)

        if self.door_type_metal is not None and not isinstance(self.door_type_metal, str):
            self.door_type_metal = str(self.door_type_metal)

        if self.door_type_wood is not None and not isinstance(self.door_type_wood, str):
            self.door_type_wood = str(self.door_type_wood)

        if self.door_water_mold is not None and not isinstance(self.door_water_mold, str):
            self.door_water_mold = str(self.door_water_mold)

        if self.drawings is not None and not isinstance(self.drawings, str):
            self.drawings = str(self.drawings)

        if self.elevator is not None and not isinstance(self.elevator, int):
            self.elevator = int(self.elevator)

        if self.escalator is not None and not isinstance(self.escalator, int):
            self.escalator = int(self.escalator)

        if self.exp_duct is not None and not isinstance(self.exp_duct, str):
            self.exp_duct = str(self.exp_duct)

        if self.exp_pipe is not None and not isinstance(self.exp_pipe, int):
            self.exp_pipe = int(self.exp_pipe)

        if self.ext_door is not None and not isinstance(self.ext_door, int):
            self.ext_door = int(self.ext_door)

        if self.ext_wall_orient is not None and not isinstance(self.ext_wall_orient, str):
            self.ext_wall_orient = str(self.ext_wall_orient)

        if self.ext_window_orient is not None and not isinstance(self.ext_window_orient, str):
            self.ext_window_orient = str(self.ext_window_orient)

        if self.fireplace_type is not None and not isinstance(self.fireplace_type, str):
            self.fireplace_type = str(self.fireplace_type)

        if self.floor_age is not None and not isinstance(self.floor_age, str):
            self.floor_age = str(self.floor_age)

        if self.floor_area is not None and not isinstance(self.floor_area, str):
            self.floor_area = str(self.floor_area)

        if self.floor_cond is not None and not isinstance(self.floor_cond, str):
            self.floor_cond = str(self.floor_cond)

        if self.floor_count is not None and not isinstance(self.floor_count, int):
            self.floor_count = int(self.floor_count)

        if self.floor_finish_mat is not None and not isinstance(self.floor_finish_mat, str):
            self.floor_finish_mat = str(self.floor_finish_mat)

        if self.floor_struc is not None and not isinstance(self.floor_struc, str):
            self.floor_struc = str(self.floor_struc)

        if self.floor_thermal_mass is not None and not isinstance(self.floor_thermal_mass, str):
            self.floor_thermal_mass = str(self.floor_thermal_mass)

        if self.floor_water_mold is not None and not isinstance(self.floor_water_mold, str):
            self.floor_water_mold = str(self.floor_water_mold)

        if self.freq_clean is not None and not isinstance(self.freq_clean, str):
            self.freq_clean = str(self.freq_clean)

        if self.freq_cook is not None and not isinstance(self.freq_cook, int):
            self.freq_cook = int(self.freq_cook)

        if self.furniture is not None and not isinstance(self.furniture, str):
            self.furniture = str(self.furniture)

        if self.gender_restroom is not None and not isinstance(self.gender_restroom, str):
            self.gender_restroom = str(self.gender_restroom)

        if self.hall_count is not None and not isinstance(self.hall_count, int):
            self.hall_count = int(self.hall_count)

        if self.handidness is not None and not isinstance(self.handidness, str):
            self.handidness = str(self.handidness)

        if self.heat_deliv_loc is not None and not isinstance(self.heat_deliv_loc, str):
            self.heat_deliv_loc = str(self.heat_deliv_loc)

        if self.heat_sys_deliv_meth is not None and not isinstance(self.heat_sys_deliv_meth, str):
            self.heat_sys_deliv_meth = str(self.heat_sys_deliv_meth)

        if self.heat_system_id is not None and not isinstance(self.heat_system_id, int):
            self.heat_system_id = int(self.heat_system_id)

        if self.height_carper_fiber is not None and not isinstance(self.height_carper_fiber, str):
            self.height_carper_fiber = str(self.height_carper_fiber)

        if self.inside_lux is not None and not isinstance(self.inside_lux, str):
            self.inside_lux = str(self.inside_lux)

        if self.int_wall_cond is not None and not isinstance(self.int_wall_cond, str):
            self.int_wall_cond = str(self.int_wall_cond)

        if self.last_clean is not None and not isinstance(self.last_clean, str):
            self.last_clean = str(self.last_clean)

        if self.max_occup is not None and not isinstance(self.max_occup, int):
            self.max_occup = int(self.max_occup)

        if self.mech_struc is not None and not isinstance(self.mech_struc, str):
            self.mech_struc = str(self.mech_struc)

        if self.number_pets is not None and not isinstance(self.number_pets, int):
            self.number_pets = int(self.number_pets)

        if self.number_plants is not None and not isinstance(self.number_plants, int):
            self.number_plants = int(self.number_plants)

        if self.number_resident is not None and not isinstance(self.number_resident, int):
            self.number_resident = int(self.number_resident)

        if self.occup_document is not None and not isinstance(self.occup_document, str):
            self.occup_document = str(self.occup_document)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.quad_pos is not None and not isinstance(self.quad_pos, str):
            self.quad_pos = str(self.quad_pos)

        if self.rel_humidity_out is not None and not isinstance(self.rel_humidity_out, str):
            self.rel_humidity_out = str(self.rel_humidity_out)

        if self.rel_samp_loc is not None and not isinstance(self.rel_samp_loc, str):
            self.rel_samp_loc = str(self.rel_samp_loc)

        if self.room_air_exch_rate is not None and not isinstance(self.room_air_exch_rate, str):
            self.room_air_exch_rate = str(self.room_air_exch_rate)

        if self.room_architec_elem is not None and not isinstance(self.room_architec_elem, str):
            self.room_architec_elem = str(self.room_architec_elem)

        if self.room_condt is not None and not isinstance(self.room_condt, str):
            self.room_condt = str(self.room_condt)

        if self.room_connected is not None and not isinstance(self.room_connected, str):
            self.room_connected = str(self.room_connected)

        if self.room_count is not None and not isinstance(self.room_count, int):
            self.room_count = int(self.room_count)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.room_door_dist is not None and not isinstance(self.room_door_dist, str):
            self.room_door_dist = str(self.room_door_dist)

        if self.room_door_share is not None and not isinstance(self.room_door_share, str):
            self.room_door_share = str(self.room_door_share)

        if self.room_hallway is not None and not isinstance(self.room_hallway, str):
            self.room_hallway = str(self.room_hallway)

        if self.room_loc is not None and not isinstance(self.room_loc, str):
            self.room_loc = str(self.room_loc)

        if self.room_moist_dam_hist is not None and not isinstance(self.room_moist_dam_hist, int):
            self.room_moist_dam_hist = int(self.room_moist_dam_hist)

        if self.room_net_area is not None and not isinstance(self.room_net_area, str):
            self.room_net_area = str(self.room_net_area)

        if self.room_occup is not None and not isinstance(self.room_occup, int):
            self.room_occup = int(self.room_occup)

        if self.room_samp_pos is not None and not isinstance(self.room_samp_pos, str):
            self.room_samp_pos = str(self.room_samp_pos)

        if self.room_type is not None and not isinstance(self.room_type, str):
            self.room_type = str(self.room_type)

        if self.room_vol is not None and not isinstance(self.room_vol, str):
            self.room_vol = str(self.room_vol)

        if self.room_wall_share is not None and not isinstance(self.room_wall_share, str):
            self.room_wall_share = str(self.room_wall_share)

        if self.room_window_count is not None and not isinstance(self.room_window_count, int):
            self.room_window_count = int(self.room_window_count)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, int):
            self.samp_room_id = int(self.samp_room_id)

        if self.samp_sort_meth is not None and not isinstance(self.samp_sort_meth, str):
            self.samp_sort_meth = str(self.samp_sort_meth)

        if self.samp_time_out is not None and not isinstance(self.samp_time_out, str):
            self.samp_time_out = str(self.samp_time_out)

        if self.samp_weather is not None and not isinstance(self.samp_weather, str):
            self.samp_weather = str(self.samp_weather)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.season_use is not None and not isinstance(self.season_use, str):
            self.season_use = str(self.season_use)

        if self.shad_dev_water_mold is not None and not isinstance(self.shad_dev_water_mold, str):
            self.shad_dev_water_mold = str(self.shad_dev_water_mold)

        if self.shading_device_cond is not None and not isinstance(self.shading_device_cond, str):
            self.shading_device_cond = str(self.shading_device_cond)

        if self.shading_device_loc is not None and not isinstance(self.shading_device_loc, str):
            self.shading_device_loc = str(self.shading_device_loc)

        if self.shading_device_mat is not None and not isinstance(self.shading_device_mat, str):
            self.shading_device_mat = str(self.shading_device_mat)

        if self.shading_device_type is not None and not isinstance(self.shading_device_type, str):
            self.shading_device_type = str(self.shading_device_type)

        if self.specific is not None and not isinstance(self.specific, str):
            self.specific = str(self.specific)

        if self.specific_humidity is not None and not isinstance(self.specific_humidity, str):
            self.specific_humidity = str(self.specific_humidity)

        if self.substructure_type is not None and not isinstance(self.substructure_type, str):
            self.substructure_type = str(self.substructure_type)

        if self.temp_out is not None and not isinstance(self.temp_out, str):
            self.temp_out = str(self.temp_out)

        if self.train_line is not None and not isinstance(self.train_line, str):
            self.train_line = str(self.train_line)

        if self.train_stat_loc is not None and not isinstance(self.train_stat_loc, str):
            self.train_stat_loc = str(self.train_stat_loc)

        if self.train_stop_loc is not None and not isinstance(self.train_stop_loc, str):
            self.train_stop_loc = str(self.train_stop_loc)

        if self.vis_media is not None and not isinstance(self.vis_media, str):
            self.vis_media = str(self.vis_media)

        if self.wall_area is not None and not isinstance(self.wall_area, str):
            self.wall_area = str(self.wall_area)

        if self.wall_const_type is not None and not isinstance(self.wall_const_type, str):
            self.wall_const_type = str(self.wall_const_type)

        if self.wall_finish_mat is not None and not isinstance(self.wall_finish_mat, str):
            self.wall_finish_mat = str(self.wall_finish_mat)

        if self.wall_height is not None and not isinstance(self.wall_height, str):
            self.wall_height = str(self.wall_height)

        if self.wall_loc is not None and not isinstance(self.wall_loc, str):
            self.wall_loc = str(self.wall_loc)

        if self.wall_surf_treatment is not None and not isinstance(self.wall_surf_treatment, str):
            self.wall_surf_treatment = str(self.wall_surf_treatment)

        if self.wall_texture is not None and not isinstance(self.wall_texture, str):
            self.wall_texture = str(self.wall_texture)

        if self.wall_thermal_mass is not None and not isinstance(self.wall_thermal_mass, str):
            self.wall_thermal_mass = str(self.wall_thermal_mass)

        if self.wall_water_mold is not None and not isinstance(self.wall_water_mold, str):
            self.wall_water_mold = str(self.wall_water_mold)

        if self.water_feat_size is not None and not isinstance(self.water_feat_size, str):
            self.water_feat_size = str(self.water_feat_size)

        if self.water_feat_type is not None and not isinstance(self.water_feat_type, str):
            self.water_feat_type = str(self.water_feat_type)

        if self.weekday is not None and not isinstance(self.weekday, str):
            self.weekday = str(self.weekday)

        if self.window_cond is not None and not isinstance(self.window_cond, str):
            self.window_cond = str(self.window_cond)

        if self.window_cover is not None and not isinstance(self.window_cover, str):
            self.window_cover = str(self.window_cover)

        if self.window_horiz_pos is not None and not isinstance(self.window_horiz_pos, str):
            self.window_horiz_pos = str(self.window_horiz_pos)

        if self.window_loc is not None and not isinstance(self.window_loc, str):
            self.window_loc = str(self.window_loc)

        if self.window_mat is not None and not isinstance(self.window_mat, str):
            self.window_mat = str(self.window_mat)

        if self.window_open_freq is not None and not isinstance(self.window_open_freq, int):
            self.window_open_freq = int(self.window_open_freq)

        if self.window_size is not None and not isinstance(self.window_size, str):
            self.window_size = str(self.window_size)

        if self.window_status is not None and not isinstance(self.window_status, str):
            self.window_status = str(self.window_status)

        if self.window_type is not None and not isinstance(self.window_type, str):
            self.window_type = str(self.window_type)

        if self.window_vert_pos is not None and not isinstance(self.window_vert_pos, str):
            self.window_vert_pos = str(self.window_vert_pos)

        if self.window_water_mold is not None and not isinstance(self.window_water_mold, str):
            self.window_water_mold = str(self.window_water_mold)

        super().__post_init__(**kwargs)


@dataclass
class FoodAnimalAndAnimalFeed(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016019"]
    class_class_curie: ClassVar[str] = "MIXS:0016019"
    class_name: ClassVar[str] = "FoodAnimalAndAnimalFeed"
    class_model_uri: ClassVar[URIRef] = MIXS.FoodAnimalAndAnimalFeed

    coll_site_geo_feat: str = None
    collection_date: str = None
    env_broad_scale: str = None
    env_local_scale: str = None
    env_medium: str = None
    food_origin: str = None
    food_prod: str = None
    food_product_type: str = None
    geo_loc_name: str = None
    IFSAC_category: str = None
    intended_consumer: str = None
    lat_lon: str = None
    project_name: str = None
    samp_purpose: str = None
    seq_meth: str = None
    animal_am: Optional[str] = None
    animal_am_dur: Optional[str] = None
    animal_am_freq: Optional[str] = None
    animal_am_route: Optional[str] = None
    animal_am_use: Optional[str] = None
    animal_body_cond: Optional[str] = None
    animal_diet: Optional[str] = None
    animal_feed_equip: Optional[str] = None
    animal_group_size: Optional[int] = None
    animal_housing: Optional[str] = None
    animal_sex: Optional[str] = None
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[str] = None
    cons_qty_purchased: Optional[str] = None
    cult_isol_date: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[str] = None
    cult_target: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    experimental_factor: Optional[str] = None
    food_additive: Optional[str] = None
    food_contact_surf: Optional[str] = None
    food_contain_wrap: Optional[str] = None
    food_cooking_proc: Optional[str] = None
    food_dis_point: Optional[str] = None
    food_dis_point_city: Optional[str] = None
    food_ingredient: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[str] = None
    food_pack_medium: Optional[str] = None
    food_preserv_proc: Optional[str] = None
    food_prior_contact: Optional[str] = None
    food_prod_synonym: Optional[str] = None
    food_product_qual: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source: Optional[str] = None
    food_source_age: Optional[str] = None
    food_trace_list: Optional[str] = None
    food_trav_mode: Optional[str] = None
    food_trav_vehic: Optional[str] = None
    food_treat_proc: Optional[str] = None
    HACCP_term: Optional[str] = None
    library_prep_kit: Optional[str] = None
    lot_number: Optional[str] = None
    microb_cult_med: Optional[str] = None
    misc_param: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    organism_count: Optional[str] = None
    part_plant_animal: Optional[str] = None
    perturbation: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    repository_name: Optional[str] = None
    samp_pooling: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_size: Optional[str] = None
    samp_source_mat_cat: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[str] = None
    spikein_AMR: Optional[str] = None
    spikein_antibiotic: Optional[str] = None
    spikein_count: Optional[str] = None
    spikein_growth_med: Optional[str] = None
    spikein_metal: Optional[str] = None
    spikein_org: Optional[str] = None
    spikein_serovar: Optional[str] = None
    spikein_strain: Optional[str] = None
    study_design: Optional[str] = None
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[str] = None
    temp: Optional[str] = None
    timepoint: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.food_origin):
            self.MissingRequiredField("food_origin")
        if not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self._is_empty(self.food_prod):
            self.MissingRequiredField("food_prod")
        if not isinstance(self.food_prod, str):
            self.food_prod = str(self.food_prod)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, str):
            self.IFSAC_category = str(self.IFSAC_category)

        if self._is_empty(self.intended_consumer):
            self.MissingRequiredField("intended_consumer")
        if not isinstance(self.intended_consumer, str):
            self.intended_consumer = str(self.intended_consumer)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_purpose):
            self.MissingRequiredField("samp_purpose")
        if not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.animal_am is not None and not isinstance(self.animal_am, str):
            self.animal_am = str(self.animal_am)

        if self.animal_am_dur is not None and not isinstance(self.animal_am_dur, str):
            self.animal_am_dur = str(self.animal_am_dur)

        if self.animal_am_freq is not None and not isinstance(self.animal_am_freq, str):
            self.animal_am_freq = str(self.animal_am_freq)

        if self.animal_am_route is not None and not isinstance(self.animal_am_route, str):
            self.animal_am_route = str(self.animal_am_route)

        if self.animal_am_use is not None and not isinstance(self.animal_am_use, str):
            self.animal_am_use = str(self.animal_am_use)

        if self.animal_body_cond is not None and not isinstance(self.animal_body_cond, str):
            self.animal_body_cond = str(self.animal_body_cond)

        if self.animal_diet is not None and not isinstance(self.animal_diet, str):
            self.animal_diet = str(self.animal_diet)

        if self.animal_feed_equip is not None and not isinstance(self.animal_feed_equip, str):
            self.animal_feed_equip = str(self.animal_feed_equip)

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, int):
            self.animal_group_size = int(self.animal_group_size)

        if self.animal_housing is not None and not isinstance(self.animal_housing, str):
            self.animal_housing = str(self.animal_housing)

        if self.animal_sex is not None and not isinstance(self.animal_sex, str):
            self.animal_sex = str(self.animal_sex)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, str):
            self.cons_purch_date = str(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if self.cult_result_org is not None and not isinstance(self.cult_result_org, str):
            self.cult_result_org = str(self.cult_result_org)

        if self.cult_target is not None and not isinstance(self.cult_target, str):
            self.cult_target = str(self.cult_target)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.food_additive is not None and not isinstance(self.food_additive, str):
            self.food_additive = str(self.food_additive)

        if self.food_contact_surf is not None and not isinstance(self.food_contact_surf, str):
            self.food_contact_surf = str(self.food_contact_surf)

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if self.food_cooking_proc is not None and not isinstance(self.food_cooking_proc, str):
            self.food_cooking_proc = str(self.food_cooking_proc)

        if self.food_dis_point is not None and not isinstance(self.food_dis_point, str):
            self.food_dis_point = str(self.food_dis_point)

        if self.food_dis_point_city is not None and not isinstance(self.food_dis_point_city, str):
            self.food_dis_point_city = str(self.food_dis_point_city)

        if self.food_ingredient is not None and not isinstance(self.food_ingredient, str):
            self.food_ingredient = str(self.food_ingredient)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if self.food_pack_integrity is not None and not isinstance(self.food_pack_integrity, str):
            self.food_pack_integrity = str(self.food_pack_integrity)

        if self.food_pack_medium is not None and not isinstance(self.food_pack_medium, str):
            self.food_pack_medium = str(self.food_pack_medium)

        if self.food_preserv_proc is not None and not isinstance(self.food_preserv_proc, str):
            self.food_preserv_proc = str(self.food_preserv_proc)

        if self.food_prior_contact is not None and not isinstance(self.food_prior_contact, str):
            self.food_prior_contact = str(self.food_prior_contact)

        if self.food_prod_synonym is not None and not isinstance(self.food_prod_synonym, str):
            self.food_prod_synonym = str(self.food_prod_synonym)

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.food_source_age is not None and not isinstance(self.food_source_age, str):
            self.food_source_age = str(self.food_source_age)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if self.food_trav_mode is not None and not isinstance(self.food_trav_mode, str):
            self.food_trav_mode = str(self.food_trav_mode)

        if self.food_trav_vehic is not None and not isinstance(self.food_trav_vehic, str):
            self.food_trav_vehic = str(self.food_trav_vehic)

        if self.food_treat_proc is not None and not isinstance(self.food_treat_proc, str):
            self.food_treat_proc = str(self.food_treat_proc)

        if self.HACCP_term is not None and not isinstance(self.HACCP_term, str):
            self.HACCP_term = str(self.HACCP_term)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.part_plant_animal is not None and not isinstance(self.part_plant_animal, str):
            self.part_plant_animal = str(self.part_plant_animal)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.repository_name is not None and not isinstance(self.repository_name, str):
            self.repository_name = str(self.repository_name)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.serovar_or_serotype is not None and not isinstance(self.serovar_or_serotype, str):
            self.serovar_or_serotype = str(self.serovar_or_serotype)

        if self.spikein_AMR is not None and not isinstance(self.spikein_AMR, str):
            self.spikein_AMR = str(self.spikein_AMR)

        if self.spikein_antibiotic is not None and not isinstance(self.spikein_antibiotic, str):
            self.spikein_antibiotic = str(self.spikein_antibiotic)

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.spikein_growth_med is not None and not isinstance(self.spikein_growth_med, str):
            self.spikein_growth_med = str(self.spikein_growth_med)

        if self.spikein_metal is not None and not isinstance(self.spikein_metal, str):
            self.spikein_metal = str(self.spikein_metal)

        if self.spikein_org is not None and not isinstance(self.spikein_org, str):
            self.spikein_org = str(self.spikein_org)

        if self.spikein_serovar is not None and not isinstance(self.spikein_serovar, str):
            self.spikein_serovar = str(self.spikein_serovar)

        if self.spikein_strain is not None and not isinstance(self.spikein_strain, str):
            self.spikein_strain = str(self.spikein_strain)

        if self.study_design is not None and not isinstance(self.study_design, str):
            self.study_design = str(self.study_design)

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if self.study_tmnt is not None and not isinstance(self.study_tmnt, str):
            self.study_tmnt = str(self.study_tmnt)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        super().__post_init__(**kwargs)


@dataclass
class FoodFarmEnvironment(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016020"]
    class_class_curie: ClassVar[str] = "MIXS:0016020"
    class_name: ClassVar[str] = "FoodFarmEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS.FoodFarmEnvironment

    biotic_regm: str = None
    chem_administration: str = None
    collection_date: str = None
    env_broad_scale: str = None
    env_local_scale: str = None
    env_medium: str = None
    food_product_type: str = None
    geo_loc_name: str = None
    IFSAC_category: str = None
    lat_lon: str = None
    project_name: str = None
    samp_type: str = None
    seq_meth: str = None
    farm_water_source: Optional[str] = None
    host_disease_stat: Optional[str] = None
    plant_water_method: Optional[str] = None
    adjacent_environment: Optional[str] = None
    air_flow_impede: Optional[str] = None
    air_pm_concen: Optional[str] = None
    ances_data: Optional[str] = None
    anim_water_method: Optional[str] = None
    animal_diet: Optional[str] = None
    animal_feed_equip: Optional[str] = None
    animal_group_size: Optional[int] = None
    animal_housing: Optional[str] = None
    animal_intrusion: Optional[str] = None
    conduc: Optional[str] = None
    crop_rotation: Optional[str] = None
    crop_yield: Optional[str] = None
    cult_isol_date: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[str] = None
    cult_target: Optional[str] = None
    date_extr_weath: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    extr_weather_event: Optional[str] = None
    farm_equip: Optional[str] = None
    farm_equip_san: Optional[str] = None
    farm_equip_san_freq: Optional[str] = None
    farm_equip_shared: Optional[str] = None
    fertilizer_admin: Optional[str] = None
    fertilizer_date: Optional[str] = None
    food_clean_proc: Optional[str] = None
    food_contact_surf: Optional[str] = None
    food_contain_wrap: Optional[str] = None
    food_harvest_proc: Optional[str] = None
    food_pack_medium: Optional[str] = None
    food_preserv_proc: Optional[str] = None
    food_prod_char: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source: Optional[str] = None
    food_trav_mode: Optional[str] = None
    food_trav_vehic: Optional[str] = None
    food_treat_proc: Optional[str] = None
    genetic_mod: Optional[str] = None
    growth_habit: Optional[str] = None
    growth_medium: Optional[str] = None
    host_age: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_length: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_subspecf_genlin: Optional[str] = None
    host_taxid: Optional[int] = None
    host_tot_mass: Optional[str] = None
    humidity: Optional[str] = None
    intended_consumer: Optional[str] = None
    library_prep_kit: Optional[str] = None
    lot_number: Optional[str] = None
    mechanical_damage: Optional[str] = None
    misc_param: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    organism_count: Optional[str] = None
    part_plant_animal: Optional[str] = None
    perturbation: Optional[str] = None
    ph: Optional[float] = None
    ph_meth: Optional[str] = None
    plant_growth_med: Optional[str] = None
    plant_part_maturity: Optional[str] = None
    plant_reprod_crop: Optional[str] = None
    previous_land_use: Optional[str] = None
    rel_location: Optional[str] = None
    repository_name: Optional[str] = None
    root_cond: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    root_med_ph: Optional[float] = None
    salinity: Optional[str] = None
    salinity_meth: Optional[str] = None
    samp_pooling: Optional[str] = None
    samp_purpose: Optional[str] = None
    samp_size: Optional[str] = None
    samp_source_mat_cat: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    season: Optional[str] = None
    season_humidity: Optional[str] = None
    season_precpt: Optional[str] = None
    season_temp: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    soil_conductivity: Optional[str] = None
    soil_cover: Optional[str] = None
    soil_pH: Optional[float] = None
    soil_porosity: Optional[str] = None
    soil_temp: Optional[str] = None
    soil_texture_class: Optional[str] = None
    soil_type: Optional[str] = None
    soil_type_meth: Optional[str] = None
    solar_irradiance: Optional[str] = None
    spikein_antibiotic: Optional[str] = None
    spikein_count: Optional[str] = None
    spikein_growth_med: Optional[str] = None
    spikein_metal: Optional[str] = None
    spikein_org: Optional[str] = None
    spikein_serovar: Optional[str] = None
    spikein_strain: Optional[str] = None
    temp: Optional[str] = None
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    timepoint: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_org_carb: Optional[str] = None
    turbidity: Optional[str] = None
    ventilation_rate: Optional[str] = None
    ventilation_type: Optional[str] = None
    water_frequency: Optional[str] = None
    water_pH: Optional[float] = None
    water_source_adjac: Optional[str] = None
    water_source_shared: Optional[str] = None
    wind_direction: Optional[str] = None
    wind_speed: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.biotic_regm):
            self.MissingRequiredField("biotic_regm")
        if not isinstance(self.biotic_regm, str):
            self.biotic_regm = str(self.biotic_regm)

        if self._is_empty(self.chem_administration):
            self.MissingRequiredField("chem_administration")
        if not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, str):
            self.IFSAC_category = str(self.IFSAC_category)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.farm_water_source is not None and not isinstance(self.farm_water_source, str):
            self.farm_water_source = str(self.farm_water_source)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if self.adjacent_environment is not None and not isinstance(self.adjacent_environment, str):
            self.adjacent_environment = str(self.adjacent_environment)

        if self.air_flow_impede is not None and not isinstance(self.air_flow_impede, str):
            self.air_flow_impede = str(self.air_flow_impede)

        if self.air_pm_concen is not None and not isinstance(self.air_pm_concen, str):
            self.air_pm_concen = str(self.air_pm_concen)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.anim_water_method is not None and not isinstance(self.anim_water_method, str):
            self.anim_water_method = str(self.anim_water_method)

        if self.animal_diet is not None and not isinstance(self.animal_diet, str):
            self.animal_diet = str(self.animal_diet)

        if self.animal_feed_equip is not None and not isinstance(self.animal_feed_equip, str):
            self.animal_feed_equip = str(self.animal_feed_equip)

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, int):
            self.animal_group_size = int(self.animal_group_size)

        if self.animal_housing is not None and not isinstance(self.animal_housing, str):
            self.animal_housing = str(self.animal_housing)

        if self.animal_intrusion is not None and not isinstance(self.animal_intrusion, str):
            self.animal_intrusion = str(self.animal_intrusion)

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if self.cult_result_org is not None and not isinstance(self.cult_result_org, str):
            self.cult_result_org = str(self.cult_result_org)

        if self.cult_target is not None and not isinstance(self.cult_target, str):
            self.cult_target = str(self.cult_target)

        if self.date_extr_weath is not None and not isinstance(self.date_extr_weath, str):
            self.date_extr_weath = str(self.date_extr_weath)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.extr_weather_event is not None and not isinstance(self.extr_weather_event, str):
            self.extr_weather_event = str(self.extr_weather_event)

        if self.farm_equip is not None and not isinstance(self.farm_equip, str):
            self.farm_equip = str(self.farm_equip)

        if self.farm_equip_san is not None and not isinstance(self.farm_equip_san, str):
            self.farm_equip_san = str(self.farm_equip_san)

        if self.farm_equip_san_freq is not None and not isinstance(self.farm_equip_san_freq, str):
            self.farm_equip_san_freq = str(self.farm_equip_san_freq)

        if self.farm_equip_shared is not None and not isinstance(self.farm_equip_shared, str):
            self.farm_equip_shared = str(self.farm_equip_shared)

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.fertilizer_date is not None and not isinstance(self.fertilizer_date, str):
            self.fertilizer_date = str(self.fertilizer_date)

        if self.food_clean_proc is not None and not isinstance(self.food_clean_proc, str):
            self.food_clean_proc = str(self.food_clean_proc)

        if self.food_contact_surf is not None and not isinstance(self.food_contact_surf, str):
            self.food_contact_surf = str(self.food_contact_surf)

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if self.food_harvest_proc is not None and not isinstance(self.food_harvest_proc, str):
            self.food_harvest_proc = str(self.food_harvest_proc)

        if self.food_pack_medium is not None and not isinstance(self.food_pack_medium, str):
            self.food_pack_medium = str(self.food_pack_medium)

        if self.food_preserv_proc is not None and not isinstance(self.food_preserv_proc, str):
            self.food_preserv_proc = str(self.food_preserv_proc)

        if self.food_prod_char is not None and not isinstance(self.food_prod_char, str):
            self.food_prod_char = str(self.food_prod_char)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.food_trav_mode is not None and not isinstance(self.food_trav_mode, str):
            self.food_trav_mode = str(self.food_trav_mode)

        if self.food_trav_vehic is not None and not isinstance(self.food_trav_vehic, str):
            self.food_trav_vehic = str(self.food_trav_vehic)

        if self.food_treat_proc is not None and not isinstance(self.food_treat_proc, str):
            self.food_treat_proc = str(self.food_treat_proc)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.growth_habit is not None and not isinstance(self.growth_habit, str):
            self.growth_habit = str(self.growth_habit)

        if self.growth_medium is not None and not isinstance(self.growth_medium, str):
            self.growth_medium = str(self.growth_medium)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_subspecf_genlin is not None and not isinstance(self.host_subspecf_genlin, str):
            self.host_subspecf_genlin = str(self.host_subspecf_genlin)

        if self.host_taxid is not None and not isinstance(self.host_taxid, int):
            self.host_taxid = int(self.host_taxid)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.intended_consumer is not None and not isinstance(self.intended_consumer, str):
            self.intended_consumer = str(self.intended_consumer)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.mechanical_damage is not None and not isinstance(self.mechanical_damage, str):
            self.mechanical_damage = str(self.mechanical_damage)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.part_plant_animal is not None and not isinstance(self.part_plant_animal, str):
            self.part_plant_animal = str(self.part_plant_animal)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.plant_part_maturity is not None and not isinstance(self.plant_part_maturity, str):
            self.plant_part_maturity = str(self.plant_part_maturity)

        if self.plant_reprod_crop is not None and not isinstance(self.plant_reprod_crop, str):
            self.plant_reprod_crop = str(self.plant_reprod_crop)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.repository_name is not None and not isinstance(self.repository_name, str):
            self.repository_name = str(self.repository_name)

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.salinity_meth is not None and not isinstance(self.salinity_meth, str):
            self.salinity_meth = str(self.salinity_meth)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.season_humidity is not None and not isinstance(self.season_humidity, str):
            self.season_humidity = str(self.season_humidity)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.serovar_or_serotype is not None and not isinstance(self.serovar_or_serotype, str):
            self.serovar_or_serotype = str(self.serovar_or_serotype)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.soil_pH is not None and not isinstance(self.soil_pH, float):
            self.soil_pH = float(self.soil_pH)

        if self.soil_porosity is not None and not isinstance(self.soil_porosity, str):
            self.soil_porosity = str(self.soil_porosity)

        if self.soil_temp is not None and not isinstance(self.soil_temp, str):
            self.soil_temp = str(self.soil_temp)

        if self.soil_texture_class is not None and not isinstance(self.soil_texture_class, str):
            self.soil_texture_class = str(self.soil_texture_class)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.solar_irradiance is not None and not isinstance(self.solar_irradiance, str):
            self.solar_irradiance = str(self.solar_irradiance)

        if self.spikein_antibiotic is not None and not isinstance(self.spikein_antibiotic, str):
            self.spikein_antibiotic = str(self.spikein_antibiotic)

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.spikein_growth_med is not None and not isinstance(self.spikein_growth_med, str):
            self.spikein_growth_med = str(self.spikein_growth_med)

        if self.spikein_metal is not None and not isinstance(self.spikein_metal, str):
            self.spikein_metal = str(self.spikein_metal)

        if self.spikein_org is not None and not isinstance(self.spikein_org, str):
            self.spikein_org = str(self.spikein_org)

        if self.spikein_serovar is not None and not isinstance(self.spikein_serovar, str):
            self.spikein_serovar = str(self.spikein_serovar)

        if self.spikein_strain is not None and not isinstance(self.spikein_strain, str):
            self.spikein_strain = str(self.spikein_strain)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if self.ventilation_type is not None and not isinstance(self.ventilation_type, str):
            self.ventilation_type = str(self.ventilation_type)

        if self.water_frequency is not None and not isinstance(self.water_frequency, str):
            self.water_frequency = str(self.water_frequency)

        if self.water_pH is not None and not isinstance(self.water_pH, float):
            self.water_pH = float(self.water_pH)

        if self.water_source_adjac is not None and not isinstance(self.water_source_adjac, str):
            self.water_source_adjac = str(self.water_source_adjac)

        if self.water_source_shared is not None and not isinstance(self.water_source_shared, str):
            self.water_source_shared = str(self.water_source_shared)

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        super().__post_init__(**kwargs)


@dataclass
class FoodFoodProductionFacility(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016021"]
    class_class_curie: ClassVar[str] = "MIXS:0016021"
    class_name: ClassVar[str] = "FoodFoodProductionFacility"
    class_model_uri: ClassVar[URIRef] = MIXS.FoodFoodProductionFacility

    coll_site_geo_feat: str = None
    collection_date: str = None
    env_broad_scale: str = None
    env_local_scale: str = None
    env_medium: str = None
    food_contact_surf: str = None
    food_product_qual: str = None
    food_product_type: str = None
    geo_loc_name: str = None
    IFSAC_category: str = None
    lat_lon: str = None
    project_name: str = None
    samp_source_mat_cat: str = None
    samp_stor_device: str = None
    samp_stor_media: str = None
    samp_type: str = None
    seq_meth: str = None
    air_temp: Optional[str] = None
    area_samp_size: Optional[str] = None
    avg_occup: Optional[float] = None
    bacterial_density: Optional[str] = None
    biocide_used: Optional[str] = None
    cult_isol_date: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[str] = None
    cult_target: Optional[str] = None
    dietary_claim_use: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    env_monitoring_zone: Optional[str] = None
    experimental_factor: Optional[str] = None
    facility_type: Optional[str] = None
    food_additive: Optional[str] = None
    food_allergen_label: Optional[str] = None
    food_contain_wrap: Optional[str] = None
    food_cooking_proc: Optional[str] = None
    food_dis_point: Optional[str] = None
    food_dis_point_city: Optional[str] = None
    food_ingredient: Optional[str] = None
    food_name_status: Optional[str] = None
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[str] = None
    food_pack_medium: Optional[str] = None
    food_preserv_proc: Optional[str] = None
    food_prior_contact: Optional[str] = None
    food_prod: Optional[str] = None
    food_prod_char: Optional[str] = None
    food_prod_synonym: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source: Optional[str] = None
    food_trace_list: Optional[str] = None
    food_trav_mode: Optional[str] = None
    food_trav_vehic: Optional[str] = None
    food_treat_proc: Optional[str] = None
    freq_clean: Optional[str] = None
    genetic_mod: Optional[str] = None
    HACCP_term: Optional[str] = None
    hygienic_area: Optional[str] = None
    indoor_surf: Optional[str] = None
    intended_consumer: Optional[str] = None
    library_prep_kit: Optional[str] = None
    lot_number: Optional[str] = None
    microb_cult_med: Optional[str] = None
    misc_param: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_ext_kit: Optional[str] = None
    num_samp_collect: Optional[str] = None
    organism_count: Optional[str] = None
    part_plant_animal: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    repository_name: Optional[str] = None
    room_dim: Optional[str] = None
    samp_floor: Optional[str] = None
    samp_loc_condition: Optional[str] = None
    samp_pooling: Optional[str] = None
    samp_purpose: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_room_id: Optional[int] = None
    samp_size: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_surf_moisture: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    spec_intended_cons: Optional[str] = None
    ster_meth_samp_room: Optional[str] = None
    study_design: Optional[str] = None
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[str] = None
    surf_material: Optional[str] = None
    timepoint: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.food_contact_surf):
            self.MissingRequiredField("food_contact_surf")
        if not isinstance(self.food_contact_surf, str):
            self.food_contact_surf = str(self.food_contact_surf)

        if self._is_empty(self.food_product_qual):
            self.MissingRequiredField("food_product_qual")
        if not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, str):
            self.IFSAC_category = str(self.IFSAC_category)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_source_mat_cat):
            self.MissingRequiredField("samp_source_mat_cat")
        if not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self._is_empty(self.samp_stor_device):
            self.MissingRequiredField("samp_stor_device")
        if not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self._is_empty(self.samp_stor_media):
            self.MissingRequiredField("samp_stor_media")
        if not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.air_temp is not None and not isinstance(self.air_temp, str):
            self.air_temp = str(self.air_temp)

        if self.area_samp_size is not None and not isinstance(self.area_samp_size, str):
            self.area_samp_size = str(self.area_samp_size)

        if self.avg_occup is not None and not isinstance(self.avg_occup, float):
            self.avg_occup = float(self.avg_occup)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.biocide_used is not None and not isinstance(self.biocide_used, str):
            self.biocide_used = str(self.biocide_used)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if self.cult_result_org is not None and not isinstance(self.cult_result_org, str):
            self.cult_result_org = str(self.cult_result_org)

        if self.cult_target is not None and not isinstance(self.cult_target, str):
            self.cult_target = str(self.cult_target)

        if self.dietary_claim_use is not None and not isinstance(self.dietary_claim_use, str):
            self.dietary_claim_use = str(self.dietary_claim_use)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.env_monitoring_zone is not None and not isinstance(self.env_monitoring_zone, str):
            self.env_monitoring_zone = str(self.env_monitoring_zone)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.facility_type is not None and not isinstance(self.facility_type, str):
            self.facility_type = str(self.facility_type)

        if self.food_additive is not None and not isinstance(self.food_additive, str):
            self.food_additive = str(self.food_additive)

        if self.food_allergen_label is not None and not isinstance(self.food_allergen_label, str):
            self.food_allergen_label = str(self.food_allergen_label)

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if self.food_cooking_proc is not None and not isinstance(self.food_cooking_proc, str):
            self.food_cooking_proc = str(self.food_cooking_proc)

        if self.food_dis_point is not None and not isinstance(self.food_dis_point, str):
            self.food_dis_point = str(self.food_dis_point)

        if self.food_dis_point_city is not None and not isinstance(self.food_dis_point_city, str):
            self.food_dis_point_city = str(self.food_dis_point_city)

        if self.food_ingredient is not None and not isinstance(self.food_ingredient, str):
            self.food_ingredient = str(self.food_ingredient)

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if self.food_pack_integrity is not None and not isinstance(self.food_pack_integrity, str):
            self.food_pack_integrity = str(self.food_pack_integrity)

        if self.food_pack_medium is not None and not isinstance(self.food_pack_medium, str):
            self.food_pack_medium = str(self.food_pack_medium)

        if self.food_preserv_proc is not None and not isinstance(self.food_preserv_proc, str):
            self.food_preserv_proc = str(self.food_preserv_proc)

        if self.food_prior_contact is not None and not isinstance(self.food_prior_contact, str):
            self.food_prior_contact = str(self.food_prior_contact)

        if self.food_prod is not None and not isinstance(self.food_prod, str):
            self.food_prod = str(self.food_prod)

        if self.food_prod_char is not None and not isinstance(self.food_prod_char, str):
            self.food_prod_char = str(self.food_prod_char)

        if self.food_prod_synonym is not None and not isinstance(self.food_prod_synonym, str):
            self.food_prod_synonym = str(self.food_prod_synonym)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if self.food_trav_mode is not None and not isinstance(self.food_trav_mode, str):
            self.food_trav_mode = str(self.food_trav_mode)

        if self.food_trav_vehic is not None and not isinstance(self.food_trav_vehic, str):
            self.food_trav_vehic = str(self.food_trav_vehic)

        if self.food_treat_proc is not None and not isinstance(self.food_treat_proc, str):
            self.food_treat_proc = str(self.food_treat_proc)

        if self.freq_clean is not None and not isinstance(self.freq_clean, str):
            self.freq_clean = str(self.freq_clean)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.HACCP_term is not None and not isinstance(self.HACCP_term, str):
            self.HACCP_term = str(self.HACCP_term)

        if self.hygienic_area is not None and not isinstance(self.hygienic_area, str):
            self.hygienic_area = str(self.hygienic_area)

        if self.indoor_surf is not None and not isinstance(self.indoor_surf, str):
            self.indoor_surf = str(self.indoor_surf)

        if self.intended_consumer is not None and not isinstance(self.intended_consumer, str):
            self.intended_consumer = str(self.intended_consumer)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_ext_kit is not None and not isinstance(self.nucl_acid_ext_kit, str):
            self.nucl_acid_ext_kit = str(self.nucl_acid_ext_kit)

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.part_plant_animal is not None and not isinstance(self.part_plant_animal, str):
            self.part_plant_animal = str(self.part_plant_animal)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.repository_name is not None and not isinstance(self.repository_name, str):
            self.repository_name = str(self.repository_name)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.samp_loc_condition is not None and not isinstance(self.samp_loc_condition, str):
            self.samp_loc_condition = str(self.samp_loc_condition)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, int):
            self.samp_room_id = int(self.samp_room_id)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_surf_moisture is not None and not isinstance(self.samp_surf_moisture, str):
            self.samp_surf_moisture = str(self.samp_surf_moisture)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.spec_intended_cons is not None and not isinstance(self.spec_intended_cons, str):
            self.spec_intended_cons = str(self.spec_intended_cons)

        if self.ster_meth_samp_room is not None and not isinstance(self.ster_meth_samp_room, str):
            self.ster_meth_samp_room = str(self.ster_meth_samp_room)

        if self.study_design is not None and not isinstance(self.study_design, str):
            self.study_design = str(self.study_design)

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if self.study_tmnt is not None and not isinstance(self.study_tmnt, str):
            self.study_tmnt = str(self.study_tmnt)

        if self.surf_material is not None and not isinstance(self.surf_material, str):
            self.surf_material = str(self.surf_material)

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        super().__post_init__(**kwargs)


@dataclass
class FoodHumanFoods(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016022"]
    class_class_curie: ClassVar[str] = "MIXS:0016022"
    class_name: ClassVar[str] = "FoodHumanFoods"
    class_model_uri: ClassVar[URIRef] = MIXS.FoodHumanFoods

    coll_site_geo_feat: str = None
    collection_date: str = None
    env_broad_scale: str = None
    env_local_scale: str = None
    env_medium: str = None
    food_product_type: str = None
    geo_loc_name: str = None
    IFSAC_category: str = None
    lat_lon: str = None
    project_name: str = None
    seq_meth: str = None
    ferm_chem_add: Optional[str] = None
    ferm_chem_add_perc: Optional[str] = None
    ferm_headspace_oxy: Optional[str] = None
    ferm_medium: Optional[str] = None
    ferm_pH: Optional[float] = None
    ferm_rel_humidity: Optional[str] = None
    ferm_temp: Optional[str] = None
    ferm_time: Optional[str] = None
    ferm_vessel: Optional[str] = None
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[str] = None
    cons_qty_purchased: Optional[str] = None
    cult_isol_date: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[str] = None
    cult_target: Optional[str] = None
    dietary_claim_use: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    experimental_factor: Optional[str] = None
    food_additive: Optional[str] = None
    food_allergen_label: Optional[str] = None
    food_contact_surf: Optional[str] = None
    food_contain_wrap: Optional[str] = None
    food_cooking_proc: Optional[str] = None
    food_dis_point: Optional[str] = None
    food_ingredient: Optional[str] = None
    food_name_status: Optional[str] = None
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[str] = None
    food_pack_medium: Optional[str] = None
    food_preserv_proc: Optional[str] = None
    food_prior_contact: Optional[str] = None
    food_prod: Optional[str] = None
    food_prod_synonym: Optional[str] = None
    food_product_qual: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source: Optional[str] = None
    food_trace_list: Optional[str] = None
    food_trav_mode: Optional[str] = None
    food_trav_vehic: Optional[str] = None
    food_treat_proc: Optional[str] = None
    genetic_mod: Optional[str] = None
    HACCP_term: Optional[str] = None
    intended_consumer: Optional[str] = None
    library_prep_kit: Optional[str] = None
    lot_number: Optional[str] = None
    microb_cult_med: Optional[str] = None
    microb_start: Optional[str] = None
    microb_start_count: Optional[str] = None
    microb_start_inoc: Optional[str] = None
    microb_start_prep: Optional[str] = None
    microb_start_source: Optional[str] = None
    microb_start_taxID: Optional[str] = None
    misc_param: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_ext_kit: Optional[str] = None
    num_samp_collect: Optional[str] = None
    organism_count: Optional[str] = None
    part_plant_animal: Optional[str] = None
    perturbation: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    repository_name: Optional[str] = None
    samp_pooling: Optional[str] = None
    samp_purpose: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_size: Optional[str] = None
    samp_source_mat_cat: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[str] = None
    spikein_AMR: Optional[str] = None
    spikein_antibiotic: Optional[str] = None
    spikein_count: Optional[str] = None
    spikein_growth_med: Optional[str] = None
    spikein_metal: Optional[str] = None
    spikein_org: Optional[str] = None
    spikein_serovar: Optional[str] = None
    spikein_strain: Optional[str] = None
    study_design: Optional[str] = None
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[str] = None
    temp: Optional[str] = None
    timepoint: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, str):
            self.IFSAC_category = str(self.IFSAC_category)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.ferm_chem_add is not None and not isinstance(self.ferm_chem_add, str):
            self.ferm_chem_add = str(self.ferm_chem_add)

        if self.ferm_chem_add_perc is not None and not isinstance(self.ferm_chem_add_perc, str):
            self.ferm_chem_add_perc = str(self.ferm_chem_add_perc)

        if self.ferm_headspace_oxy is not None and not isinstance(self.ferm_headspace_oxy, str):
            self.ferm_headspace_oxy = str(self.ferm_headspace_oxy)

        if self.ferm_medium is not None and not isinstance(self.ferm_medium, str):
            self.ferm_medium = str(self.ferm_medium)

        if self.ferm_pH is not None and not isinstance(self.ferm_pH, float):
            self.ferm_pH = float(self.ferm_pH)

        if self.ferm_rel_humidity is not None and not isinstance(self.ferm_rel_humidity, str):
            self.ferm_rel_humidity = str(self.ferm_rel_humidity)

        if self.ferm_temp is not None and not isinstance(self.ferm_temp, str):
            self.ferm_temp = str(self.ferm_temp)

        if self.ferm_time is not None and not isinstance(self.ferm_time, str):
            self.ferm_time = str(self.ferm_time)

        if self.ferm_vessel is not None and not isinstance(self.ferm_vessel, str):
            self.ferm_vessel = str(self.ferm_vessel)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, str):
            self.cons_purch_date = str(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if self.cult_result_org is not None and not isinstance(self.cult_result_org, str):
            self.cult_result_org = str(self.cult_result_org)

        if self.cult_target is not None and not isinstance(self.cult_target, str):
            self.cult_target = str(self.cult_target)

        if self.dietary_claim_use is not None and not isinstance(self.dietary_claim_use, str):
            self.dietary_claim_use = str(self.dietary_claim_use)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.food_additive is not None and not isinstance(self.food_additive, str):
            self.food_additive = str(self.food_additive)

        if self.food_allergen_label is not None and not isinstance(self.food_allergen_label, str):
            self.food_allergen_label = str(self.food_allergen_label)

        if self.food_contact_surf is not None and not isinstance(self.food_contact_surf, str):
            self.food_contact_surf = str(self.food_contact_surf)

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if self.food_cooking_proc is not None and not isinstance(self.food_cooking_proc, str):
            self.food_cooking_proc = str(self.food_cooking_proc)

        if self.food_dis_point is not None and not isinstance(self.food_dis_point, str):
            self.food_dis_point = str(self.food_dis_point)

        if self.food_ingredient is not None and not isinstance(self.food_ingredient, str):
            self.food_ingredient = str(self.food_ingredient)

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if self.food_pack_integrity is not None and not isinstance(self.food_pack_integrity, str):
            self.food_pack_integrity = str(self.food_pack_integrity)

        if self.food_pack_medium is not None and not isinstance(self.food_pack_medium, str):
            self.food_pack_medium = str(self.food_pack_medium)

        if self.food_preserv_proc is not None and not isinstance(self.food_preserv_proc, str):
            self.food_preserv_proc = str(self.food_preserv_proc)

        if self.food_prior_contact is not None and not isinstance(self.food_prior_contact, str):
            self.food_prior_contact = str(self.food_prior_contact)

        if self.food_prod is not None and not isinstance(self.food_prod, str):
            self.food_prod = str(self.food_prod)

        if self.food_prod_synonym is not None and not isinstance(self.food_prod_synonym, str):
            self.food_prod_synonym = str(self.food_prod_synonym)

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if self.food_trav_mode is not None and not isinstance(self.food_trav_mode, str):
            self.food_trav_mode = str(self.food_trav_mode)

        if self.food_trav_vehic is not None and not isinstance(self.food_trav_vehic, str):
            self.food_trav_vehic = str(self.food_trav_vehic)

        if self.food_treat_proc is not None and not isinstance(self.food_treat_proc, str):
            self.food_treat_proc = str(self.food_treat_proc)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.HACCP_term is not None and not isinstance(self.HACCP_term, str):
            self.HACCP_term = str(self.HACCP_term)

        if self.intended_consumer is not None and not isinstance(self.intended_consumer, str):
            self.intended_consumer = str(self.intended_consumer)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.microb_start is not None and not isinstance(self.microb_start, str):
            self.microb_start = str(self.microb_start)

        if self.microb_start_count is not None and not isinstance(self.microb_start_count, str):
            self.microb_start_count = str(self.microb_start_count)

        if self.microb_start_inoc is not None and not isinstance(self.microb_start_inoc, str):
            self.microb_start_inoc = str(self.microb_start_inoc)

        if self.microb_start_prep is not None and not isinstance(self.microb_start_prep, str):
            self.microb_start_prep = str(self.microb_start_prep)

        if self.microb_start_source is not None and not isinstance(self.microb_start_source, str):
            self.microb_start_source = str(self.microb_start_source)

        if self.microb_start_taxID is not None and not isinstance(self.microb_start_taxID, str):
            self.microb_start_taxID = str(self.microb_start_taxID)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_ext_kit is not None and not isinstance(self.nucl_acid_ext_kit, str):
            self.nucl_acid_ext_kit = str(self.nucl_acid_ext_kit)

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.part_plant_animal is not None and not isinstance(self.part_plant_animal, str):
            self.part_plant_animal = str(self.part_plant_animal)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.repository_name is not None and not isinstance(self.repository_name, str):
            self.repository_name = str(self.repository_name)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.serovar_or_serotype is not None and not isinstance(self.serovar_or_serotype, str):
            self.serovar_or_serotype = str(self.serovar_or_serotype)

        if self.spikein_AMR is not None and not isinstance(self.spikein_AMR, str):
            self.spikein_AMR = str(self.spikein_AMR)

        if self.spikein_antibiotic is not None and not isinstance(self.spikein_antibiotic, str):
            self.spikein_antibiotic = str(self.spikein_antibiotic)

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.spikein_growth_med is not None and not isinstance(self.spikein_growth_med, str):
            self.spikein_growth_med = str(self.spikein_growth_med)

        if self.spikein_metal is not None and not isinstance(self.spikein_metal, str):
            self.spikein_metal = str(self.spikein_metal)

        if self.spikein_org is not None and not isinstance(self.spikein_org, str):
            self.spikein_org = str(self.spikein_org)

        if self.spikein_serovar is not None and not isinstance(self.spikein_serovar, str):
            self.spikein_serovar = str(self.spikein_serovar)

        if self.spikein_strain is not None and not isinstance(self.spikein_strain, str):
            self.spikein_strain = str(self.spikein_strain)

        if self.study_design is not None and not isinstance(self.study_design, str):
            self.study_design = str(self.study_design)

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if self.study_tmnt is not None and not isinstance(self.study_tmnt, str):
            self.study_tmnt = str(self.study_tmnt)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        super().__post_init__(**kwargs)


@dataclass
class HostAssociated(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016002"]
    class_class_curie: ClassVar[str] = "MIXS:0016002"
    class_name: ClassVar[str] = "HostAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.HostAssociated

    project_name: str = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    ances_data: Optional[str] = None
    biol_stat: Optional[str] = None
    blood_press_diast: Optional[str] = None
    blood_press_syst: Optional[str] = None
    chem_administration: Optional[str] = None
    genetic_mod: Optional[str] = None
    gravidity: Optional[str] = None
    host_age: Optional[str] = None
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_color: Optional[str] = None
    host_common_name: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_genotype: Optional[str] = None
    host_growth_cond: Optional[str] = None
    host_height: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_length: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_shape: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_subspecf_genlin: Optional[str] = None
    host_substrate: Optional[str] = None
    host_taxid: Optional[int] = None
    host_tot_mass: Optional[str] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    salinity: Optional[str] = None
    samp_capt_status: Optional[str] = None
    samp_dis_stage: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if self.blood_press_diast is not None and not isinstance(self.blood_press_diast, str):
            self.blood_press_diast = str(self.blood_press_diast)

        if self.blood_press_syst is not None and not isinstance(self.blood_press_syst, str):
            self.blood_press_syst = str(self.blood_press_syst)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_subspecf_genlin is not None and not isinstance(self.host_subspecf_genlin, str):
            self.host_subspecf_genlin = str(self.host_subspecf_genlin)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if self.host_taxid is not None and not isinstance(self.host_taxid, int):
            self.host_taxid = int(self.host_taxid)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, str):
            self.samp_capt_status = str(self.samp_capt_status)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, str):
            self.samp_dis_stage = str(self.samp_dis_stage)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class HumanAssociated(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016003"]
    class_class_curie: ClassVar[str] = "MIXS:0016003"
    class_name: ClassVar[str] = "HumanAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.HumanAssociated

    project_name: str = None
    amniotic_fluid_color: Optional[str] = None
    blood_blood_disord: Optional[str] = None
    chem_administration: Optional[str] = None
    diet_last_six_month: Optional[str] = None
    drug_usage: Optional[str] = None
    ethnicity: Optional[str] = None
    foetal_health_stat: Optional[str] = None
    gestation_state: Optional[str] = None
    host_age: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_hiv_stat: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_occupation: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_pulse: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_tot_mass: Optional[str] = None
    ihmc_medication_code: Optional[int] = None
    kidney_disord: Optional[str] = None
    maternal_health_stat: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    pet_farm_animal: Optional[str] = None
    pulmonary_disord: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    smoker: Optional[Union[bool, Bool]] = None
    study_complt_stat: Optional[str] = None
    temp: Optional[str] = None
    travel_out_six_month: Optional[str] = None
    twin_sibling: Optional[Union[bool, Bool]] = None
    urine_collect_meth: Optional[str] = None
    urogenit_tract_disor: Optional[str] = None
    weight_loss_3_month: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.amniotic_fluid_color is not None and not isinstance(self.amniotic_fluid_color, str):
            self.amniotic_fluid_color = str(self.amniotic_fluid_color)

        if self.blood_blood_disord is not None and not isinstance(self.blood_blood_disord, str):
            self.blood_blood_disord = str(self.blood_blood_disord)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.diet_last_six_month is not None and not isinstance(self.diet_last_six_month, str):
            self.diet_last_six_month = str(self.diet_last_six_month)

        if self.drug_usage is not None and not isinstance(self.drug_usage, str):
            self.drug_usage = str(self.drug_usage)

        if self.ethnicity is not None and not isinstance(self.ethnicity, str):
            self.ethnicity = str(self.ethnicity)

        if self.foetal_health_stat is not None and not isinstance(self.foetal_health_stat, str):
            self.foetal_health_stat = str(self.foetal_health_stat)

        if self.gestation_state is not None and not isinstance(self.gestation_state, str):
            self.gestation_state = str(self.gestation_state)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_hiv_stat is not None and not isinstance(self.host_hiv_stat, str):
            self.host_hiv_stat = str(self.host_hiv_stat)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.ihmc_medication_code is not None and not isinstance(self.ihmc_medication_code, int):
            self.ihmc_medication_code = int(self.ihmc_medication_code)

        if self.kidney_disord is not None and not isinstance(self.kidney_disord, str):
            self.kidney_disord = str(self.kidney_disord)

        if self.maternal_health_stat is not None and not isinstance(self.maternal_health_stat, str):
            self.maternal_health_stat = str(self.maternal_health_stat)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pet_farm_animal is not None and not isinstance(self.pet_farm_animal, str):
            self.pet_farm_animal = str(self.pet_farm_animal)

        if self.pulmonary_disord is not None and not isinstance(self.pulmonary_disord, str):
            self.pulmonary_disord = str(self.pulmonary_disord)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.smoker is not None and not isinstance(self.smoker, Bool):
            self.smoker = Bool(self.smoker)

        if self.study_complt_stat is not None and not isinstance(self.study_complt_stat, str):
            self.study_complt_stat = str(self.study_complt_stat)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.travel_out_six_month is not None and not isinstance(self.travel_out_six_month, str):
            self.travel_out_six_month = str(self.travel_out_six_month)

        if self.twin_sibling is not None and not isinstance(self.twin_sibling, Bool):
            self.twin_sibling = Bool(self.twin_sibling)

        if self.urine_collect_meth is not None and not isinstance(self.urine_collect_meth, str):
            self.urine_collect_meth = str(self.urine_collect_meth)

        if self.urogenit_tract_disor is not None and not isinstance(self.urogenit_tract_disor, str):
            self.urogenit_tract_disor = str(self.urogenit_tract_disor)

        if self.weight_loss_3_month is not None and not isinstance(self.weight_loss_3_month, str):
            self.weight_loss_3_month = str(self.weight_loss_3_month)

        super().__post_init__(**kwargs)


@dataclass
class HumanGut(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016004"]
    class_class_curie: ClassVar[str] = "MIXS:0016004"
    class_name: ClassVar[str] = "HumanGut"
    class_model_uri: ClassVar[URIRef] = MIXS.HumanGut

    project_name: str = None
    chem_administration: Optional[str] = None
    ethnicity: Optional[str] = None
    gastrointest_disord: Optional[str] = None
    host_age: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_occupation: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_pulse: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_tot_mass: Optional[str] = None
    ihmc_medication_code: Optional[int] = None
    liver_disord: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    special_diet: Optional[str] = None
    temp: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.ethnicity is not None and not isinstance(self.ethnicity, str):
            self.ethnicity = str(self.ethnicity)

        if self.gastrointest_disord is not None and not isinstance(self.gastrointest_disord, str):
            self.gastrointest_disord = str(self.gastrointest_disord)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.ihmc_medication_code is not None and not isinstance(self.ihmc_medication_code, int):
            self.ihmc_medication_code = int(self.ihmc_medication_code)

        if self.liver_disord is not None and not isinstance(self.liver_disord, str):
            self.liver_disord = str(self.liver_disord)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.special_diet is not None and not isinstance(self.special_diet, str):
            self.special_diet = str(self.special_diet)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class HumanOral(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016005"]
    class_class_curie: ClassVar[str] = "MIXS:0016005"
    class_name: ClassVar[str] = "HumanOral"
    class_model_uri: ClassVar[URIRef] = MIXS.HumanOral

    project_name: str = None
    chem_administration: Optional[str] = None
    ethnicity: Optional[str] = None
    host_age: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_occupation: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_pulse: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_tot_mass: Optional[str] = None
    ihmc_medication_code: Optional[int] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    time_last_toothbrush: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.ethnicity is not None and not isinstance(self.ethnicity, str):
            self.ethnicity = str(self.ethnicity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.ihmc_medication_code is not None and not isinstance(self.ihmc_medication_code, int):
            self.ihmc_medication_code = int(self.ihmc_medication_code)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.time_last_toothbrush is not None and not isinstance(self.time_last_toothbrush, str):
            self.time_last_toothbrush = str(self.time_last_toothbrush)

        super().__post_init__(**kwargs)


@dataclass
class HumanSkin(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016006"]
    class_class_curie: ClassVar[str] = "MIXS:0016006"
    class_name: ClassVar[str] = "HumanSkin"
    class_model_uri: ClassVar[URIRef] = MIXS.HumanSkin

    project_name: str = None
    chem_administration: Optional[str] = None
    dermatology_disord: Optional[str] = None
    dominant_hand: Optional[str] = None
    ethnicity: Optional[str] = None
    host_age: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_occupation: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_pulse: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_tot_mass: Optional[str] = None
    ihmc_medication_code: Optional[int] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    time_since_last_wash: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.dermatology_disord is not None and not isinstance(self.dermatology_disord, str):
            self.dermatology_disord = str(self.dermatology_disord)

        if self.dominant_hand is not None and not isinstance(self.dominant_hand, str):
            self.dominant_hand = str(self.dominant_hand)

        if self.ethnicity is not None and not isinstance(self.ethnicity, str):
            self.ethnicity = str(self.ethnicity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.ihmc_medication_code is not None and not isinstance(self.ihmc_medication_code, int):
            self.ihmc_medication_code = int(self.ihmc_medication_code)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.time_since_last_wash is not None and not isinstance(self.time_since_last_wash, str):
            self.time_since_last_wash = str(self.time_since_last_wash)

        super().__post_init__(**kwargs)


@dataclass
class HumanVaginal(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016007"]
    class_class_curie: ClassVar[str] = "MIXS:0016007"
    class_name: ClassVar[str] = "HumanVaginal"
    class_model_uri: ClassVar[URIRef] = MIXS.HumanVaginal

    project_name: str = None
    birth_control: Optional[str] = None
    chem_administration: Optional[str] = None
    douche: Optional[str] = None
    ethnicity: Optional[str] = None
    gynecologic_disord: Optional[str] = None
    host_age: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_diet: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_last_meal: Optional[str] = None
    host_occupation: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_pulse: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_tot_mass: Optional[str] = None
    hrt: Optional[str] = None
    hysterectomy: Optional[Union[bool, Bool]] = None
    ihmc_medication_code: Optional[int] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    menarche: Optional[str] = None
    menopause: Optional[str] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    pregnancy: Optional[str] = None
    salinity: Optional[str] = None
    samp_salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sexual_act: Optional[str] = None
    temp: Optional[str] = None
    urogenit_disord: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.birth_control is not None and not isinstance(self.birth_control, str):
            self.birth_control = str(self.birth_control)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.douche is not None and not isinstance(self.douche, str):
            self.douche = str(self.douche)

        if self.ethnicity is not None and not isinstance(self.ethnicity, str):
            self.ethnicity = str(self.ethnicity)

        if self.gynecologic_disord is not None and not isinstance(self.gynecologic_disord, str):
            self.gynecologic_disord = str(self.gynecologic_disord)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_diet is not None and not isinstance(self.host_diet, str):
            self.host_diet = str(self.host_diet)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_last_meal is not None and not isinstance(self.host_last_meal, str):
            self.host_last_meal = str(self.host_last_meal)

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.hrt is not None and not isinstance(self.hrt, str):
            self.hrt = str(self.hrt)

        if self.hysterectomy is not None and not isinstance(self.hysterectomy, Bool):
            self.hysterectomy = Bool(self.hysterectomy)

        if self.ihmc_medication_code is not None and not isinstance(self.ihmc_medication_code, int):
            self.ihmc_medication_code = int(self.ihmc_medication_code)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.menarche is not None and not isinstance(self.menarche, str):
            self.menarche = str(self.menarche)

        if self.menopause is not None and not isinstance(self.menopause, str):
            self.menopause = str(self.menopause)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pregnancy is not None and not isinstance(self.pregnancy, str):
            self.pregnancy = str(self.pregnancy)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_salinity is not None and not isinstance(self.samp_salinity, str):
            self.samp_salinity = str(self.samp_salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sexual_act is not None and not isinstance(self.sexual_act, str):
            self.sexual_act = str(self.sexual_act)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.urogenit_disord is not None and not isinstance(self.urogenit_disord, str):
            self.urogenit_disord = str(self.urogenit_disord)

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesCores(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016015"]
    class_class_curie: ClassVar[str] = "MIXS:0016015"
    class_name: ClassVar[str] = "HydrocarbonResourcesCores"
    class_model_uri: ClassVar[URIRef] = MIXS.HydrocarbonResourcesCores

    api: str = None
    basin: str = None
    hc_produced: str = None
    hcr: str = None
    hcr_temp: str = None
    project_name: str = None
    samp_type: str = None
    sulfate_fw: str = None
    temp: str = None
    vfa_fw: str = None
    ammonium: Optional[str] = None
    aromatics_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    benzene: Optional[str] = None
    depos_env: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    diss_iron: Optional[str] = None
    ethylbenzene: Optional[str] = None
    field: Optional[str] = None
    hcr_fw_salinity: Optional[str] = None
    hcr_geol_age: Optional[str] = None
    lithology: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    organism_count: Optional[str] = None
    ph: Optional[float] = None
    reservoir: Optional[str] = None
    resins_pc: Optional[str] = None
    samp_subtype: Optional[str] = None
    samp_tvdss: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    samp_well_name: Optional[str] = None
    saturates_pc: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    tan: Optional[str] = None
    toluene: Optional[str] = None
    tot_iron: Optional[str] = None
    tot_sulfur: Optional[str] = None
    vfa: Optional[str] = None
    win: Optional[str] = None
    xylene: Optional[str] = None
    additional_info: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    calcium: Optional[str] = None
    chloride: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    elev: Optional[str] = None
    hcr_pressure: Optional[str] = None
    magnesium: Optional[str] = None
    misc_param: Optional[str] = None
    org_count_qpcr_info: Optional[str] = None
    owc_tvdss: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    permeability: Optional[str] = None
    porosity: Optional[str] = None
    potassium: Optional[str] = None
    pour_point: Optional[str] = None
    pressure: Optional[str] = None
    salinity: Optional[str] = None
    samp_md: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_transport_cond: Optional[str] = None
    sodium: Optional[str] = None
    sr_dep_env: Optional[str] = None
    sr_geol_age: Optional[str] = None
    sr_kerog_type: Optional[str] = None
    sr_lithology: Optional[str] = None
    suspend_solids: Optional[str] = None
    tot_phosp: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    viscosity: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.api):
            self.MissingRequiredField("api")
        if not isinstance(self.api, str):
            self.api = str(self.api)

        if self._is_empty(self.basin):
            self.MissingRequiredField("basin")
        if not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self._is_empty(self.hc_produced):
            self.MissingRequiredField("hc_produced")
        if not isinstance(self.hc_produced, str):
            self.hc_produced = str(self.hc_produced)

        if self._is_empty(self.hcr):
            self.MissingRequiredField("hcr")
        if not isinstance(self.hcr, str):
            self.hcr = str(self.hcr)

        if self._is_empty(self.hcr_temp):
            self.MissingRequiredField("hcr_temp")
        if not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.sulfate_fw):
            self.MissingRequiredField("sulfate_fw")
        if not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self._is_empty(self.vfa_fw):
            self.MissingRequiredField("vfa_fw")
        if not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.depos_env is not None and not isinstance(self.depos_env, str):
            self.depos_env = str(self.depos_env)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, str):
            self.hcr_geol_age = str(self.hcr_geol_age)

        if self.lithology is not None and not isinstance(self.lithology, str):
            self.lithology = str(self.lithology)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, str):
            self.samp_subtype = str(self.samp_subtype)

        if self.samp_tvdss is not None and not isinstance(self.samp_tvdss, str):
            self.samp_tvdss = str(self.samp_tvdss)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.owc_tvdss is not None and not isinstance(self.owc_tvdss, str):
            self.owc_tvdss = str(self.owc_tvdss)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.permeability is not None and not isinstance(self.permeability, str):
            self.permeability = str(self.permeability)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_md is not None and not isinstance(self.samp_md, str):
            self.samp_md = str(self.samp_md)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sr_dep_env is not None and not isinstance(self.sr_dep_env, str):
            self.sr_dep_env = str(self.sr_dep_env)

        if self.sr_geol_age is not None and not isinstance(self.sr_geol_age, str):
            self.sr_geol_age = str(self.sr_geol_age)

        if self.sr_kerog_type is not None and not isinstance(self.sr_kerog_type, str):
            self.sr_kerog_type = str(self.sr_kerog_type)

        if self.sr_lithology is not None and not isinstance(self.sr_lithology, str):
            self.sr_lithology = str(self.sr_lithology)

        if self.suspend_solids is not None and not isinstance(self.suspend_solids, str):
            self.suspend_solids = str(self.suspend_solids)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesFluidsSwabs(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016016"]
    class_class_curie: ClassVar[str] = "MIXS:0016016"
    class_name: ClassVar[str] = "HydrocarbonResourcesFluidsSwabs"
    class_model_uri: ClassVar[URIRef] = MIXS.HydrocarbonResourcesFluidsSwabs

    add_recov_method: str = None
    api: str = None
    basin: str = None
    hc_produced: str = None
    hcr: str = None
    iwf: str = None
    nitrate: str = None
    project_name: str = None
    samp_collect_point: str = None
    samp_type: str = None
    sulfate: str = None
    sulfide: str = None
    temp: str = None
    water_cut: str = None
    ammonium: Optional[str] = None
    aromatics_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    benzene: Optional[str] = None
    biocide: Optional[str] = None
    biocide_admin_method: Optional[str] = None
    depos_env: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    diss_iron: Optional[str] = None
    ethylbenzene: Optional[str] = None
    field: Optional[str] = None
    hcr_fw_salinity: Optional[str] = None
    hcr_geol_age: Optional[str] = None
    hcr_temp: Optional[str] = None
    lithology: Optional[str] = None
    nitrite: Optional[str] = None
    organism_count: Optional[str] = None
    ph: Optional[float] = None
    prod_rate: Optional[str] = None
    prod_start_date: Optional[str] = None
    reservoir: Optional[str] = None
    resins_pc: Optional[str] = None
    samp_loc_corr_rate: Optional[str] = None
    samp_subtype: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    samp_well_name: Optional[str] = None
    saturates_pc: Optional[str] = None
    sulfate_fw: Optional[str] = None
    tan: Optional[str] = None
    toluene: Optional[str] = None
    tot_iron: Optional[str] = None
    tot_sulfur: Optional[str] = None
    vfa: Optional[str] = None
    vfa_fw: Optional[str] = None
    water_prod_rate: Optional[str] = None
    win: Optional[str] = None
    xylene: Optional[str] = None
    additional_info: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    calcium: Optional[str] = None
    chem_treat_method: Optional[str] = None
    chem_treatment: Optional[str] = None
    chloride: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    hcr_pressure: Optional[str] = None
    iw_bt_date_well: Optional[str] = None
    magnesium: Optional[str] = None
    misc_param: Optional[str] = None
    org_count_qpcr_info: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    potassium: Optional[str] = None
    pour_point: Optional[str] = None
    pressure: Optional[str] = None
    salinity: Optional[str] = None
    samp_preserv: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_transport_cond: Optional[str] = None
    sodium: Optional[str] = None
    suspend_solids: Optional[str] = None
    tot_phosp: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    viscosity: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.add_recov_method):
            self.MissingRequiredField("add_recov_method")
        if not isinstance(self.add_recov_method, str):
            self.add_recov_method = str(self.add_recov_method)

        if self._is_empty(self.api):
            self.MissingRequiredField("api")
        if not isinstance(self.api, str):
            self.api = str(self.api)

        if self._is_empty(self.basin):
            self.MissingRequiredField("basin")
        if not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self._is_empty(self.hc_produced):
            self.MissingRequiredField("hc_produced")
        if not isinstance(self.hc_produced, str):
            self.hc_produced = str(self.hc_produced)

        if self._is_empty(self.hcr):
            self.MissingRequiredField("hcr")
        if not isinstance(self.hcr, str):
            self.hcr = str(self.hcr)

        if self._is_empty(self.iwf):
            self.MissingRequiredField("iwf")
        if not isinstance(self.iwf, str):
            self.iwf = str(self.iwf)

        if self._is_empty(self.nitrate):
            self.MissingRequiredField("nitrate")
        if not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_collect_point):
            self.MissingRequiredField("samp_collect_point")
        if not isinstance(self.samp_collect_point, str):
            self.samp_collect_point = str(self.samp_collect_point)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.sulfate):
            self.MissingRequiredField("sulfate")
        if not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self._is_empty(self.sulfide):
            self.MissingRequiredField("sulfide")
        if not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self._is_empty(self.water_cut):
            self.MissingRequiredField("water_cut")
        if not isinstance(self.water_cut, str):
            self.water_cut = str(self.water_cut)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.biocide is not None and not isinstance(self.biocide, str):
            self.biocide = str(self.biocide)

        if self.biocide_admin_method is not None and not isinstance(self.biocide_admin_method, str):
            self.biocide_admin_method = str(self.biocide_admin_method)

        if self.depos_env is not None and not isinstance(self.depos_env, str):
            self.depos_env = str(self.depos_env)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, str):
            self.hcr_geol_age = str(self.hcr_geol_age)

        if self.hcr_temp is not None and not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self.lithology is not None and not isinstance(self.lithology, str):
            self.lithology = str(self.lithology)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.prod_rate is not None and not isinstance(self.prod_rate, str):
            self.prod_rate = str(self.prod_rate)

        if self.prod_start_date is not None and not isinstance(self.prod_start_date, str):
            self.prod_start_date = str(self.prod_start_date)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.samp_loc_corr_rate is not None and not isinstance(self.samp_loc_corr_rate, str):
            self.samp_loc_corr_rate = str(self.samp_loc_corr_rate)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, str):
            self.samp_subtype = str(self.samp_subtype)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.sulfate_fw is not None and not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.vfa_fw is not None and not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self.water_prod_rate is not None and not isinstance(self.water_prod_rate, str):
            self.water_prod_rate = str(self.water_prod_rate)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.chem_treat_method is not None and not isinstance(self.chem_treat_method, str):
            self.chem_treat_method = str(self.chem_treat_method)

        if self.chem_treatment is not None and not isinstance(self.chem_treatment, str):
            self.chem_treatment = str(self.chem_treatment)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.iw_bt_date_well is not None and not isinstance(self.iw_bt_date_well, str):
            self.iw_bt_date_well = str(self.iw_bt_date_well)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_preserv is not None and not isinstance(self.samp_preserv, str):
            self.samp_preserv = str(self.samp_preserv)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.suspend_solids is not None and not isinstance(self.suspend_solids, str):
            self.suspend_solids = str(self.suspend_solids)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        super().__post_init__(**kwargs)


@dataclass
class MicrobialMatBiofilm(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016008"]
    class_class_curie: ClassVar[str] = "MIXS:0016008"
    class_name: ClassVar[str] = "MicrobialMatBiofilm"
    class_model_uri: ClassVar[URIRef] = MIXS.MicrobialMatBiofilm

    project_name: str = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[str] = None
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[str] = None
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    methane: Optional[str] = None
    misc_param: Optional[str] = None
    n_alkanes: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    part_org_carb: Optional[str] = None
    perturbation: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    ph: Optional[float] = None
    phaeopigments: Optional[str] = None
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    tot_carb: Optional[str] = None
    tot_org_carb: Optional[str] = None
    turbidity: Optional[str] = None
    water_content: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if self.biomass is not None and not isinstance(self.biomass, str):
            self.biomass = str(self.biomass)

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.diether_lipids is not None and not isinstance(self.diether_lipids, str):
            self.diether_lipids = str(self.diether_lipids)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.n_alkanes is not None and not isinstance(self.n_alkanes, str):
            self.n_alkanes = str(self.n_alkanes)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.phaeopigments is not None and not isinstance(self.phaeopigments, str):
            self.phaeopigments = str(self.phaeopigments)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.phosplipid_fatt_acid is not None and not isinstance(self.phosplipid_fatt_acid, str):
            self.phosplipid_fatt_acid = str(self.phosplipid_fatt_acid)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        super().__post_init__(**kwargs)


@dataclass
class MigsBa(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003"]
    class_class_curie: ClassVar[str] = "MIXS:0010003"
    class_name: ClassVar[str] = "MigsBa"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsBa

    rel_to_oxygen: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    extrachrom_elements: Optional[int] = None
    host_disease_stat: Optional[str] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    encoded_traits: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    num_replicons: Optional[int] = None
    ref_biomaterial: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.num_replicons):
            self.MissingRequiredField("num_replicons")
        if not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.ref_biomaterial):
            self.MissingRequiredField("ref_biomaterial")
        if not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        super().__post_init__(**kwargs)


@dataclass
class MigsEu(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002"]
    class_class_curie: ClassVar[str] = "MIXS:0010002"
    class_name: ClassVar[str] = "MigsEu"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsEu

    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    propagation: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    feat_pred: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    num_replicons: Optional[int] = None
    ploidy: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    specific_host: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        super().__post_init__(**kwargs)


@dataclass
class MigsOrg(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010006"]
    class_class_curie: ClassVar[str] = "MIXS:0010006"
    class_name: ClassVar[str] = "MigsOrg"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsOrg

    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    number_contig: Optional[int] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class MigsPl(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010004"]
    class_class_curie: ClassVar[str] = "MIXS:0010004"
    class_name: ClassVar[str] = "MigsPl"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsPl

    encoded_traits: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    number_contig: Optional[int] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    propagation: Optional[str] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.propagation):
            self.MissingRequiredField("propagation")
        if not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class MigsVi(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010005"]
    class_class_curie: ClassVar[str] = "MIXS:0010005"
    class_name: ClassVar[str] = "MigsVi"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsVi

    encoded_traits: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_spec_range: Optional[str] = None
    num_replicons: Optional[int] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    number_contig: Optional[int] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    propagation: Optional[str] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.propagation):
            self.MissingRequiredField("propagation")
        if not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        super().__post_init__(**kwargs)


@dataclass
class Mimag(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010011"]
    class_class_curie: ClassVar[str] = "MIXS:0010011"
    class_name: ClassVar[str] = "Mimag"
    class_model_uri: ClassVar[URIRef] = MIXS.Mimag

    mid: Optional[str] = None
    adapters: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_screen_input: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    mag_cov_software: Optional[str] = None
    reassembly_bin: Optional[Union[bool, Bool]] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    trna_ext_software: Optional[str] = None
    trnas: Optional[int] = None
    annot: Optional[str] = None
    number_contig: Optional[int] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    contam_score: Optional[str] = None
    tax_ident: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.bin_param):
            self.MissingRequiredField("bin_param")
        if not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self._is_empty(self.bin_software):
            self.MissingRequiredField("bin_software")
        if not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.compl_score):
            self.MissingRequiredField("compl_score")
        if not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self._is_empty(self.compl_software):
            self.MissingRequiredField("compl_software")
        if not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self._is_empty(self.contam_score):
            self.MissingRequiredField("contam_score")
        if not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.tax_ident):
            self.MissingRequiredField("tax_ident")
        if not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        super().__post_init__(**kwargs)


@dataclass
class MimarksC(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010009"]
    class_class_curie: ClassVar[str] = "MIXS:0010009"
    class_name: ClassVar[str] = "MimarksC"
    class_model_uri: ClassVar[URIRef] = MIXS.MimarksC

    chimera_check: Optional[str] = None
    pcr_cond: Optional[str] = None
    pcr_primers: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    seq_quality_check: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    samp_mat_process: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    experimental_factor: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    samp_size: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    target_gene: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        super().__post_init__(**kwargs)


@dataclass
class MimarksS(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008"]
    class_class_curie: ClassVar[str] = "MIXS:0010008"
    class_name: ClassVar[str] = "MimarksS"
    class_model_uri: ClassVar[URIRef] = MIXS.MimarksS

    chimera_check: Optional[str] = None
    mid: Optional[str] = None
    pcr_cond: Optional[str] = None
    pcr_primers: Optional[str] = None
    seq_quality_check: Optional[str] = None
    target_subfragment: Optional[str] = None
    adapters: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_software: Optional[str] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    target_gene: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class Mims(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007"]
    class_class_curie: ClassVar[str] = "MIXS:0010007"
    class_name: ClassVar[str] = "Mims"
    class_model_uri: ClassVar[URIRef] = MIXS.Mims

    mid: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class Misag(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010010"]
    class_class_curie: ClassVar[str] = "MIXS:0010010"
    class_name: ClassVar[str] = "Misag"
    class_model_uri: ClassVar[URIRef] = MIXS.Misag

    mid: Optional[str] = None
    adapters: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_screen_input: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    size_frac: Optional[str] = None
    trna_ext_software: Optional[str] = None
    trnas: Optional[int] = None
    wga_amp_kit: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[int] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    contam_score: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    sort_tech: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    tax_ident: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.compl_score):
            self.MissingRequiredField("compl_score")
        if not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self._is_empty(self.compl_software):
            self.MissingRequiredField("compl_software")
        if not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self._is_empty(self.contam_score):
            self.MissingRequiredField("contam_score")
        if not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.single_cell_lysis_appr):
            self.MissingRequiredField("single_cell_lysis_appr")
        if not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self._is_empty(self.sort_tech):
            self.MissingRequiredField("sort_tech")
        if not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self._is_empty(self.tax_ident):
            self.MissingRequiredField("tax_ident")
        if not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self._is_empty(self.wga_amp_appr):
            self.MissingRequiredField("wga_amp_appr")
        if not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        super().__post_init__(**kwargs)


@dataclass
class MiscellaneousNaturalOrArtificialEnvironment(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016009"]
    class_class_curie: ClassVar[str] = "MIXS:0016009"
    class_name: ClassVar[str] = "MiscellaneousNaturalOrArtificialEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS.MiscellaneousNaturalOrArtificialEnvironment

    project_name: str = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    ammonium: Optional[str] = None
    biomass: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    chem_administration: Optional[str] = None
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    misc_param: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    ph: Optional[float] = None
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    water_current: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.biomass is not None and not isinstance(self.biomass, str):
            self.biomass = str(self.biomass)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diether_lipids is not None and not isinstance(self.diether_lipids, str):
            self.diether_lipids = str(self.diether_lipids)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.phosplipid_fatt_acid is not None and not isinstance(self.phosplipid_fatt_acid, str):
            self.phosplipid_fatt_acid = str(self.phosplipid_fatt_acid)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        super().__post_init__(**kwargs)


@dataclass
class Miuvig(Checklist):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010012"]
    class_class_curie: ClassVar[str] = "MIXS:0010012"
    class_name: ClassVar[str] = "Miuvig"
    class_model_uri: ClassVar[URIRef] = MIXS.Miuvig

    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    compl_appr: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    mid: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_db: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    reassembly_bin: Optional[Union[bool, Bool]] = None
    single_cell_lysis_appr: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    size_frac: Optional[str] = None
    sort_tech: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    adapters: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    compl_score: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_disease_stat: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    temp: Optional[str] = None
    mag_cov_software: Optional[str] = None
    trna_ext_software: Optional[str] = None
    trnas: Optional[int] = None
    annot: Optional[str] = None
    pathogenicity: Optional[str] = None
    tax_ident: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    host_spec_range: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    specific_host: Optional[str] = None
    detec_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    pred_genome_type: Optional[str] = None
    source_uvig: Optional[str] = None
    vir_ident_software: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    project_name: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.detec_type):
            self.MissingRequiredField("detec_type")
        if not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.pred_genome_struc):
            self.MissingRequiredField("pred_genome_struc")
        if not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self._is_empty(self.pred_genome_type):
            self.MissingRequiredField("pred_genome_type")
        if not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.source_uvig):
            self.MissingRequiredField("source_uvig")
        if not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self._is_empty(self.vir_ident_software):
            self.MissingRequiredField("vir_ident_software")
        if not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self._is_empty(self.virus_enrich_appr):
            self.MissingRequiredField("virus_enrich_appr")
        if not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.trnas is not None and not isinstance(self.trnas, int):
            self.trnas = int(self.trnas)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        super().__post_init__(**kwargs)


@dataclass
class PlantAssociated(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0016010"
    class_name: ClassVar[str] = "PlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.PlantAssociated

    project_name: str = None
    elev: Optional[str] = None
    air_temp_regm: Optional[str] = None
    ances_data: Optional[str] = None
    antibiotic_regm: Optional[str] = None
    biol_stat: Optional[str] = None
    biotic_regm: Optional[str] = None
    chem_administration: Optional[str] = None
    chem_mutagen: Optional[str] = None
    climate_environment: Optional[str] = None
    cult_root_med: Optional[str] = None
    fertilizer_regm: Optional[str] = None
    fungicide_regm: Optional[str] = None
    gaseous_environment: Optional[str] = None
    genetic_mod: Optional[str] = None
    gravity: Optional[str] = None
    growth_facil: Optional[str] = None
    growth_habit: Optional[str] = None
    growth_hormone_regm: Optional[str] = None
    herbicide_regm: Optional[str] = None
    host_age: Optional[str] = None
    host_common_name: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_length: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_subspecf_genlin: Optional[str] = None
    host_taxid: Optional[int] = None
    host_tot_mass: Optional[str] = None
    host_wet_mass: Optional[str] = None
    humidity_regm: Optional[str] = None
    light_regm: Optional[str] = None
    mechanical_damage: Optional[str] = None
    mineral_nutr_regm: Optional[str] = None
    misc_param: Optional[str] = None
    non_mineral_nutr_regm: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    pesticide_regm: Optional[str] = None
    ph_regm: Optional[str] = None
    plant_growth_med: Optional[str] = None
    plant_product: Optional[str] = None
    plant_sex: Optional[str] = None
    plant_struc: Optional[str] = None
    radiation_regm: Optional[str] = None
    rainfall_regm: Optional[str] = None
    root_cond: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    root_med_ph: Optional[float] = None
    root_med_regl: Optional[str] = None
    root_med_solid: Optional[str] = None
    root_med_suppl: Optional[str] = None
    salinity: Optional[str] = None
    salt_regm: Optional[str] = None
    samp_capt_status: Optional[str] = None
    samp_dis_stage: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    season_environment: Optional[str] = None
    standing_water_regm: Optional[str] = None
    temp: Optional[str] = None
    tiss_cult_growth_med: Optional[str] = None
    water_temp_regm: Optional[str] = None
    watering_regm: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.air_temp_regm is not None and not isinstance(self.air_temp_regm, str):
            self.air_temp_regm = str(self.air_temp_regm)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.antibiotic_regm is not None and not isinstance(self.antibiotic_regm, str):
            self.antibiotic_regm = str(self.antibiotic_regm)

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if self.biotic_regm is not None and not isinstance(self.biotic_regm, str):
            self.biotic_regm = str(self.biotic_regm)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chem_mutagen is not None and not isinstance(self.chem_mutagen, str):
            self.chem_mutagen = str(self.chem_mutagen)

        if self.climate_environment is not None and not isinstance(self.climate_environment, str):
            self.climate_environment = str(self.climate_environment)

        if self.cult_root_med is not None and not isinstance(self.cult_root_med, str):
            self.cult_root_med = str(self.cult_root_med)

        if self.fertilizer_regm is not None and not isinstance(self.fertilizer_regm, str):
            self.fertilizer_regm = str(self.fertilizer_regm)

        if self.fungicide_regm is not None and not isinstance(self.fungicide_regm, str):
            self.fungicide_regm = str(self.fungicide_regm)

        if self.gaseous_environment is not None and not isinstance(self.gaseous_environment, str):
            self.gaseous_environment = str(self.gaseous_environment)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.gravity is not None and not isinstance(self.gravity, str):
            self.gravity = str(self.gravity)

        if self.growth_facil is not None and not isinstance(self.growth_facil, str):
            self.growth_facil = str(self.growth_facil)

        if self.growth_habit is not None and not isinstance(self.growth_habit, str):
            self.growth_habit = str(self.growth_habit)

        if self.growth_hormone_regm is not None and not isinstance(self.growth_hormone_regm, str):
            self.growth_hormone_regm = str(self.growth_hormone_regm)

        if self.herbicide_regm is not None and not isinstance(self.herbicide_regm, str):
            self.herbicide_regm = str(self.herbicide_regm)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_subspecf_genlin is not None and not isinstance(self.host_subspecf_genlin, str):
            self.host_subspecf_genlin = str(self.host_subspecf_genlin)

        if self.host_taxid is not None and not isinstance(self.host_taxid, int):
            self.host_taxid = int(self.host_taxid)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_wet_mass is not None and not isinstance(self.host_wet_mass, str):
            self.host_wet_mass = str(self.host_wet_mass)

        if self.humidity_regm is not None and not isinstance(self.humidity_regm, str):
            self.humidity_regm = str(self.humidity_regm)

        if self.light_regm is not None and not isinstance(self.light_regm, str):
            self.light_regm = str(self.light_regm)

        if self.mechanical_damage is not None and not isinstance(self.mechanical_damage, str):
            self.mechanical_damage = str(self.mechanical_damage)

        if self.mineral_nutr_regm is not None and not isinstance(self.mineral_nutr_regm, str):
            self.mineral_nutr_regm = str(self.mineral_nutr_regm)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.non_mineral_nutr_regm is not None and not isinstance(self.non_mineral_nutr_regm, str):
            self.non_mineral_nutr_regm = str(self.non_mineral_nutr_regm)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.pesticide_regm is not None and not isinstance(self.pesticide_regm, str):
            self.pesticide_regm = str(self.pesticide_regm)

        if self.ph_regm is not None and not isinstance(self.ph_regm, str):
            self.ph_regm = str(self.ph_regm)

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.plant_sex is not None and not isinstance(self.plant_sex, str):
            self.plant_sex = str(self.plant_sex)

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if self.radiation_regm is not None and not isinstance(self.radiation_regm, str):
            self.radiation_regm = str(self.radiation_regm)

        if self.rainfall_regm is not None and not isinstance(self.rainfall_regm, str):
            self.rainfall_regm = str(self.rainfall_regm)

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if self.root_med_regl is not None and not isinstance(self.root_med_regl, str):
            self.root_med_regl = str(self.root_med_regl)

        if self.root_med_solid is not None and not isinstance(self.root_med_solid, str):
            self.root_med_solid = str(self.root_med_solid)

        if self.root_med_suppl is not None and not isinstance(self.root_med_suppl, str):
            self.root_med_suppl = str(self.root_med_suppl)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.salt_regm is not None and not isinstance(self.salt_regm, str):
            self.salt_regm = str(self.salt_regm)

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, str):
            self.samp_capt_status = str(self.samp_capt_status)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, str):
            self.samp_dis_stage = str(self.samp_dis_stage)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.season_environment is not None and not isinstance(self.season_environment, str):
            self.season_environment = str(self.season_environment)

        if self.standing_water_regm is not None and not isinstance(self.standing_water_regm, str):
            self.standing_water_regm = str(self.standing_water_regm)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tiss_cult_growth_med is not None and not isinstance(self.tiss_cult_growth_med, str):
            self.tiss_cult_growth_med = str(self.tiss_cult_growth_med)

        if self.water_temp_regm is not None and not isinstance(self.water_temp_regm, str):
            self.water_temp_regm = str(self.water_temp_regm)

        if self.watering_regm is not None and not isinstance(self.watering_regm, str):
            self.watering_regm = str(self.watering_regm)

        super().__post_init__(**kwargs)


@dataclass
class MigsBaPlantAssociated(PlantAssociated):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003_0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0010003_0016010"
    class_name: ClassVar[str] = "MigsBaPlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsBaPlantAssociated

    project_name: str = None
    rel_to_oxygen: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    extrachrom_elements: Optional[int] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    encoded_traits: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    num_replicons: Optional[int] = None
    ref_biomaterial: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        super().__post_init__(**kwargs)


@dataclass
class MimsPlantAssociated(PlantAssociated):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016010"
    class_name: ClassVar[str] = "MimsPlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.MimsPlantAssociated

    project_name: str = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        super().__post_init__(**kwargs)


@dataclass
class Sediment(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016011"]
    class_class_curie: ClassVar[str] = "MIXS:0016011"
    class_name: ClassVar[str] = "Sediment"
    class_model_uri: ClassVar[URIRef] = MIXS.Sediment

    project_name: str = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[str] = None
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[str] = None
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    methane: Optional[str] = None
    misc_param: Optional[str] = None
    n_alkanes: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    part_org_carb: Optional[str] = None
    particle_class: Optional[str] = None
    perturbation: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    ph: Optional[float] = None
    phaeopigments: Optional[str] = None
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[str] = None
    porosity: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sediment_type: Optional[str] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    tidal_stage: Optional[Union[str, "TIDALSTAGEENUM"]] = None
    tot_carb: Optional[str] = None
    tot_depth_water_col: Optional[str] = None
    tot_org_carb: Optional[str] = None
    turbidity: Optional[str] = None
    water_content: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if self.biomass is not None and not isinstance(self.biomass, str):
            self.biomass = str(self.biomass)

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diether_lipids is not None and not isinstance(self.diether_lipids, str):
            self.diether_lipids = str(self.diether_lipids)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.n_alkanes is not None and not isinstance(self.n_alkanes, str):
            self.n_alkanes = str(self.n_alkanes)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.particle_class is not None and not isinstance(self.particle_class, str):
            self.particle_class = str(self.particle_class)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.phaeopigments is not None and not isinstance(self.phaeopigments, str):
            self.phaeopigments = str(self.phaeopigments)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.phosplipid_fatt_acid is not None and not isinstance(self.phosplipid_fatt_acid, str):
            self.phosplipid_fatt_acid = str(self.phosplipid_fatt_acid)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sediment_type is not None and not isinstance(self.sediment_type, str):
            self.sediment_type = str(self.sediment_type)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, TIDALSTAGEENUM):
            self.tidal_stage = TIDALSTAGEENUM(self.tidal_stage)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        super().__post_init__(**kwargs)


@dataclass
class MigsBaSediment(Sediment):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003_0016011"]
    class_class_curie: ClassVar[str] = "MIXS:0010003_0016011"
    class_name: ClassVar[str] = "MigsBaSediment"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsBaSediment

    project_name: str = None
    rel_to_oxygen: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    extrachrom_elements: Optional[int] = None
    host_disease_stat: Optional[str] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    encoded_traits: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    num_replicons: Optional[int] = None
    ref_biomaterial: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        super().__post_init__(**kwargs)


@dataclass
class MimsSediment(Sediment):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016011"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016011"
    class_name: ClassVar[str] = "MimsSediment"
    class_model_uri: ClassVar[URIRef] = MIXS.MimsSediment

    project_name: str = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        super().__post_init__(**kwargs)


@dataclass
class Soil(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0016012"
    class_name: ClassVar[str] = "Soil"
    class_model_uri: ClassVar[URIRef] = MIXS.Soil

    elev: str = None
    project_name: str = None
    agrochem_addition: Optional[str] = None
    al_sat: Optional[str] = None
    al_sat_meth: Optional[str] = None
    annual_precpt: Optional[str] = None
    annual_temp: Optional[str] = None
    crop_rotation: Optional[str] = None
    cur_land_use: Optional[Union[str, "CURLANDUSEENUM"]] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    drainage_class: Optional[Union[str, "DRAINAGECLASSENUM"]] = None
    extreme_event: Optional[str] = None
    fao_class: Optional[Union[str, "FAOCLASSENUM"]] = None
    fire: Optional[str] = None
    flooding: Optional[str] = None
    heavy_metals: Optional[str] = None
    heavy_metals_meth: Optional[str] = None
    horizon_meth: Optional[str] = None
    link_addit_analys: Optional[str] = None
    link_class_info: Optional[str] = None
    link_climate_info: Optional[str] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    microbial_biomass: Optional[str] = None
    misc_param: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    ph: Optional[float] = None
    ph_meth: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    previous_land_use: Optional[str] = None
    previous_land_use_meth: Optional[str] = None
    profile_position: Optional[Union[str, "PROFILEPOSITIONENUM"]] = None
    salinity_meth: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    season_precpt: Optional[str] = None
    season_temp: Optional[str] = None
    sieving: Optional[str] = None
    slope_aspect: Optional[str] = None
    slope_gradient: Optional[str] = None
    soil_type: Optional[str] = None
    soil_type_meth: Optional[str] = None
    store_cond: Optional[str] = None
    temp: Optional[str] = None
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    tot_org_c_meth: Optional[str] = None
    tot_org_carb: Optional[str] = None
    water_cont_soil_meth: Optional[str] = None
    water_content: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.elev):
            self.MissingRequiredField("elev")
        if not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.agrochem_addition is not None and not isinstance(self.agrochem_addition, str):
            self.agrochem_addition = str(self.agrochem_addition)

        if self.al_sat is not None and not isinstance(self.al_sat, str):
            self.al_sat = str(self.al_sat)

        if self.al_sat_meth is not None and not isinstance(self.al_sat_meth, str):
            self.al_sat_meth = str(self.al_sat_meth)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, CURLANDUSEENUM):
            self.cur_land_use = CURLANDUSEENUM(self.cur_land_use)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.drainage_class is not None and not isinstance(self.drainage_class, DRAINAGECLASSENUM):
            self.drainage_class = DRAINAGECLASSENUM(self.drainage_class)

        if self.extreme_event is not None and not isinstance(self.extreme_event, str):
            self.extreme_event = str(self.extreme_event)

        if self.fao_class is not None and not isinstance(self.fao_class, FAOCLASSENUM):
            self.fao_class = FAOCLASSENUM(self.fao_class)

        if self.fire is not None and not isinstance(self.fire, str):
            self.fire = str(self.fire)

        if self.flooding is not None and not isinstance(self.flooding, str):
            self.flooding = str(self.flooding)

        if self.heavy_metals is not None and not isinstance(self.heavy_metals, str):
            self.heavy_metals = str(self.heavy_metals)

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.link_addit_analys is not None and not isinstance(self.link_addit_analys, str):
            self.link_addit_analys = str(self.link_addit_analys)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.microbial_biomass is not None and not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.previous_land_use_meth is not None and not isinstance(self.previous_land_use_meth, str):
            self.previous_land_use_meth = str(self.previous_land_use_meth)

        if self.profile_position is not None and not isinstance(self.profile_position, PROFILEPOSITIONENUM):
            self.profile_position = PROFILEPOSITIONENUM(self.profile_position)

        if self.salinity_meth is not None and not isinstance(self.salinity_meth, str):
            self.salinity_meth = str(self.salinity_meth)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.sieving is not None and not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.store_cond is not None and not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.water_cont_soil_meth is not None and not isinstance(self.water_cont_soil_meth, str):
            self.water_cont_soil_meth = str(self.water_cont_soil_meth)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        super().__post_init__(**kwargs)


@dataclass
class MigsBaSoil(Soil):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010003_0016012"
    class_name: ClassVar[str] = "MigsBaSoil"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsBaSoil

    elev: str = None
    project_name: str = None
    rel_to_oxygen: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    extrachrom_elements: Optional[int] = None
    host_disease_stat: Optional[str] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    encoded_traits: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    num_replicons: Optional[int] = None
    ref_biomaterial: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        super().__post_init__(**kwargs)


@dataclass
class MimsSoil(Soil):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016012"
    class_name: ClassVar[str] = "MimsSoil"
    class_model_uri: ClassVar[URIRef] = MIXS.MimsSoil

    elev: str = None
    project_name: str = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        super().__post_init__(**kwargs)


@dataclass
class SymbiontAssociated(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016023"]
    class_class_curie: ClassVar[str] = "MIXS:0016023"
    class_name: ClassVar[str] = "SymbiontAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS.SymbiontAssociated

    collection_date: str = None
    env_broad_scale: str = None
    env_local_scale: str = None
    env_medium: str = None
    geo_loc_name: str = None
    host_dependence: str = None
    host_life_stage: str = None
    lat_lon: str = None
    project_name: str = None
    sym_life_cycle_type: str = None
    alt: Optional[str] = None
    elev: Optional[str] = None
    host_cellular_loc: Optional[str] = None
    host_specificity: Optional[str] = None
    mode_transmission: Optional[str] = None
    symbiont_host_role: Optional[str] = None
    type_of_symbiosis: Optional[str] = None
    association_duration: Optional[str] = None
    chem_administration: Optional[str] = None
    gravidity: Optional[str] = None
    host_age: Optional[str] = None
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_color: Optional[str] = None
    host_common_name: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_genotype: Optional[str] = None
    host_growth_cond: Optional[str] = None
    host_height: Optional[str] = None
    host_infra_specific_name: Optional[str] = None
    host_infra_specific_rank: Optional[str] = None
    host_length: Optional[str] = None
    host_number: Optional[str] = None
    host_of_host_coinf: Optional[str] = None
    host_of_host_disease: Optional[str] = None
    host_of_host_env_loc: Optional[str] = None
    host_of_host_env_med: Optional[str] = None
    host_of_host_fam_rel: Optional[str] = None
    host_of_host_geno: Optional[str] = None
    host_of_host_gravid: Optional[str] = None
    host_of_host_infname: Optional[str] = None
    host_of_host_infrank: Optional[str] = None
    host_of_host_name: Optional[str] = None
    host_of_host_pheno: Optional[str] = None
    host_of_host_sub_id: Optional[str] = None
    host_of_host_taxid: Optional[int] = None
    host_of_host_totmass: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_shape: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_substrate: Optional[str] = None
    host_taxid: Optional[int] = None
    host_tot_mass: Optional[str] = None
    misc_param: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    route_transmission: Optional[str] = None
    samp_salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_sol: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    source_mat_id: Optional[str] = None
    temp: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.host_dependence):
            self.MissingRequiredField("host_dependence")
        if not isinstance(self.host_dependence, str):
            self.host_dependence = str(self.host_dependence)

        if self._is_empty(self.host_life_stage):
            self.MissingRequiredField("host_life_stage")
        if not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.sym_life_cycle_type):
            self.MissingRequiredField("sym_life_cycle_type")
        if not isinstance(self.sym_life_cycle_type, str):
            self.sym_life_cycle_type = str(self.sym_life_cycle_type)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.host_cellular_loc is not None and not isinstance(self.host_cellular_loc, str):
            self.host_cellular_loc = str(self.host_cellular_loc)

        if self.host_specificity is not None and not isinstance(self.host_specificity, str):
            self.host_specificity = str(self.host_specificity)

        if self.mode_transmission is not None and not isinstance(self.mode_transmission, str):
            self.mode_transmission = str(self.mode_transmission)

        if self.symbiont_host_role is not None and not isinstance(self.symbiont_host_role, str):
            self.symbiont_host_role = str(self.symbiont_host_role)

        if self.type_of_symbiosis is not None and not isinstance(self.type_of_symbiosis, str):
            self.type_of_symbiosis = str(self.type_of_symbiosis)

        if self.association_duration is not None and not isinstance(self.association_duration, str):
            self.association_duration = str(self.association_duration)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_infra_specific_name is not None and not isinstance(self.host_infra_specific_name, str):
            self.host_infra_specific_name = str(self.host_infra_specific_name)

        if self.host_infra_specific_rank is not None and not isinstance(self.host_infra_specific_rank, str):
            self.host_infra_specific_rank = str(self.host_infra_specific_rank)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_number is not None and not isinstance(self.host_number, str):
            self.host_number = str(self.host_number)

        if self.host_of_host_coinf is not None and not isinstance(self.host_of_host_coinf, str):
            self.host_of_host_coinf = str(self.host_of_host_coinf)

        if self.host_of_host_disease is not None and not isinstance(self.host_of_host_disease, str):
            self.host_of_host_disease = str(self.host_of_host_disease)

        if self.host_of_host_env_loc is not None and not isinstance(self.host_of_host_env_loc, str):
            self.host_of_host_env_loc = str(self.host_of_host_env_loc)

        if self.host_of_host_env_med is not None and not isinstance(self.host_of_host_env_med, str):
            self.host_of_host_env_med = str(self.host_of_host_env_med)

        if self.host_of_host_fam_rel is not None and not isinstance(self.host_of_host_fam_rel, str):
            self.host_of_host_fam_rel = str(self.host_of_host_fam_rel)

        if self.host_of_host_geno is not None and not isinstance(self.host_of_host_geno, str):
            self.host_of_host_geno = str(self.host_of_host_geno)

        if self.host_of_host_gravid is not None and not isinstance(self.host_of_host_gravid, str):
            self.host_of_host_gravid = str(self.host_of_host_gravid)

        if self.host_of_host_infname is not None and not isinstance(self.host_of_host_infname, str):
            self.host_of_host_infname = str(self.host_of_host_infname)

        if self.host_of_host_infrank is not None and not isinstance(self.host_of_host_infrank, str):
            self.host_of_host_infrank = str(self.host_of_host_infrank)

        if self.host_of_host_name is not None and not isinstance(self.host_of_host_name, str):
            self.host_of_host_name = str(self.host_of_host_name)

        if self.host_of_host_pheno is not None and not isinstance(self.host_of_host_pheno, str):
            self.host_of_host_pheno = str(self.host_of_host_pheno)

        if self.host_of_host_sub_id is not None and not isinstance(self.host_of_host_sub_id, str):
            self.host_of_host_sub_id = str(self.host_of_host_sub_id)

        if self.host_of_host_taxid is not None and not isinstance(self.host_of_host_taxid, int):
            self.host_of_host_taxid = int(self.host_of_host_taxid)

        if self.host_of_host_totmass is not None and not isinstance(self.host_of_host_totmass, str):
            self.host_of_host_totmass = str(self.host_of_host_totmass)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if self.host_taxid is not None and not isinstance(self.host_taxid, int):
            self.host_taxid = int(self.host_taxid)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.route_transmission is not None and not isinstance(self.route_transmission, str):
            self.route_transmission = str(self.route_transmission)

        if self.samp_salinity is not None and not isinstance(self.samp_salinity, str):
            self.samp_salinity = str(self.samp_salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_sol is not None and not isinstance(self.samp_store_sol, str):
            self.samp_store_sol = str(self.samp_store_sol)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        super().__post_init__(**kwargs)


@dataclass
class WastewaterSludge(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016013"]
    class_class_curie: ClassVar[str] = "MIXS:0016013"
    class_name: ClassVar[str] = "WastewaterSludge"
    class_model_uri: ClassVar[URIRef] = MIXS.WastewaterSludge

    project_name: str = None
    alkalinity: Optional[str] = None
    biochem_oxygen_dem: Optional[str] = None
    chem_administration: Optional[str] = None
    chem_oxygen_dem: Optional[str] = None
    efficiency_percent: Optional[str] = None
    emulsions: Optional[str] = None
    gaseous_substances: Optional[str] = None
    indust_eff_percent: Optional[str] = None
    inorg_particles: Optional[str] = None
    misc_param: Optional[str] = None
    nitrate: Optional[str] = None
    org_particles: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[str] = None
    ph: Optional[float] = None
    phosphate: Optional[str] = None
    pre_treatment: Optional[str] = None
    primary_treatment: Optional[str] = None
    reactor_type: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    secondary_treatment: Optional[str] = None
    sewage_type: Optional[str] = None
    sludge_retent_time: Optional[str] = None
    sodium: Optional[str] = None
    soluble_inorg_mat: Optional[str] = None
    soluble_org_mat: Optional[str] = None
    suspend_solids: Optional[str] = None
    temp: Optional[str] = None
    tertiary_treatment: Optional[str] = None
    tot_phosphate: Optional[str] = None
    wastewater_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.biochem_oxygen_dem is not None and not isinstance(self.biochem_oxygen_dem, str):
            self.biochem_oxygen_dem = str(self.biochem_oxygen_dem)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chem_oxygen_dem is not None and not isinstance(self.chem_oxygen_dem, str):
            self.chem_oxygen_dem = str(self.chem_oxygen_dem)

        if self.efficiency_percent is not None and not isinstance(self.efficiency_percent, str):
            self.efficiency_percent = str(self.efficiency_percent)

        if self.emulsions is not None and not isinstance(self.emulsions, str):
            self.emulsions = str(self.emulsions)

        if self.gaseous_substances is not None and not isinstance(self.gaseous_substances, str):
            self.gaseous_substances = str(self.gaseous_substances)

        if self.indust_eff_percent is not None and not isinstance(self.indust_eff_percent, str):
            self.indust_eff_percent = str(self.indust_eff_percent)

        if self.inorg_particles is not None and not isinstance(self.inorg_particles, str):
            self.inorg_particles = str(self.inorg_particles)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.org_particles is not None and not isinstance(self.org_particles, str):
            self.org_particles = str(self.org_particles)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.pre_treatment is not None and not isinstance(self.pre_treatment, str):
            self.pre_treatment = str(self.pre_treatment)

        if self.primary_treatment is not None and not isinstance(self.primary_treatment, str):
            self.primary_treatment = str(self.primary_treatment)

        if self.reactor_type is not None and not isinstance(self.reactor_type, str):
            self.reactor_type = str(self.reactor_type)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.secondary_treatment is not None and not isinstance(self.secondary_treatment, str):
            self.secondary_treatment = str(self.secondary_treatment)

        if self.sewage_type is not None and not isinstance(self.sewage_type, str):
            self.sewage_type = str(self.sewage_type)

        if self.sludge_retent_time is not None and not isinstance(self.sludge_retent_time, str):
            self.sludge_retent_time = str(self.sludge_retent_time)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.soluble_inorg_mat is not None and not isinstance(self.soluble_inorg_mat, str):
            self.soluble_inorg_mat = str(self.soluble_inorg_mat)

        if self.soluble_org_mat is not None and not isinstance(self.soluble_org_mat, str):
            self.soluble_org_mat = str(self.soluble_org_mat)

        if self.suspend_solids is not None and not isinstance(self.suspend_solids, str):
            self.suspend_solids = str(self.suspend_solids)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tertiary_treatment is not None and not isinstance(self.tertiary_treatment, str):
            self.tertiary_treatment = str(self.tertiary_treatment)

        if self.tot_phosphate is not None and not isinstance(self.tot_phosphate, str):
            self.tot_phosphate = str(self.tot_phosphate)

        if self.wastewater_type is not None and not isinstance(self.wastewater_type, str):
            self.wastewater_type = str(self.wastewater_type)

        super().__post_init__(**kwargs)


@dataclass
class Water(EnvironmentalPackage):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016014"]
    class_class_curie: ClassVar[str] = "MIXS:0016014"
    class_name: ClassVar[str] = "Water"
    class_model_uri: ClassVar[URIRef] = MIXS.Water

    project_name: str = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    atmospheric_data: Optional[str] = None
    bac_prod: Optional[str] = None
    bac_resp: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[str] = None
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[str] = None
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    conduc: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_inorg_nitro: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    down_par: Optional[str] = None
    fluor: Optional[str] = None
    glucosidase_act: Optional[str] = None
    light_intensity: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    misc_param: Optional[str] = None
    n_alkanes: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    part_org_carb: Optional[str] = None
    part_org_nitro: Optional[str] = None
    perturbation: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    ph: Optional[float] = None
    phaeopigments: Optional[str] = None
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[str] = None
    photon_flux: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    primary_prod: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    sodium: Optional[str] = None
    soluble_react_phosp: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    suspend_part_matter: Optional[str] = None
    temp: Optional[str] = None
    tidal_stage: Optional[Union[str, "TIDALSTAGEENUM"]] = None
    tot_depth_water_col: Optional[str] = None
    tot_diss_nitro: Optional[str] = None
    tot_inorg_nitro: Optional[str] = None
    tot_part_carb: Optional[str] = None
    tot_phosp: Optional[str] = None
    turbidity: Optional[str] = None
    water_current: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.atmospheric_data is not None and not isinstance(self.atmospheric_data, str):
            self.atmospheric_data = str(self.atmospheric_data)

        if self.bac_prod is not None and not isinstance(self.bac_prod, str):
            self.bac_prod = str(self.bac_prod)

        if self.bac_resp is not None and not isinstance(self.bac_resp, str):
            self.bac_resp = str(self.bac_resp)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if self.biomass is not None and not isinstance(self.biomass, str):
            self.biomass = str(self.biomass)

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if self.chem_administration is not None and not isinstance(self.chem_administration, str):
            self.chem_administration = str(self.chem_administration)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diether_lipids is not None and not isinstance(self.diether_lipids, str):
            self.diether_lipids = str(self.diether_lipids)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_inorg_nitro is not None and not isinstance(self.diss_inorg_nitro, str):
            self.diss_inorg_nitro = str(self.diss_inorg_nitro)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.down_par is not None and not isinstance(self.down_par, str):
            self.down_par = str(self.down_par)

        if self.fluor is not None and not isinstance(self.fluor, str):
            self.fluor = str(self.fluor)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.light_intensity is not None and not isinstance(self.light_intensity, str):
            self.light_intensity = str(self.light_intensity)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if self.misc_param is not None and not isinstance(self.misc_param, str):
            self.misc_param = str(self.misc_param)

        if self.n_alkanes is not None and not isinstance(self.n_alkanes, str):
            self.n_alkanes = str(self.n_alkanes)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.part_org_nitro is not None and not isinstance(self.part_org_nitro, str):
            self.part_org_nitro = str(self.part_org_nitro)

        if self.perturbation is not None and not isinstance(self.perturbation, str):
            self.perturbation = str(self.perturbation)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.phaeopigments is not None and not isinstance(self.phaeopigments, str):
            self.phaeopigments = str(self.phaeopigments)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.phosplipid_fatt_acid is not None and not isinstance(self.phosplipid_fatt_acid, str):
            self.phosplipid_fatt_acid = str(self.phosplipid_fatt_acid)

        if self.photon_flux is not None and not isinstance(self.photon_flux, str):
            self.photon_flux = str(self.photon_flux)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.primary_prod is not None and not isinstance(self.primary_prod, str):
            self.primary_prod = str(self.primary_prod)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.soluble_react_phosp is not None and not isinstance(self.soluble_react_phosp, str):
            self.soluble_react_phosp = str(self.soluble_react_phosp)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.suspend_part_matter is not None and not isinstance(self.suspend_part_matter, str):
            self.suspend_part_matter = str(self.suspend_part_matter)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, TIDALSTAGEENUM):
            self.tidal_stage = TIDALSTAGEENUM(self.tidal_stage)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.tot_diss_nitro is not None and not isinstance(self.tot_diss_nitro, str):
            self.tot_diss_nitro = str(self.tot_diss_nitro)

        if self.tot_inorg_nitro is not None and not isinstance(self.tot_inorg_nitro, str):
            self.tot_inorg_nitro = str(self.tot_inorg_nitro)

        if self.tot_part_carb is not None and not isinstance(self.tot_part_carb, str):
            self.tot_part_carb = str(self.tot_part_carb)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        super().__post_init__(**kwargs)


@dataclass
class MigsBaWater(Water):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010003_0016012"
    class_name: ClassVar[str] = "MigsBaWater"
    class_model_uri: ClassVar[URIRef] = MIXS.MigsBaWater

    project_name: str = None
    rel_to_oxygen: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pathogenicity: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    tax_ident: Optional[str] = None
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    extrachrom_elements: Optional[int] = None
    host_disease_stat: Optional[str] = None
    specific_host: Optional[str] = None
    alt: Optional[str] = None
    encoded_traits: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    estimated_size: Optional[str] = None
    experimental_factor: Optional[str] = None
    feat_pred: Optional[str] = None
    host_spec_range: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    ref_db: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    lat_lon: Optional[str] = None
    number_contig: Optional[int] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None
    num_replicons: Optional[int] = None
    ref_biomaterial: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.host_spec_range is not None and not isinstance(self.host_spec_range, str):
            self.host_spec_range = str(self.host_spec_range)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        super().__post_init__(**kwargs)


@dataclass
class MimsWater(Water):
    """
    placeholder description; linter will ignore this
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016012"
    class_name: ClassVar[str] = "MimsWater"
    class_model_uri: ClassVar[URIRef] = MIXS.MimsWater

    project_name: str = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    annot: Optional[str] = None
    assembly_name: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    pos_cont_type: Optional[str] = None
    sop: Optional[str] = None
    source_mat_id: Optional[str] = None
    assembly_qual: Optional[Union[str, "ASSEMBLYQUALENUM"]] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    experimental_factor: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    lib_screen: Optional[str] = None
    lib_size: Optional[int] = None
    lib_vector: Optional[str] = None
    samp_mat_process: Optional[str] = None
    samp_size: Optional[str] = None
    alt: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    size_frac: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    geo_loc_name: Optional[str] = None
    lat_lon: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    seq_meth: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.sop is not None and not isinstance(self.sop, str):
            self.sop = str(self.sop)

        if self.source_mat_id is not None and not isinstance(self.source_mat_id, str):
            self.source_mat_id = str(self.source_mat_id)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, ASSEMBLYQUALENUM):
            self.assembly_qual = ASSEMBLYQUALENUM(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        super().__post_init__(**kwargs)


# Enumerations
class ASSEMBLYQUALENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    _defn = EnumDefinition(
        name="ASSEMBLYQUALENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Finished genome",
                PermissibleValue(text="Finished genome") )
        setattr(cls, "Genome fragment(s)",
                PermissibleValue(text="Genome fragment(s)") )
        setattr(cls, "High-quality draft genome",
                PermissibleValue(text="High-quality draft genome") )
        setattr(cls, "Low-quality draft genome",
                PermissibleValue(text="Low-quality draft genome") )
        setattr(cls, "Medium-quality draft genome",
                PermissibleValue(text="Medium-quality draft genome") )

class BIOTICRELATIONSHIPENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    commensalism = PermissibleValue(text="commensalism")
    mutualism = PermissibleValue(text="mutualism")
    parasitism = PermissibleValue(text="parasitism")
    symbiotic = PermissibleValue(text="symbiotic")

    _defn = EnumDefinition(
        name="BIOTICRELATIONSHIPENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "free living",
                PermissibleValue(text="free living") )

class CURLANDUSEENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    badlands = PermissibleValue(text="badlands")
    cities = PermissibleValue(text="cities")
    farmstead = PermissibleValue(text="farmstead")
    gravel = PermissibleValue(text="gravel")
    hayland = PermissibleValue(text="hayland")
    mudflats = PermissibleValue(text="mudflats")
    rangeland = PermissibleValue(text="rangeland")
    rock = PermissibleValue(text="rock")
    sand = PermissibleValue(text="sand")

    _defn = EnumDefinition(
        name="CURLANDUSEENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "conifers (e.g. pine, spruce, fir, cypress)",
                PermissibleValue(text="conifers (e.g. pine, spruce, fir, cypress)") )
        setattr(cls, "crop trees (nuts, fruit, christmas trees, nursery trees)",
                PermissibleValue(text="crop trees (nuts, fruit, christmas trees, nursery trees)") )
        setattr(cls, "hardwoods (e.g. oak, hickory, elm, aspen)",
                PermissibleValue(text="hardwoods (e.g. oak, hickory, elm, aspen)") )
        setattr(cls, "horticultural plants (e.g. tulips)",
                PermissibleValue(text="horticultural plants (e.g. tulips)") )
        setattr(cls, "industrial areas",
                PermissibleValue(text="industrial areas") )
        setattr(cls, "intermixed hardwood and conifers",
                PermissibleValue(text="intermixed hardwood and conifers") )
        setattr(cls, "marshlands (grass, sedges, rushes)",
                PermissibleValue(text="marshlands (grass, sedges, rushes)") )
        setattr(cls, "meadows (grasses, alfalfa, fescue, bromegrass, timothy)",
                PermissibleValue(text="meadows (grasses, alfalfa, fescue, bromegrass, timothy)") )
        setattr(cls, "mines or quarries",
                PermissibleValue(text="mines or quarries") )
        setattr(cls, "oil waste areas",
                PermissibleValue(text="oil waste areas") )
        setattr(cls, "pastureland (grasslands used for livestock grazing)",
                PermissibleValue(text="pastureland (grasslands used for livestock grazing)") )
        setattr(cls, "permanent snow or ice",
                PermissibleValue(text="permanent snow or ice") )
        setattr(cls, "rainforest (evergreen forest receiving greater than 406 cm annual rainfall)",
                PermissibleValue(text="rainforest (evergreen forest receiving greater than 406 cm annual rainfall)") )
        setattr(cls, "roads or railroads",
                PermissibleValue(text="roads or railroads") )
        setattr(cls, "row crops",
                PermissibleValue(text="row crops") )
        setattr(cls, "saline seeps",
                PermissibleValue(text="saline seeps") )
        setattr(cls, "salt flats",
                PermissibleValue(text="salt flats") )
        setattr(cls, "shrub crops (blueberries, nursery ornamentals, filberts)",
                PermissibleValue(text="shrub crops (blueberries, nursery ornamentals, filberts)") )
        setattr(cls, "shrub land (e.g. mesquite, sage-brush, creosote bush, shrub oak, eucalyptus)",
                PermissibleValue(text="shrub land (e.g. mesquite, sage-brush, creosote bush, shrub oak, eucalyptus)") )
        setattr(cls, "small grains",
                PermissibleValue(text="small grains") )
        setattr(cls, "successional shrub land (tree saplings, hazels, sumacs, chokecherry, shrub dogwoods, blackberries)",
                PermissibleValue(text="successional shrub land (tree saplings, hazels, sumacs, chokecherry, shrub dogwoods, blackberries)") )
        setattr(cls, "swamp (permanent or semi-permanent water body dominated by woody plants)",
                PermissibleValue(text="swamp (permanent or semi-permanent water body dominated by woody plants)") )
        setattr(cls, "tropical (e.g. mangrove, palms)",
                PermissibleValue(text="tropical (e.g. mangrove, palms)") )
        setattr(cls, "tundra (mosses, lichens)",
                PermissibleValue(text="tundra (mosses, lichens)") )
        setattr(cls, "vegetable crops",
                PermissibleValue(text="vegetable crops") )
        setattr(cls, "vine crops (grapes)",
                PermissibleValue(text="vine crops (grapes)") )

class DRAINAGECLASSENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    poorly = PermissibleValue(text="poorly")
    well = PermissibleValue(text="well")

    _defn = EnumDefinition(
        name="DRAINAGECLASSENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "excessively drained",
                PermissibleValue(text="excessively drained") )
        setattr(cls, "moderately well",
                PermissibleValue(text="moderately well") )
        setattr(cls, "somewhat poorly",
                PermissibleValue(text="somewhat poorly") )
        setattr(cls, "very poorly",
                PermissibleValue(text="very poorly") )

class FAOCLASSENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    Acrisols = PermissibleValue(text="Acrisols")
    Andosols = PermissibleValue(text="Andosols")
    Arenosols = PermissibleValue(text="Arenosols")
    Cambisols = PermissibleValue(text="Cambisols")
    Chernozems = PermissibleValue(text="Chernozems")
    Ferralsols = PermissibleValue(text="Ferralsols")
    Fluvisols = PermissibleValue(text="Fluvisols")
    Gleysols = PermissibleValue(text="Gleysols")
    Greyzems = PermissibleValue(text="Greyzems")
    Gypsisols = PermissibleValue(text="Gypsisols")
    Histosols = PermissibleValue(text="Histosols")
    Kastanozems = PermissibleValue(text="Kastanozems")
    Lithosols = PermissibleValue(text="Lithosols")
    Luvisols = PermissibleValue(text="Luvisols")
    Nitosols = PermissibleValue(text="Nitosols")
    Phaeozems = PermissibleValue(text="Phaeozems")
    Planosols = PermissibleValue(text="Planosols")
    Podzols = PermissibleValue(text="Podzols")
    Podzoluvisols = PermissibleValue(text="Podzoluvisols")
    Rankers = PermissibleValue(text="Rankers")
    Regosols = PermissibleValue(text="Regosols")
    Rendzinas = PermissibleValue(text="Rendzinas")
    Solonchaks = PermissibleValue(text="Solonchaks")
    Solonetz = PermissibleValue(text="Solonetz")
    Vertisols = PermissibleValue(text="Vertisols")
    Yermosols = PermissibleValue(text="Yermosols")

    _defn = EnumDefinition(
        name="FAOCLASSENUM",
        description="placeholder description; linter will ignore this",
    )

class LIBLAYOUTENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    other = PermissibleValue(text="other")
    paired = PermissibleValue(text="paired")
    single = PermissibleValue(text="single")
    vector = PermissibleValue(text="vector")

    _defn = EnumDefinition(
        name="LIBLAYOUTENUM",
        description="placeholder description; linter will ignore this",
    )

class NEGCONTTYPEENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    _defn = EnumDefinition(
        name="NEGCONTTYPEENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "DNA-free PCR mix",
                PermissibleValue(text="DNA-free PCR mix") )
        setattr(cls, "distilled water",
                PermissibleValue(text="distilled water") )
        setattr(cls, "empty collection device",
                PermissibleValue(text="empty collection device") )
        setattr(cls, "empty collection tube",
                PermissibleValue(text="empty collection tube") )
        setattr(cls, "phosphate buffer",
                PermissibleValue(text="phosphate buffer") )
        setattr(cls, "sterile swab",
                PermissibleValue(text="sterile swab") )
        setattr(cls, "sterile syringe",
                PermissibleValue(text="sterile syringe") )

class OXYSTATSAMPENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    aerobic = PermissibleValue(text="aerobic")
    anaerobic = PermissibleValue(text="anaerobic")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="OXYSTATSAMPENUM",
        description="placeholder description; linter will ignore this",
    )

class PROFILEPOSITIONENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    backslope = PermissibleValue(text="backslope")
    footslope = PermissibleValue(text="footslope")
    shoulder = PermissibleValue(text="shoulder")
    summit = PermissibleValue(text="summit")
    toeslope = PermissibleValue(text="toeslope")

    _defn = EnumDefinition(
        name="PROFILEPOSITIONENUM",
        description="placeholder description; linter will ignore this",
    )

class RELTOOXYGENENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    aerobe = PermissibleValue(text="aerobe")
    anaerobe = PermissibleValue(text="anaerobe")
    facultative = PermissibleValue(text="facultative")
    microaerophilic = PermissibleValue(text="microaerophilic")
    microanaerobe = PermissibleValue(text="microanaerobe")

    _defn = EnumDefinition(
        name="RELTOOXYGENENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "obligate aerobe",
                PermissibleValue(text="obligate aerobe") )
        setattr(cls, "obligate anaerobe",
                PermissibleValue(text="obligate anaerobe") )

class SOILHORIZONENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    Permafrost = PermissibleValue(text="Permafrost")

    _defn = EnumDefinition(
        name="SOILHORIZONENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "A horizon",
                PermissibleValue(text="A horizon") )
        setattr(cls, "B horizon",
                PermissibleValue(text="B horizon") )
        setattr(cls, "C horizon",
                PermissibleValue(text="C horizon") )
        setattr(cls, "E horizon",
                PermissibleValue(text="E horizon") )
        setattr(cls, "O horizon",
                PermissibleValue(text="O horizon") )
        setattr(cls, "R layer",
                PermissibleValue(text="R layer") )

class TIDALSTAGEENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    _defn = EnumDefinition(
        name="TIDALSTAGEENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "ebb tide",
                PermissibleValue(text="ebb tide") )
        setattr(cls, "flood tide",
                PermissibleValue(text="flood tide") )
        setattr(cls, "high tide",
                PermissibleValue(text="high tide") )
        setattr(cls, "low tide",
                PermissibleValue(text="low tide") )

class TILLAGEENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    chisel = PermissibleValue(text="chisel")
    drill = PermissibleValue(text="drill")
    mouldboard = PermissibleValue(text="mouldboard")
    tined = PermissibleValue(text="tined")

    _defn = EnumDefinition(
        name="TILLAGEENUM",
        description="placeholder description; linter will ignore this",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "cutting disc",
                PermissibleValue(text="cutting disc") )
        setattr(cls, "disc plough",
                PermissibleValue(text="disc plough") )
        setattr(cls, "ridge till",
                PermissibleValue(text="ridge till") )
        setattr(cls, "strip tillage",
                PermissibleValue(text="strip tillage") )
        setattr(cls, "zonal tillage",
                PermissibleValue(text="zonal tillage") )

class TROPHICLEVELENUM(EnumDefinitionImpl):
    """
    placeholder description; linter will ignore this
    """
    autotroph = PermissibleValue(text="autotroph")
    carboxydotroph = PermissibleValue(text="carboxydotroph")
    chemoautolithotroph = PermissibleValue(text="chemoautolithotroph")
    chemoautotroph = PermissibleValue(text="chemoautotroph")
    chemoheterotroph = PermissibleValue(text="chemoheterotroph")
    chemolithoautotroph = PermissibleValue(text="chemolithoautotroph")
    chemolithotroph = PermissibleValue(text="chemolithotroph")
    chemoorganoheterotroph = PermissibleValue(text="chemoorganoheterotroph")
    chemoorganotroph = PermissibleValue(text="chemoorganotroph")
    chemosynthetic = PermissibleValue(text="chemosynthetic")
    chemotroph = PermissibleValue(text="chemotroph")
    copiotroph = PermissibleValue(text="copiotroph")
    diazotroph = PermissibleValue(text="diazotroph")
    facultative = PermissibleValue(text="facultative")
    heterotroph = PermissibleValue(text="heterotroph")
    lithoautotroph = PermissibleValue(text="lithoautotroph")
    lithoheterotroph = PermissibleValue(text="lithoheterotroph")
    lithotroph = PermissibleValue(text="lithotroph")
    methanotroph = PermissibleValue(text="methanotroph")
    methylotroph = PermissibleValue(text="methylotroph")
    mixotroph = PermissibleValue(text="mixotroph")
    obligate = PermissibleValue(text="obligate")
    oligotroph = PermissibleValue(text="oligotroph")
    organoheterotroph = PermissibleValue(text="organoheterotroph")
    organotroph = PermissibleValue(text="organotroph")
    photoautotroph = PermissibleValue(text="photoautotroph")
    photoheterotroph = PermissibleValue(text="photoheterotroph")
    photolithoautotroph = PermissibleValue(text="photolithoautotroph")
    photolithotroph = PermissibleValue(text="photolithotroph")
    photosynthetic = PermissibleValue(text="photosynthetic")
    phototroph = PermissibleValue(text="phototroph")

    _defn = EnumDefinition(
        name="TROPHICLEVELENUM",
        description="placeholder description; linter will ignore this",
    )

# Slots
class slots:
    pass

slots.HACCP_term = Slot(uri=MIXS['0001215'], name="HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=MIXS.HACCP_term, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.IFSAC_category = Slot(uri=MIXS['0001179'], name="IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS.IFSAC_category, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.abs_air_humidity = Slot(uri=MIXS['0000122'], name="abs_air_humidity", curie=MIXS.curie('0000122'),
                   model_uri=MIXS.abs_air_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.adapters = Slot(uri=MIXS['0000048'], name="adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.add_recov_method = Slot(uri=MIXS['0001009'], name="add_recov_method", curie=MIXS.curie('0001009'),
                   model_uri=MIXS.add_recov_method, domain=None, range=Optional[str])

slots.additional_info = Slot(uri=MIXS['0000300'], name="additional_info", curie=MIXS.curie('0000300'),
                   model_uri=MIXS.additional_info, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.address = Slot(uri=MIXS['0000218'], name="address", curie=MIXS.curie('0000218'),
                   model_uri=MIXS.address, domain=None, range=Optional[str])

slots.adj_room = Slot(uri=MIXS['0000219'], name="adj_room", curie=MIXS.curie('0000219'),
                   model_uri=MIXS.adj_room, domain=None, range=Optional[str])

slots.adjacent_environment = Slot(uri=MIXS['0001121'], name="adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=MIXS.adjacent_environment, domain=None, range=Optional[str])

slots.aero_struc = Slot(uri=MIXS['0000773'], name="aero_struc", curie=MIXS.curie('0000773'),
                   model_uri=MIXS.aero_struc, domain=None, range=Optional[str])

slots.agrochem_addition = Slot(uri=MIXS['0000639'], name="agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=MIXS.agrochem_addition, domain=None, range=Optional[str])

slots.air_flow_impede = Slot(uri=MIXS['0001146'], name="air_flow_impede", curie=MIXS.curie('0001146'),
                   model_uri=MIXS.air_flow_impede, domain=None, range=Optional[str])

slots.air_pm_concen = Slot(uri=MIXS['0000108'], name="air_pm_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS.air_pm_concen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.air_temp = Slot(uri=MIXS['0000124'], name="air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS.air_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.air_temp_regm = Slot(uri=MIXS['0000551'], name="air_temp_regm", curie=MIXS.curie('0000551'),
                   model_uri=MIXS.air_temp_regm, domain=None, range=Optional[str])

slots.al_sat = Slot(uri=MIXS['0000607'], name="al_sat", curie=MIXS.curie('0000607'),
                   model_uri=MIXS.al_sat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.al_sat_meth = Slot(uri=MIXS['0000324'], name="al_sat_meth", curie=MIXS.curie('0000324'),
                   model_uri=MIXS.al_sat_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.alkalinity = Slot(uri=MIXS['0000421'], name="alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.alkalinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.alkalinity_method = Slot(uri=MIXS['0000298'], name="alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=MIXS.alkalinity_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.alkyl_diethers = Slot(uri=MIXS['0000490'], name="alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS.alkyl_diethers, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.alt = Slot(uri=MIXS['0000094'], name="alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.aminopept_act = Slot(uri=MIXS['0000172'], name="aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=MIXS.aminopept_act, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ammonium = Slot(uri=MIXS['0000427'], name="ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.ammonium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.amniotic_fluid_color = Slot(uri=MIXS['0000276'], name="amniotic_fluid_color", curie=MIXS.curie('0000276'),
                   model_uri=MIXS.amniotic_fluid_color, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.amount_light = Slot(uri=MIXS['0000140'], name="amount_light", curie=MIXS.curie('0000140'),
                   model_uri=MIXS.amount_light, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ances_data = Slot(uri=MIXS['0000247'], name="ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS.ances_data, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.anim_water_method = Slot(uri=MIXS['0001115'], name="anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=MIXS.anim_water_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.animal_am = Slot(uri=MIXS['0001243'], name="animal_am", curie=MIXS.curie('0001243'),
                   model_uri=MIXS.animal_am, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.animal_am_dur = Slot(uri=MIXS['0001244'], name="animal_am_dur", curie=MIXS.curie('0001244'),
                   model_uri=MIXS.animal_am_dur, domain=None, range=Optional[str])

slots.animal_am_freq = Slot(uri=MIXS['0001245'], name="animal_am_freq", curie=MIXS.curie('0001245'),
                   model_uri=MIXS.animal_am_freq, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.animal_am_route = Slot(uri=MIXS['0001246'], name="animal_am_route", curie=MIXS.curie('0001246'),
                   model_uri=MIXS.animal_am_route, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.animal_am_use = Slot(uri=MIXS['0001247'], name="animal_am_use", curie=MIXS.curie('0001247'),
                   model_uri=MIXS.animal_am_use, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.animal_body_cond = Slot(uri=MIXS['0001248'], name="animal_body_cond", curie=MIXS.curie('0001248'),
                   model_uri=MIXS.animal_body_cond, domain=None, range=Optional[str])

slots.animal_diet = Slot(uri=MIXS['0001130'], name="animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=MIXS.animal_diet, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.animal_feed_equip = Slot(uri=MIXS['0001113'], name="animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=MIXS.animal_feed_equip, domain=None, range=Optional[str])

slots.animal_group_size = Slot(uri=MIXS['0001129'], name="animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=MIXS.animal_group_size, domain=None, range=Optional[int])

slots.animal_housing = Slot(uri=MIXS['0001180'], name="animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=MIXS.animal_housing, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.animal_intrusion = Slot(uri=MIXS['0001114'], name="animal_intrusion", curie=MIXS.curie('0001114'),
                   model_uri=MIXS.animal_intrusion, domain=None, range=Optional[str])

slots.animal_sex = Slot(uri=MIXS['0001249'], name="animal_sex", curie=MIXS.curie('0001249'),
                   model_uri=MIXS.animal_sex, domain=None, range=Optional[str])

slots.annot = Slot(uri=MIXS['0000059'], name="annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.annual_precpt = Slot(uri=MIXS['0000644'], name="annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=MIXS.annual_precpt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.annual_temp = Slot(uri=MIXS['0000642'], name="annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=MIXS.annual_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.antibiotic_regm = Slot(uri=MIXS['0000553'], name="antibiotic_regm", curie=MIXS.curie('0000553'),
                   model_uri=MIXS.antibiotic_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?)\|)*[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.api = Slot(uri=MIXS['0000157'], name="api", curie=MIXS.curie('0000157'),
                   model_uri=MIXS.api, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.arch_struc = Slot(uri=MIXS['0000774'], name="arch_struc", curie=MIXS.curie('0000774'),
                   model_uri=MIXS.arch_struc, domain=None, range=Optional[str])

slots.area_samp_size = Slot(uri=MIXS['0001255'], name="area_samp_size", curie=MIXS.curie('0001255'),
                   model_uri=MIXS.area_samp_size, domain=None, range=Optional[str])

slots.aromatics_pc = Slot(uri=MIXS['0000133'], name="aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=MIXS.aromatics_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.asphaltenes_pc = Slot(uri=MIXS['0000135'], name="asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=MIXS.asphaltenes_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.assembly_name = Slot(uri=MIXS['0000057'], name="assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.assembly_qual = Slot(uri=MIXS['0000056'], name="assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.assembly_qual, domain=None, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.assembly_software = Slot(uri=MIXS['0000058'], name="assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.association_duration = Slot(uri=MIXS['0001299'], name="association_duration", curie=MIXS.curie('0001299'),
                   model_uri=MIXS.association_duration, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.atmospheric_data = Slot(uri=MIXS['0001097'], name="atmospheric_data", curie=MIXS.curie('0001097'),
                   model_uri=MIXS.atmospheric_data, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.avg_dew_point = Slot(uri=MIXS['0000141'], name="avg_dew_point", curie=MIXS.curie('0000141'),
                   model_uri=MIXS.avg_dew_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.avg_occup = Slot(uri=MIXS['0000775'], name="avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS.avg_occup, domain=None, range=Optional[float])

slots.avg_temp = Slot(uri=MIXS['0000142'], name="avg_temp", curie=MIXS.curie('0000142'),
                   model_uri=MIXS.avg_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bac_prod = Slot(uri=MIXS['0000683'], name="bac_prod", curie=MIXS.curie('0000683'),
                   model_uri=MIXS.bac_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bac_resp = Slot(uri=MIXS['0000684'], name="bac_resp", curie=MIXS.curie('0000684'),
                   model_uri=MIXS.bac_resp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS.bacteria_carb_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bacterial_density = Slot(uri=MIXS['0001194'], name="bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=MIXS.bacterial_density, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.barometric_press = Slot(uri=MIXS['0000096'], name="barometric_press", curie=MIXS.curie('0000096'),
                   model_uri=MIXS.barometric_press, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.basin = Slot(uri=MIXS['0000290'], name="basin", curie=MIXS.curie('0000290'),
                   model_uri=MIXS.basin, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.bathroom_count = Slot(uri=MIXS['0000776'], name="bathroom_count", curie=MIXS.curie('0000776'),
                   model_uri=MIXS.bathroom_count, domain=None, range=Optional[int])

slots.bedroom_count = Slot(uri=MIXS['0000777'], name="bedroom_count", curie=MIXS.curie('0000777'),
                   model_uri=MIXS.bedroom_count, domain=None, range=Optional[int])

slots.benzene = Slot(uri=MIXS['0000153'], name="benzene", curie=MIXS.curie('0000153'),
                   model_uri=MIXS.benzene, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bin_param = Slot(uri=MIXS['0000077'], name="bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS.bin_param, domain=None, range=Optional[str])

slots.bin_software = Slot(uri=MIXS['0000078'], name="bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS.bin_software, domain=None, range=Optional[str])

slots.biochem_oxygen_dem = Slot(uri=MIXS['0000653'], name="biochem_oxygen_dem", curie=MIXS.curie('0000653'),
                   model_uri=MIXS.biochem_oxygen_dem, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.biocide = Slot(uri=MIXS['0001011'], name="biocide", curie=MIXS.curie('0001011'),
                   model_uri=MIXS.biocide, domain=None, range=Optional[str])

slots.biocide_admin_method = Slot(uri=MIXS['0000456'], name="biocide_admin_method", curie=MIXS.curie('0000456'),
                   model_uri=MIXS.biocide_admin_method, domain=None, range=Optional[str])

slots.biocide_used = Slot(uri=MIXS['0001258'], name="biocide_used", curie=MIXS.curie('0001258'),
                   model_uri=MIXS.biocide_used, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.biol_stat = Slot(uri=MIXS['0000858'], name="biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=MIXS.biol_stat, domain=None, range=Optional[str])

slots.biomass = Slot(uri=MIXS['0000174'], name="biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS.biomass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.biotic_regm = Slot(uri=MIXS['0001038'], name="biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS.biotic_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.biotic_relationship = Slot(uri=MIXS['0000028'], name="biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.birth_control = Slot(uri=MIXS['0000286'], name="birth_control", curie=MIXS.curie('0000286'),
                   model_uri=MIXS.birth_control, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.bishomohopanol = Slot(uri=MIXS['0000175'], name="bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=MIXS.bishomohopanol, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.blood_blood_disord = Slot(uri=MIXS['0000271'], name="blood_blood_disord", curie=MIXS.curie('0000271'),
                   model_uri=MIXS.blood_blood_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.blood_press_diast = Slot(uri=MIXS['0000258'], name="blood_press_diast", curie=MIXS.curie('0000258'),
                   model_uri=MIXS.blood_press_diast, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.blood_press_syst = Slot(uri=MIXS['0000259'], name="blood_press_syst", curie=MIXS.curie('0000259'),
                   model_uri=MIXS.blood_press_syst, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.bromide = Slot(uri=MIXS['0000176'], name="bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS.bromide, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.build_docs = Slot(uri=MIXS['0000787'], name="build_docs", curie=MIXS.curie('0000787'),
                   model_uri=MIXS.build_docs, domain=None, range=Optional[str])

slots.build_occup_type = Slot(uri=MIXS['0000761'], name="build_occup_type", curie=MIXS.curie('0000761'),
                   model_uri=MIXS.build_occup_type, domain=None, range=Optional[str])

slots.building_setting = Slot(uri=MIXS['0000768'], name="building_setting", curie=MIXS.curie('0000768'),
                   model_uri=MIXS.building_setting, domain=None, range=Optional[str])

slots.built_struc_age = Slot(uri=MIXS['0000145'], name="built_struc_age", curie=MIXS.curie('0000145'),
                   model_uri=MIXS.built_struc_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.built_struc_set = Slot(uri=MIXS['0000778'], name="built_struc_set", curie=MIXS.curie('0000778'),
                   model_uri=MIXS.built_struc_set, domain=None, range=Optional[str])

slots.built_struc_type = Slot(uri=MIXS['0000721'], name="built_struc_type", curie=MIXS.curie('0000721'),
                   model_uri=MIXS.built_struc_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.calcium = Slot(uri=MIXS['0000432'], name="calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.calcium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.carb_dioxide = Slot(uri=MIXS['0000097'], name="carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS.carb_dioxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.carb_monoxide = Slot(uri=MIXS['0000098'], name="carb_monoxide", curie=MIXS.curie('0000098'),
                   model_uri=MIXS.carb_monoxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=MIXS.carb_nitro_ratio, domain=None, range=Optional[float])

slots.ceil_area = Slot(uri=MIXS['0000148'], name="ceil_area", curie=MIXS.curie('0000148'),
                   model_uri=MIXS.ceil_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ceil_cond = Slot(uri=MIXS['0000779'], name="ceil_cond", curie=MIXS.curie('0000779'),
                   model_uri=MIXS.ceil_cond, domain=None, range=Optional[str])

slots.ceil_finish_mat = Slot(uri=MIXS['0000780'], name="ceil_finish_mat", curie=MIXS.curie('0000780'),
                   model_uri=MIXS.ceil_finish_mat, domain=None, range=Optional[str])

slots.ceil_struc = Slot(uri=MIXS['0000782'], name="ceil_struc", curie=MIXS.curie('0000782'),
                   model_uri=MIXS.ceil_struc, domain=None, range=Optional[str])

slots.ceil_texture = Slot(uri=MIXS['0000783'], name="ceil_texture", curie=MIXS.curie('0000783'),
                   model_uri=MIXS.ceil_texture, domain=None, range=Optional[str])

slots.ceil_thermal_mass = Slot(uri=MIXS['0000143'], name="ceil_thermal_mass", curie=MIXS.curie('0000143'),
                   model_uri=MIXS.ceil_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ceil_type = Slot(uri=MIXS['0000784'], name="ceil_type", curie=MIXS.curie('0000784'),
                   model_uri=MIXS.ceil_type, domain=None, range=Optional[str])

slots.ceil_water_mold = Slot(uri=MIXS['0000781'], name="ceil_water_mold", curie=MIXS.curie('0000781'),
                   model_uri=MIXS.ceil_water_mold, domain=None, range=Optional[str])

slots.chem_administration = Slot(uri=MIXS['0000751'], name="chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.chem_administration, domain=None, range=Optional[str])

slots.chem_mutagen = Slot(uri=MIXS['0000555'], name="chem_mutagen", curie=MIXS.curie('0000555'),
                   model_uri=MIXS.chem_mutagen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.chem_oxygen_dem = Slot(uri=MIXS['0000656'], name="chem_oxygen_dem", curie=MIXS.curie('0000656'),
                   model_uri=MIXS.chem_oxygen_dem, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.chem_treat_method = Slot(uri=MIXS['0000457'], name="chem_treat_method", curie=MIXS.curie('0000457'),
                   model_uri=MIXS.chem_treat_method, domain=None, range=Optional[str])

slots.chem_treatment = Slot(uri=MIXS['0001012'], name="chem_treatment", curie=MIXS.curie('0001012'),
                   model_uri=MIXS.chem_treatment, domain=None, range=Optional[str])

slots.chimera_check = Slot(uri=MIXS['0000052'], name="chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS.chimera_check, domain=None, range=Optional[str])

slots.chloride = Slot(uri=MIXS['0000429'], name="chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.chloride, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.chlorophyll = Slot(uri=MIXS['0000177'], name="chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS.chlorophyll, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.climate_environment = Slot(uri=MIXS['0001040'], name="climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS.climate_environment, domain=None, range=Optional[str])

slots.coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=MIXS.coll_site_geo_feat, domain=None, range=Optional[str])

slots.collection_date = Slot(uri=MIXS['0000011'], name="collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.collection_date, domain=None, range=Optional[str])

slots.compl_appr = Slot(uri=MIXS['0000071'], name="compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS.compl_appr, domain=None, range=Optional[str])

slots.compl_score = Slot(uri=MIXS['0000069'], name="compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.compl_score, domain=None, range=Optional[str])

slots.compl_software = Slot(uri=MIXS['0000070'], name="compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.conduc = Slot(uri=MIXS['0000692'], name="conduc", curie=MIXS.curie('0000692'),
                   model_uri=MIXS.conduc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=MIXS.cons_food_stor_dur, domain=None, range=Optional[str])

slots.cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=MIXS.cons_food_stor_temp, domain=None, range=Optional[str])

slots.cons_purch_date = Slot(uri=MIXS['0001197'], name="cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=MIXS.cons_purch_date, domain=None, range=Optional[str])

slots.cons_qty_purchased = Slot(uri=MIXS['0001198'], name="cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=MIXS.cons_qty_purchased, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.contam_score = Slot(uri=MIXS['0000072'], name="contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS.contam_score, domain=None, range=Optional[str])

slots.contam_screen_input = Slot(uri=MIXS['0000005'], name="contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS.contam_screen_input, domain=None, range=Optional[str])

slots.contam_screen_param = Slot(uri=MIXS['0000073'], name="contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS.contam_screen_param, domain=None, range=Optional[str])

slots.cool_syst_id = Slot(uri=MIXS['0000785'], name="cool_syst_id", curie=MIXS.curie('0000785'),
                   model_uri=MIXS.cool_syst_id, domain=None, range=Optional[int])

slots.crop_rotation = Slot(uri=MIXS['0000318'], name="crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS.crop_rotation, domain=None, range=Optional[str])

slots.crop_yield = Slot(uri=MIXS['0001116'], name="crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=MIXS.crop_yield, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.cult_isol_date = Slot(uri=MIXS['0001181'], name="cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.cult_isol_date, domain=None, range=Optional[str])

slots.cult_result = Slot(uri=MIXS['0001117'], name="cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS.cult_result, domain=None, range=Optional[str])

slots.cult_result_org = Slot(uri=MIXS['0001118'], name="cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS.cult_result_org, domain=None, range=Optional[str])

slots.cult_root_med = Slot(uri=MIXS['0001041'], name="cult_root_med", curie=MIXS.curie('0001041'),
                   model_uri=MIXS.cult_root_med, domain=None, range=Optional[str])

slots.cult_target = Slot(uri=MIXS['0001119'], name="cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS.cult_target, domain=None, range=Optional[str])

slots.cur_land_use = Slot(uri=MIXS['0001080'], name="cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=MIXS.cur_land_use, domain=None, range=Optional[Union[str, "CURLANDUSEENUM"]])

slots.cur_vegetation = Slot(uri=MIXS['0000312'], name="cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS.cur_vegetation, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS.cur_vegetation_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.date_extr_weath = Slot(uri=MIXS['0001142'], name="date_extr_weath", curie=MIXS.curie('0001142'),
                   model_uri=MIXS.date_extr_weath, domain=None, range=Optional[str])

slots.date_last_rain = Slot(uri=MIXS['0000786'], name="date_last_rain", curie=MIXS.curie('0000786'),
                   model_uri=MIXS.date_last_rain, domain=None, range=Optional[str])

slots.decontam_software = Slot(uri=MIXS['0000074'], name="decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS.decontam_software, domain=None, range=Optional[str])

slots.density = Slot(uri=MIXS['0000435'], name="density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.density, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.depos_env = Slot(uri=MIXS['0000992'], name="depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS.depos_env, domain=None, range=Optional[str])

slots.dermatology_disord = Slot(uri=MIXS['0000284'], name="dermatology_disord", curie=MIXS.curie('0000284'),
                   model_uri=MIXS.dermatology_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.detec_type = Slot(uri=MIXS['0000084'], name="detec_type", curie=MIXS.curie('0000084'),
                   model_uri=MIXS.detec_type, domain=None, range=Optional[str])

slots.dew_point = Slot(uri=MIXS['0000129'], name="dew_point", curie=MIXS.curie('0000129'),
                   model_uri=MIXS.dew_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diet_last_six_month = Slot(uri=MIXS['0000266'], name="diet_last_six_month", curie=MIXS.curie('0000266'),
                   model_uri=MIXS.diet_last_six_month, domain=None, range=Optional[str])

slots.dietary_claim_use = Slot(uri=MIXS['0001199'], name="dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=MIXS.dietary_claim_use, domain=None, range=Optional[str])

slots.diether_lipids = Slot(uri=MIXS['0000178'], name="diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS.diether_lipids, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.diss_carb_dioxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_hydrogen = Slot(uri=MIXS['0000179'], name="diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS.diss_hydrogen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_inorg_carb = Slot(uri=MIXS['0000434'], name="diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.diss_inorg_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_inorg_nitro = Slot(uri=MIXS['0000698'], name="diss_inorg_nitro", curie=MIXS.curie('0000698'),
                   model_uri=MIXS.diss_inorg_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS.diss_inorg_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_iron = Slot(uri=MIXS['0000139'], name="diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=MIXS.diss_iron, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_org_carb = Slot(uri=MIXS['0000433'], name="diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.diss_org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_org_nitro = Slot(uri=MIXS['0000162'], name="diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS.diss_org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_oxygen = Slot(uri=MIXS['0000119'], name="diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS.diss_oxygen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=MIXS.diss_oxygen_fluid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.dominant_hand = Slot(uri=MIXS['0000944'], name="dominant_hand", curie=MIXS.curie('0000944'),
                   model_uri=MIXS.dominant_hand, domain=None, range=Optional[str])

slots.door_comp_type = Slot(uri=MIXS['0000795'], name="door_comp_type", curie=MIXS.curie('0000795'),
                   model_uri=MIXS.door_comp_type, domain=None, range=Optional[str])

slots.door_cond = Slot(uri=MIXS['0000788'], name="door_cond", curie=MIXS.curie('0000788'),
                   model_uri=MIXS.door_cond, domain=None, range=Optional[str])

slots.door_direct = Slot(uri=MIXS['0000789'], name="door_direct", curie=MIXS.curie('0000789'),
                   model_uri=MIXS.door_direct, domain=None, range=Optional[str])

slots.door_loc = Slot(uri=MIXS['0000790'], name="door_loc", curie=MIXS.curie('0000790'),
                   model_uri=MIXS.door_loc, domain=None, range=Optional[str])

slots.door_mat = Slot(uri=MIXS['0000791'], name="door_mat", curie=MIXS.curie('0000791'),
                   model_uri=MIXS.door_mat, domain=None, range=Optional[str])

slots.door_move = Slot(uri=MIXS['0000792'], name="door_move", curie=MIXS.curie('0000792'),
                   model_uri=MIXS.door_move, domain=None, range=Optional[str])

slots.door_size = Slot(uri=MIXS['0000158'], name="door_size", curie=MIXS.curie('0000158'),
                   model_uri=MIXS.door_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.door_type = Slot(uri=MIXS['0000794'], name="door_type", curie=MIXS.curie('0000794'),
                   model_uri=MIXS.door_type, domain=None, range=Optional[str])

slots.door_type_metal = Slot(uri=MIXS['0000796'], name="door_type_metal", curie=MIXS.curie('0000796'),
                   model_uri=MIXS.door_type_metal, domain=None, range=Optional[str])

slots.door_type_wood = Slot(uri=MIXS['0000797'], name="door_type_wood", curie=MIXS.curie('0000797'),
                   model_uri=MIXS.door_type_wood, domain=None, range=Optional[str])

slots.door_water_mold = Slot(uri=MIXS['0000793'], name="door_water_mold", curie=MIXS.curie('0000793'),
                   model_uri=MIXS.door_water_mold, domain=None, range=Optional[str])

slots.douche = Slot(uri=MIXS['0000967'], name="douche", curie=MIXS.curie('0000967'),
                   model_uri=MIXS.douche, domain=None, range=Optional[str])

slots.down_par = Slot(uri=MIXS['0000703'], name="down_par", curie=MIXS.curie('0000703'),
                   model_uri=MIXS.down_par, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.drainage_class = Slot(uri=MIXS['0001085'], name="drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS.drainage_class, domain=None, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.drawings = Slot(uri=MIXS['0000798'], name="drawings", curie=MIXS.curie('0000798'),
                   model_uri=MIXS.drawings, domain=None, range=Optional[str])

slots.drug_usage = Slot(uri=MIXS['0000894'], name="drug_usage", curie=MIXS.curie('0000894'),
                   model_uri=MIXS.drug_usage, domain=None, range=Optional[str])

slots.efficiency_percent = Slot(uri=MIXS['0000657'], name="efficiency_percent", curie=MIXS.curie('0000657'),
                   model_uri=MIXS.efficiency_percent, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.elev = Slot(uri=MIXS['0000093'], name="elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.elevator = Slot(uri=MIXS['0000799'], name="elevator", curie=MIXS.curie('0000799'),
                   model_uri=MIXS.elevator, domain=None, range=Optional[int])

slots.emulsions = Slot(uri=MIXS['0000660'], name="emulsions", curie=MIXS.curie('0000660'),
                   model_uri=MIXS.emulsions, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.encoded_traits = Slot(uri=MIXS['0000034'], name="encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS.encoded_traits, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.enrichment_protocol = Slot(uri=MIXS['0001177'], name="enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.enrichment_protocol, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.env_broad_scale = Slot(uri=MIXS['0000012'], name="env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.env_broad_scale, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.env_local_scale = Slot(uri=MIXS['0000013'], name="env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.env_local_scale, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.env_medium = Slot(uri=MIXS['0000014'], name="env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.env_medium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.env_monitoring_zone = Slot(uri=MIXS['0001254'], name="env_monitoring_zone", curie=MIXS.curie('0001254'),
                   model_uri=MIXS.env_monitoring_zone, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.escalator = Slot(uri=MIXS['0000800'], name="escalator", curie=MIXS.curie('0000800'),
                   model_uri=MIXS.escalator, domain=None, range=Optional[int])

slots.estimated_size = Slot(uri=MIXS['0000024'], name="estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.ethnicity = Slot(uri=MIXS['0000895'], name="ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.ethnicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.ethylbenzene = Slot(uri=MIXS['0000155'], name="ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=MIXS.ethylbenzene, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.exp_duct = Slot(uri=MIXS['0000144'], name="exp_duct", curie=MIXS.curie('0000144'),
                   model_uri=MIXS.exp_duct, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.exp_pipe = Slot(uri=MIXS['0000220'], name="exp_pipe", curie=MIXS.curie('0000220'),
                   model_uri=MIXS.exp_pipe, domain=None, range=Optional[int])

slots.experimental_factor = Slot(uri=MIXS['0000008'], name="experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.experimental_factor, domain=None, range=Optional[str])

slots.ext_door = Slot(uri=MIXS['0000170'], name="ext_door", curie=MIXS.curie('0000170'),
                   model_uri=MIXS.ext_door, domain=None, range=Optional[int])

slots.ext_wall_orient = Slot(uri=MIXS['0000817'], name="ext_wall_orient", curie=MIXS.curie('0000817'),
                   model_uri=MIXS.ext_wall_orient, domain=None, range=Optional[str])

slots.ext_window_orient = Slot(uri=MIXS['0000818'], name="ext_window_orient", curie=MIXS.curie('0000818'),
                   model_uri=MIXS.ext_window_orient, domain=None, range=Optional[str])

slots.extr_weather_event = Slot(uri=MIXS['0001141'], name="extr_weather_event", curie=MIXS.curie('0001141'),
                   model_uri=MIXS.extr_weather_event, domain=None, range=Optional[str])

slots.extrachrom_elements = Slot(uri=MIXS['0000023'], name="extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.extrachrom_elements, domain=None, range=Optional[int])

slots.extreme_event = Slot(uri=MIXS['0000320'], name="extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS.extreme_event, domain=None, range=Optional[str])

slots.facility_type = Slot(uri=MIXS['0001252'], name="facility_type", curie=MIXS.curie('0001252'),
                   model_uri=MIXS.facility_type, domain=None, range=Optional[str])

slots.fao_class = Slot(uri=MIXS['0001083'], name="fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS.fao_class, domain=None, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.farm_equip = Slot(uri=MIXS['0001126'], name="farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=MIXS.farm_equip, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.farm_equip_san = Slot(uri=MIXS['0001124'], name="farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=MIXS.farm_equip_san, domain=None, range=Optional[str])

slots.farm_equip_san_freq = Slot(uri=MIXS['0001125'], name="farm_equip_san_freq", curie=MIXS.curie('0001125'),
                   model_uri=MIXS.farm_equip_san_freq, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.farm_equip_shared = Slot(uri=MIXS['0001123'], name="farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=MIXS.farm_equip_shared, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.farm_water_source = Slot(uri=MIXS['0001110'], name="farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=MIXS.farm_water_source, domain=None, range=Optional[str])

slots.feat_pred = Slot(uri=MIXS['0000061'], name="feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.ferm_chem_add = Slot(uri=MIXS['0001185'], name="ferm_chem_add", curie=MIXS.curie('0001185'),
                   model_uri=MIXS.ferm_chem_add, domain=None, range=Optional[str])

slots.ferm_chem_add_perc = Slot(uri=MIXS['0001186'], name="ferm_chem_add_perc", curie=MIXS.curie('0001186'),
                   model_uri=MIXS.ferm_chem_add_perc, domain=None, range=Optional[str])

slots.ferm_headspace_oxy = Slot(uri=MIXS['0001187'], name="ferm_headspace_oxy", curie=MIXS.curie('0001187'),
                   model_uri=MIXS.ferm_headspace_oxy, domain=None, range=Optional[str])

slots.ferm_medium = Slot(uri=MIXS['0001188'], name="ferm_medium", curie=MIXS.curie('0001188'),
                   model_uri=MIXS.ferm_medium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.ferm_pH = Slot(uri=MIXS['0001189'], name="ferm_pH", curie=MIXS.curie('0001189'),
                   model_uri=MIXS.ferm_pH, domain=None, range=Optional[float])

slots.ferm_rel_humidity = Slot(uri=MIXS['0001190'], name="ferm_rel_humidity", curie=MIXS.curie('0001190'),
                   model_uri=MIXS.ferm_rel_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ferm_temp = Slot(uri=MIXS['0001191'], name="ferm_temp", curie=MIXS.curie('0001191'),
                   model_uri=MIXS.ferm_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ferm_time = Slot(uri=MIXS['0001192'], name="ferm_time", curie=MIXS.curie('0001192'),
                   model_uri=MIXS.ferm_time, domain=None, range=Optional[str])

slots.ferm_vessel = Slot(uri=MIXS['0001193'], name="ferm_vessel", curie=MIXS.curie('0001193'),
                   model_uri=MIXS.ferm_vessel, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.fertilizer_admin = Slot(uri=MIXS['0001127'], name="fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=MIXS.fertilizer_admin, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.fertilizer_date = Slot(uri=MIXS['0001128'], name="fertilizer_date", curie=MIXS.curie('0001128'),
                   model_uri=MIXS.fertilizer_date, domain=None, range=Optional[str])

slots.fertilizer_regm = Slot(uri=MIXS['0000556'], name="fertilizer_regm", curie=MIXS.curie('0000556'),
                   model_uri=MIXS.fertilizer_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.field = Slot(uri=MIXS['0000291'], name="field", curie=MIXS.curie('0000291'),
                   model_uri=MIXS.field, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.filter_type = Slot(uri=MIXS['0000765'], name="filter_type", curie=MIXS.curie('0000765'),
                   model_uri=MIXS.filter_type, domain=None, range=Optional[str])

slots.fire = Slot(uri=MIXS['0001086'], name="fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS.fire, domain=None, range=Optional[str])

slots.fireplace_type = Slot(uri=MIXS['0000802'], name="fireplace_type", curie=MIXS.curie('0000802'),
                   model_uri=MIXS.fireplace_type, domain=None, range=Optional[str])

slots.flooding = Slot(uri=MIXS['0000319'], name="flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS.flooding, domain=None, range=Optional[str])

slots.floor_age = Slot(uri=MIXS['0000164'], name="floor_age", curie=MIXS.curie('0000164'),
                   model_uri=MIXS.floor_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.floor_area = Slot(uri=MIXS['0000165'], name="floor_area", curie=MIXS.curie('0000165'),
                   model_uri=MIXS.floor_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.floor_cond = Slot(uri=MIXS['0000803'], name="floor_cond", curie=MIXS.curie('0000803'),
                   model_uri=MIXS.floor_cond, domain=None, range=Optional[str])

slots.floor_count = Slot(uri=MIXS['0000225'], name="floor_count", curie=MIXS.curie('0000225'),
                   model_uri=MIXS.floor_count, domain=None, range=Optional[int])

slots.floor_finish_mat = Slot(uri=MIXS['0000804'], name="floor_finish_mat", curie=MIXS.curie('0000804'),
                   model_uri=MIXS.floor_finish_mat, domain=None, range=Optional[str])

slots.floor_struc = Slot(uri=MIXS['0000806'], name="floor_struc", curie=MIXS.curie('0000806'),
                   model_uri=MIXS.floor_struc, domain=None, range=Optional[str])

slots.floor_thermal_mass = Slot(uri=MIXS['0000166'], name="floor_thermal_mass", curie=MIXS.curie('0000166'),
                   model_uri=MIXS.floor_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.floor_water_mold = Slot(uri=MIXS['0000805'], name="floor_water_mold", curie=MIXS.curie('0000805'),
                   model_uri=MIXS.floor_water_mold, domain=None, range=Optional[str])

slots.fluor = Slot(uri=MIXS['0000704'], name="fluor", curie=MIXS.curie('0000704'),
                   model_uri=MIXS.fluor, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.foetal_health_stat = Slot(uri=MIXS['0000275'], name="foetal_health_stat", curie=MIXS.curie('0000275'),
                   model_uri=MIXS.foetal_health_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.food_additive = Slot(uri=MIXS['0001200'], name="food_additive", curie=MIXS.curie('0001200'),
                   model_uri=MIXS.food_additive, domain=None, range=Optional[str])

slots.food_allergen_label = Slot(uri=MIXS['0001201'], name="food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=MIXS.food_allergen_label, domain=None, range=Optional[str])

slots.food_clean_proc = Slot(uri=MIXS['0001182'], name="food_clean_proc", curie=MIXS.curie('0001182'),
                   model_uri=MIXS.food_clean_proc, domain=None, range=Optional[str])

slots.food_contact_surf = Slot(uri=MIXS['0001131'], name="food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS.food_contact_surf, domain=None, range=Optional[str])

slots.food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS.food_contain_wrap, domain=None, range=Optional[str])

slots.food_cooking_proc = Slot(uri=MIXS['0001202'], name="food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=MIXS.food_cooking_proc, domain=None, range=Optional[str])

slots.food_dis_point = Slot(uri=MIXS['0001203'], name="food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=MIXS.food_dis_point, domain=None, range=Optional[str])

slots.food_dis_point_city = Slot(uri=MIXS['0001204'], name="food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=MIXS.food_dis_point_city, domain=None, range=Optional[str])

slots.food_harvest_proc = Slot(uri=MIXS['0001133'], name="food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=MIXS.food_harvest_proc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.food_ingredient = Slot(uri=MIXS['0001205'], name="food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=MIXS.food_ingredient, domain=None, range=Optional[str])

slots.food_name_status = Slot(uri=MIXS['0001206'], name="food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=MIXS.food_name_status, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.food_origin = Slot(uri=MIXS['0001207'], name="food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS.food_origin, domain=None, range=Optional[str])

slots.food_pack_capacity = Slot(uri=MIXS['0001208'], name="food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=MIXS.food_pack_capacity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.food_pack_integrity = Slot(uri=MIXS['0001209'], name="food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=MIXS.food_pack_integrity, domain=None, range=Optional[str])

slots.food_pack_medium = Slot(uri=MIXS['0001134'], name="food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS.food_pack_medium, domain=None, range=Optional[str])

slots.food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS.food_preserv_proc, domain=None, range=Optional[str])

slots.food_prior_contact = Slot(uri=MIXS['0001210'], name="food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=MIXS.food_prior_contact, domain=None, range=Optional[str])

slots.food_prod = Slot(uri=MIXS['0001211'], name="food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS.food_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.food_prod_char = Slot(uri=MIXS['0001136'], name="food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=MIXS.food_prod_char, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.food_prod_synonym = Slot(uri=MIXS['0001212'], name="food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=MIXS.food_prod_synonym, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.food_product_qual = Slot(uri=MIXS['0001213'], name="food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS.food_product_qual, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.food_product_type = Slot(uri=MIXS['0001184'], name="food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.food_product_type, domain=None, range=Optional[str])

slots.food_quality_date = Slot(uri=MIXS['0001178'], name="food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS.food_quality_date, domain=None, range=Optional[str])

slots.food_source = Slot(uri=MIXS['0001139'], name="food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.food_source, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.food_source_age = Slot(uri=MIXS['0001251'], name="food_source_age", curie=MIXS.curie('0001251'),
                   model_uri=MIXS.food_source_age, domain=None, range=Optional[str])

slots.food_trace_list = Slot(uri=MIXS['0001214'], name="food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=MIXS.food_trace_list, domain=None, range=Optional[str])

slots.food_trav_mode = Slot(uri=MIXS['0001137'], name="food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.food_trav_mode, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.food_trav_vehic, domain=None, range=Optional[str])

slots.food_treat_proc = Slot(uri=MIXS['0001140'], name="food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS.food_treat_proc, domain=None, range=Optional[str])

slots.freq_clean = Slot(uri=MIXS['0000226'], name="freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS.freq_clean, domain=None, range=Optional[str])

slots.freq_cook = Slot(uri=MIXS['0000227'], name="freq_cook", curie=MIXS.curie('0000227'),
                   model_uri=MIXS.freq_cook, domain=None, range=Optional[int])

slots.fungicide_regm = Slot(uri=MIXS['0000557'], name="fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS.fungicide_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.furniture = Slot(uri=MIXS['0000807'], name="furniture", curie=MIXS.curie('0000807'),
                   model_uri=MIXS.furniture, domain=None, range=Optional[str])

slots.gaseous_environment = Slot(uri=MIXS['0000558'], name="gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS.gaseous_environment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.gaseous_substances = Slot(uri=MIXS['0000661'], name="gaseous_substances", curie=MIXS.curie('0000661'),
                   model_uri=MIXS.gaseous_substances, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.gastrointest_disord = Slot(uri=MIXS['0000280'], name="gastrointest_disord", curie=MIXS.curie('0000280'),
                   model_uri=MIXS.gastrointest_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.gender_restroom = Slot(uri=MIXS['0000808'], name="gender_restroom", curie=MIXS.curie('0000808'),
                   model_uri=MIXS.gender_restroom, domain=None, range=Optional[str])

slots.genetic_mod = Slot(uri=MIXS['0000859'], name="genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.genetic_mod, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.geo_loc_name = Slot(uri=MIXS['0000010'], name="geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.geo_loc_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.gestation_state = Slot(uri=MIXS['0000272'], name="gestation_state", curie=MIXS.curie('0000272'),
                   model_uri=MIXS.gestation_state, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.glucosidase_act = Slot(uri=MIXS['0000137'], name="glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=MIXS.glucosidase_act, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.gravidity = Slot(uri=MIXS['0000875'], name="gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS.gravidity, domain=None, range=Optional[str])

slots.gravity = Slot(uri=MIXS['0000559'], name="gravity", curie=MIXS.curie('0000559'),
                   model_uri=MIXS.gravity, domain=None, range=Optional[str])

slots.growth_facil = Slot(uri=MIXS['0001043'], name="growth_facil", curie=MIXS.curie('0001043'),
                   model_uri=MIXS.growth_facil, domain=None, range=Optional[str])

slots.growth_habit = Slot(uri=MIXS['0001044'], name="growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=MIXS.growth_habit, domain=None, range=Optional[str])

slots.growth_hormone_regm = Slot(uri=MIXS['0000560'], name="growth_hormone_regm", curie=MIXS.curie('0000560'),
                   model_uri=MIXS.growth_hormone_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.growth_medium = Slot(uri=MIXS['0001108'], name="growth_medium", curie=MIXS.curie('0001108'),
                   model_uri=MIXS.growth_medium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.gynecologic_disord = Slot(uri=MIXS['0000288'], name="gynecologic_disord", curie=MIXS.curie('0000288'),
                   model_uri=MIXS.gynecologic_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.hall_count = Slot(uri=MIXS['0000228'], name="hall_count", curie=MIXS.curie('0000228'),
                   model_uri=MIXS.hall_count, domain=None, range=Optional[int])

slots.handidness = Slot(uri=MIXS['0000809'], name="handidness", curie=MIXS.curie('0000809'),
                   model_uri=MIXS.handidness, domain=None, range=Optional[str])

slots.hc_produced = Slot(uri=MIXS['0000989'], name="hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=MIXS.hc_produced, domain=None, range=Optional[str])

slots.hcr = Slot(uri=MIXS['0000988'], name="hcr", curie=MIXS.curie('0000988'),
                   model_uri=MIXS.hcr, domain=None, range=Optional[str])

slots.hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=MIXS.hcr_fw_salinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.hcr_geol_age = Slot(uri=MIXS['0000993'], name="hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=MIXS.hcr_geol_age, domain=None, range=Optional[str])

slots.hcr_pressure = Slot(uri=MIXS['0000395'], name="hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=MIXS.hcr_pressure, domain=None, range=Optional[str])

slots.hcr_temp = Slot(uri=MIXS['0000393'], name="hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS.hcr_temp, domain=None, range=Optional[str])

slots.heat_cool_type = Slot(uri=MIXS['0000766'], name="heat_cool_type", curie=MIXS.curie('0000766'),
                   model_uri=MIXS.heat_cool_type, domain=None, range=Optional[str])

slots.heat_deliv_loc = Slot(uri=MIXS['0000810'], name="heat_deliv_loc", curie=MIXS.curie('0000810'),
                   model_uri=MIXS.heat_deliv_loc, domain=None, range=Optional[str])

slots.heat_sys_deliv_meth = Slot(uri=MIXS['0000812'], name="heat_sys_deliv_meth", curie=MIXS.curie('0000812'),
                   model_uri=MIXS.heat_sys_deliv_meth, domain=None, range=Optional[str])

slots.heat_system_id = Slot(uri=MIXS['0000833'], name="heat_system_id", curie=MIXS.curie('0000833'),
                   model_uri=MIXS.heat_system_id, domain=None, range=Optional[int])

slots.heavy_metals = Slot(uri=MIXS['0000652'], name="heavy_metals", curie=MIXS.curie('0000652'),
                   model_uri=MIXS.heavy_metals, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.heavy_metals_meth = Slot(uri=MIXS['0000343'], name="heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS.heavy_metals_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.height_carper_fiber = Slot(uri=MIXS['0000167'], name="height_carper_fiber", curie=MIXS.curie('0000167'),
                   model_uri=MIXS.height_carper_fiber, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.herbicide_regm = Slot(uri=MIXS['0000561'], name="herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS.herbicide_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.horizon_meth = Slot(uri=MIXS['0000321'], name="horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS.horizon_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.host_age = Slot(uri=MIXS['0000255'], name="host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.host_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_body_habitat = Slot(uri=MIXS['0000866'], name="host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS.host_body_habitat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_body_mass_index = Slot(uri=MIXS['0000317'], name="host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.host_body_mass_index, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_body_site = Slot(uri=MIXS['0000867'], name="host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.host_body_site, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.host_body_temp = Slot(uri=MIXS['0000274'], name="host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.host_body_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_cellular_loc = Slot(uri=MIXS['0001313'], name="host_cellular_loc", curie=MIXS.curie('0001313'),
                   model_uri=MIXS.host_cellular_loc, domain=None, range=Optional[str])

slots.host_color = Slot(uri=MIXS['0000260'], name="host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS.host_color, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_common_name = Slot(uri=MIXS['0000248'], name="host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS.host_common_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_dependence = Slot(uri=MIXS['0001315'], name="host_dependence", curie=MIXS.curie('0001315'),
                   model_uri=MIXS.host_dependence, domain=None, range=Optional[str])

slots.host_diet = Slot(uri=MIXS['0000869'], name="host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.host_diet, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_disease_stat = Slot(uri=MIXS['0000031'], name="host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.host_disease_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.host_dry_mass = Slot(uri=MIXS['0000257'], name="host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.host_dry_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_genotype = Slot(uri=MIXS['0000365'], name="host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.host_genotype, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_growth_cond = Slot(uri=MIXS['0000871'], name="host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS.host_growth_cond, domain=None, range=Optional[str])

slots.host_height = Slot(uri=MIXS['0000264'], name="host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.host_height, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_hiv_stat = Slot(uri=MIXS['0000265'], name="host_hiv_stat", curie=MIXS.curie('0000265'),
                   model_uri=MIXS.host_hiv_stat, domain=None, range=Optional[str])

slots.host_infra_specific_name = Slot(uri=MIXS['0000253'], name="host_infra_specific_name", curie=MIXS.curie('0000253'),
                   model_uri=MIXS.host_infra_specific_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_infra_specific_rank = Slot(uri=MIXS['0000254'], name="host_infra_specific_rank", curie=MIXS.curie('0000254'),
                   model_uri=MIXS.host_infra_specific_rank, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_last_meal = Slot(uri=MIXS['0000870'], name="host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.host_last_meal, domain=None, range=Optional[str])

slots.host_length = Slot(uri=MIXS['0000256'], name="host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.host_length, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_life_stage = Slot(uri=MIXS['0000251'], name="host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS.host_life_stage, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_number = Slot(uri=MIXS['0001305'], name="host_number", curie=MIXS.curie('0001305'),
                   model_uri=MIXS.host_number, domain=None, range=Optional[str])

slots.host_occupation = Slot(uri=MIXS['0000896'], name="host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.host_occupation, domain=None, range=Optional[str])

slots.host_of_host_coinf = Slot(uri=MIXS['0001310'], name="host_of_host_coinf", curie=MIXS.curie('0001310'),
                   model_uri=MIXS.host_of_host_coinf, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_disease = Slot(uri=MIXS['0001319'], name="host_of_host_disease", curie=MIXS.curie('0001319'),
                   model_uri=MIXS.host_of_host_disease, domain=None, range=Optional[str])

slots.host_of_host_env_loc = Slot(uri=MIXS['0001325'], name="host_of_host_env_loc", curie=MIXS.curie('0001325'),
                   model_uri=MIXS.host_of_host_env_loc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.host_of_host_env_med = Slot(uri=MIXS['0001326'], name="host_of_host_env_med", curie=MIXS.curie('0001326'),
                   model_uri=MIXS.host_of_host_env_med, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.host_of_host_fam_rel = Slot(uri=MIXS['0001328'], name="host_of_host_fam_rel", curie=MIXS.curie('0001328'),
                   model_uri=MIXS.host_of_host_fam_rel, domain=None, range=Optional[str])

slots.host_of_host_geno = Slot(uri=MIXS['0001331'], name="host_of_host_geno", curie=MIXS.curie('0001331'),
                   model_uri=MIXS.host_of_host_geno, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_gravid = Slot(uri=MIXS['0001333'], name="host_of_host_gravid", curie=MIXS.curie('0001333'),
                   model_uri=MIXS.host_of_host_gravid, domain=None, range=Optional[str])

slots.host_of_host_infname = Slot(uri=MIXS['0001329'], name="host_of_host_infname", curie=MIXS.curie('0001329'),
                   model_uri=MIXS.host_of_host_infname, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_infrank = Slot(uri=MIXS['0001330'], name="host_of_host_infrank", curie=MIXS.curie('0001330'),
                   model_uri=MIXS.host_of_host_infrank, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_name = Slot(uri=MIXS['0001324'], name="host_of_host_name", curie=MIXS.curie('0001324'),
                   model_uri=MIXS.host_of_host_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_pheno = Slot(uri=MIXS['0001332'], name="host_of_host_pheno", curie=MIXS.curie('0001332'),
                   model_uri=MIXS.host_of_host_pheno, domain=None, range=Optional[str])

slots.host_of_host_sub_id = Slot(uri=MIXS['0001327'], name="host_of_host_sub_id", curie=MIXS.curie('0001327'),
                   model_uri=MIXS.host_of_host_sub_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_of_host_taxid = Slot(uri=MIXS['0001306'], name="host_of_host_taxid", curie=MIXS.curie('0001306'),
                   model_uri=MIXS.host_of_host_taxid, domain=None, range=Optional[int])

slots.host_of_host_totmass = Slot(uri=MIXS['0001334'], name="host_of_host_totmass", curie=MIXS.curie('0001334'),
                   model_uri=MIXS.host_of_host_totmass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_phenotype = Slot(uri=MIXS['0000874'], name="host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.host_phenotype, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.host_pred_appr = Slot(uri=MIXS['0000088'], name="host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=MIXS.host_pred_appr, domain=None, range=Optional[str])

slots.host_pred_est_acc = Slot(uri=MIXS['0000089'], name="host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=MIXS.host_pred_est_acc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_pulse = Slot(uri=MIXS['0000333'], name="host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.host_pulse, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_shape = Slot(uri=MIXS['0000261'], name="host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS.host_shape, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_spec_range = Slot(uri=MIXS['0000030'], name="host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.host_specificity = Slot(uri=MIXS['0001308'], name="host_specificity", curie=MIXS.curie('0001308'),
                   model_uri=MIXS.host_specificity, domain=None, range=Optional[str])

slots.host_subject_id = Slot(uri=MIXS['0000861'], name="host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.host_subject_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS.host_subspecf_genlin, domain=None, range=Optional[str])

slots.host_substrate = Slot(uri=MIXS['0000252'], name="host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS.host_substrate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.host_taxid = Slot(uri=MIXS['0000250'], name="host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.host_taxid, domain=None, range=Optional[int])

slots.host_tot_mass = Slot(uri=MIXS['0000263'], name="host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.host_tot_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.host_wet_mass = Slot(uri=MIXS['0000567'], name="host_wet_mass", curie=MIXS.curie('0000567'),
                   model_uri=MIXS.host_wet_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.hrt = Slot(uri=MIXS['0000969'], name="hrt", curie=MIXS.curie('0000969'),
                   model_uri=MIXS.hrt, domain=None, range=Optional[str])

slots.humidity = Slot(uri=MIXS['0000100'], name="humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS.humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.humidity_regm = Slot(uri=MIXS['0000568'], name="humidity_regm", curie=MIXS.curie('0000568'),
                   model_uri=MIXS.humidity_regm, domain=None, range=Optional[str])

slots.hygienic_area = Slot(uri=MIXS['0001253'], name="hygienic_area", curie=MIXS.curie('0001253'),
                   model_uri=MIXS.hygienic_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.hysterectomy = Slot(uri=MIXS['0000287'], name="hysterectomy", curie=MIXS.curie('0000287'),
                   model_uri=MIXS.hysterectomy, domain=None, range=Optional[Union[bool, Bool]])

slots.ihmc_medication_code = Slot(uri=MIXS['0000884'], name="ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.ihmc_medication_code, domain=None, range=Optional[int])

slots.indoor_space = Slot(uri=MIXS['0000763'], name="indoor_space", curie=MIXS.curie('0000763'),
                   model_uri=MIXS.indoor_space, domain=None, range=Optional[str])

slots.indoor_surf = Slot(uri=MIXS['0000764'], name="indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS.indoor_surf, domain=None, range=Optional[str])

slots.indust_eff_percent = Slot(uri=MIXS['0000662'], name="indust_eff_percent", curie=MIXS.curie('0000662'),
                   model_uri=MIXS.indust_eff_percent, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.inorg_particles = Slot(uri=MIXS['0000664'], name="inorg_particles", curie=MIXS.curie('0000664'),
                   model_uri=MIXS.inorg_particles, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.inside_lux = Slot(uri=MIXS['0000168'], name="inside_lux", curie=MIXS.curie('0000168'),
                   model_uri=MIXS.inside_lux, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.int_wall_cond = Slot(uri=MIXS['0000813'], name="int_wall_cond", curie=MIXS.curie('0000813'),
                   model_uri=MIXS.int_wall_cond, domain=None, range=Optional[str])

slots.intended_consumer = Slot(uri=MIXS['0001144'], name="intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS.intended_consumer, domain=None, range=Optional[str])

slots.isol_growth_condt = Slot(uri=MIXS['0000003'], name="isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.isol_growth_condt, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.iw_bt_date_well = Slot(uri=MIXS['0001010'], name="iw_bt_date_well", curie=MIXS.curie('0001010'),
                   model_uri=MIXS.iw_bt_date_well, domain=None, range=Optional[str])

slots.iwf = Slot(uri=MIXS['0000455'], name="iwf", curie=MIXS.curie('0000455'),
                   model_uri=MIXS.iwf, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.kidney_disord = Slot(uri=MIXS['0000277'], name="kidney_disord", curie=MIXS.curie('0000277'),
                   model_uri=MIXS.kidney_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.last_clean = Slot(uri=MIXS['0000814'], name="last_clean", curie=MIXS.curie('0000814'),
                   model_uri=MIXS.last_clean, domain=None, range=Optional[str])

slots.lat_lon = Slot(uri=MIXS['0000009'], name="lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.lat_lon, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.lib_layout = Slot(uri=MIXS['0000041'], name="lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.lib_reads_seqd = Slot(uri=MIXS['0000040'], name="lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.lib_reads_seqd, domain=None, range=Optional[int])

slots.lib_screen = Slot(uri=MIXS['0000043'], name="lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.lib_size = Slot(uri=MIXS['0000039'], name="lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.lib_size, domain=None, range=Optional[int])

slots.lib_vector = Slot(uri=MIXS['0000042'], name="lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.library_prep_kit = Slot(uri=MIXS['0001145'], name="library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.library_prep_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.light_intensity = Slot(uri=MIXS['0000706'], name="light_intensity", curie=MIXS.curie('0000706'),
                   model_uri=MIXS.light_intensity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.light_regm = Slot(uri=MIXS['0000569'], name="light_regm", curie=MIXS.curie('0000569'),
                   model_uri=MIXS.light_regm, domain=None, range=Optional[str])

slots.light_type = Slot(uri=MIXS['0000769'], name="light_type", curie=MIXS.curie('0000769'),
                   model_uri=MIXS.light_type, domain=None, range=Optional[str])

slots.link_addit_analys = Slot(uri=MIXS['0000340'], name="link_addit_analys", curie=MIXS.curie('0000340'),
                   model_uri=MIXS.link_addit_analys, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.link_class_info = Slot(uri=MIXS['0000329'], name="link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=MIXS.link_class_info, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.link_climate_info = Slot(uri=MIXS['0000328'], name="link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=MIXS.link_climate_info, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.lithology = Slot(uri=MIXS['0000990'], name="lithology", curie=MIXS.curie('0000990'),
                   model_uri=MIXS.lithology, domain=None, range=Optional[str])

slots.liver_disord = Slot(uri=MIXS['0000282'], name="liver_disord", curie=MIXS.curie('0000282'),
                   model_uri=MIXS.liver_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.local_class = Slot(uri=MIXS['0000330'], name="local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS.local_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.local_class_meth = Slot(uri=MIXS['0000331'], name="local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS.local_class_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.lot_number = Slot(uri=MIXS['0001147'], name="lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.lot_number, domain=None, range=Optional[str])

slots.mag_cov_software = Slot(uri=MIXS['0000080'], name="mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS.mag_cov_software, domain=None, range=Optional[str])

slots.magnesium = Slot(uri=MIXS['0000431'], name="magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.magnesium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.maternal_health_stat = Slot(uri=MIXS['0000273'], name="maternal_health_stat", curie=MIXS.curie('0000273'),
                   model_uri=MIXS.maternal_health_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.max_occup = Slot(uri=MIXS['0000229'], name="max_occup", curie=MIXS.curie('0000229'),
                   model_uri=MIXS.max_occup, domain=None, range=Optional[int])

slots.mean_frict_vel = Slot(uri=MIXS['0000498'], name="mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=MIXS.mean_frict_vel, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=MIXS.mean_peak_frict_vel, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.mech_struc = Slot(uri=MIXS['0000815'], name="mech_struc", curie=MIXS.curie('0000815'),
                   model_uri=MIXS.mech_struc, domain=None, range=Optional[str])

slots.mechanical_damage = Slot(uri=MIXS['0001052'], name="mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=MIXS.mechanical_damage, domain=None, range=Optional[str])

slots.medic_hist_perform = Slot(uri=MIXS['0000897'], name="medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.medic_hist_perform, domain=None, range=Optional[Union[bool, Bool]])

slots.menarche = Slot(uri=MIXS['0000965'], name="menarche", curie=MIXS.curie('0000965'),
                   model_uri=MIXS.menarche, domain=None, range=Optional[str])

slots.menopause = Slot(uri=MIXS['0000968'], name="menopause", curie=MIXS.curie('0000968'),
                   model_uri=MIXS.menopause, domain=None, range=Optional[str])

slots.methane = Slot(uri=MIXS['0000101'], name="methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS.methane, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.microb_cult_med = Slot(uri=MIXS['0001216'], name="microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=MIXS.microb_cult_med, domain=None, range=Optional[str])

slots.microb_start = Slot(uri=MIXS['0001217'], name="microb_start", curie=MIXS.curie('0001217'),
                   model_uri=MIXS.microb_start, domain=None, range=Optional[str])

slots.microb_start_count = Slot(uri=MIXS['0001218'], name="microb_start_count", curie=MIXS.curie('0001218'),
                   model_uri=MIXS.microb_start_count, domain=None, range=Optional[str])

slots.microb_start_inoc = Slot(uri=MIXS['0001219'], name="microb_start_inoc", curie=MIXS.curie('0001219'),
                   model_uri=MIXS.microb_start_inoc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.microb_start_prep = Slot(uri=MIXS['0001220'], name="microb_start_prep", curie=MIXS.curie('0001220'),
                   model_uri=MIXS.microb_start_prep, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.microb_start_source = Slot(uri=MIXS['0001221'], name="microb_start_source", curie=MIXS.curie('0001221'),
                   model_uri=MIXS.microb_start_source, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.microb_start_taxID = Slot(uri=MIXS['0001222'], name="microb_start_taxID", curie=MIXS.curie('0001222'),
                   model_uri=MIXS.microb_start_taxID, domain=None, range=Optional[str])

slots.microbial_biomass = Slot(uri=MIXS['0000650'], name="microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS.microbial_biomass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.mid = Slot(uri=MIXS['0000047'], name="mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.migs_ba_plant_associated_set = Slot(uri=MIXS.migs_ba_plant_associated_set, name="migs_ba_plant_associated_set", curie=MIXS.curie('migs_ba_plant_associated_set'),
                   model_uri=MIXS.migs_ba_plant_associated_set, domain=None, range=Optional[Union[Union[dict, MigsBaPlantAssociated], List[Union[dict, MigsBaPlantAssociated]]]])

slots.migs_ba_sediment_set = Slot(uri=MIXS.migs_ba_sediment_set, name="migs_ba_sediment_set", curie=MIXS.curie('migs_ba_sediment_set'),
                   model_uri=MIXS.migs_ba_sediment_set, domain=None, range=Optional[Union[Union[dict, MigsBaSediment], List[Union[dict, MigsBaSediment]]]])

slots.migs_ba_set = Slot(uri=MIXS.migs_ba_set, name="migs_ba_set", curie=MIXS.curie('migs_ba_set'),
                   model_uri=MIXS.migs_ba_set, domain=None, range=Optional[Union[Union[dict, MigsBa], List[Union[dict, MigsBa]]]])

slots.migs_ba_soil_set = Slot(uri=MIXS.migs_ba_soil_set, name="migs_ba_soil_set", curie=MIXS.curie('migs_ba_soil_set'),
                   model_uri=MIXS.migs_ba_soil_set, domain=None, range=Optional[Union[Union[dict, MigsBaSoil], List[Union[dict, MigsBaSoil]]]])

slots.migs_ba_water_set = Slot(uri=MIXS.migs_ba_water_set, name="migs_ba_water_set", curie=MIXS.curie('migs_ba_water_set'),
                   model_uri=MIXS.migs_ba_water_set, domain=None, range=Optional[Union[Union[dict, MigsBaWater], List[Union[dict, MigsBaWater]]]])

slots.mims_plant_associated_set = Slot(uri=MIXS.mims_plant_associated_set, name="mims_plant_associated_set", curie=MIXS.curie('mims_plant_associated_set'),
                   model_uri=MIXS.mims_plant_associated_set, domain=None, range=Optional[Union[Union[dict, MimsPlantAssociated], List[Union[dict, MimsPlantAssociated]]]])

slots.mims_sediment_set = Slot(uri=MIXS.mims_sediment_set, name="mims_sediment_set", curie=MIXS.curie('mims_sediment_set'),
                   model_uri=MIXS.mims_sediment_set, domain=None, range=Optional[Union[Union[dict, MimsSediment], List[Union[dict, MimsSediment]]]])

slots.mims_soil_set = Slot(uri=MIXS.mims_soil_set, name="mims_soil_set", curie=MIXS.curie('mims_soil_set'),
                   model_uri=MIXS.mims_soil_set, domain=None, range=Optional[Union[Union[dict, MimsSoil], List[Union[dict, MimsSoil]]]])

slots.mims_water_set = Slot(uri=MIXS.mims_water_set, name="mims_water_set", curie=MIXS.curie('mims_water_set'),
                   model_uri=MIXS.mims_water_set, domain=None, range=Optional[Union[Union[dict, MimsWater], List[Union[dict, MimsWater]]]])

slots.mineral_nutr_regm = Slot(uri=MIXS['0000570'], name="mineral_nutr_regm", curie=MIXS.curie('0000570'),
                   model_uri=MIXS.mineral_nutr_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.misc_param = Slot(uri=MIXS['0000752'], name="misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.misc_param, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.mode_transmission = Slot(uri=MIXS['0001312'], name="mode_transmission", curie=MIXS.curie('0001312'),
                   model_uri=MIXS.mode_transmission, domain=None, range=Optional[str])

slots.n_alkanes = Slot(uri=MIXS['0000503'], name="n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS.n_alkanes, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.neg_cont_type = Slot(uri=MIXS['0001321'], name="neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.nitrate = Slot(uri=MIXS['0000425'], name="nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.nitrate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.nitrite = Slot(uri=MIXS['0000426'], name="nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.nitrite, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.nitro = Slot(uri=MIXS['0000504'], name="nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS.nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.non_mineral_nutr_regm = Slot(uri=MIXS['0000571'], name="non_mineral_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS.non_mineral_nutr_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.nucl_acid_amp = Slot(uri=MIXS['0000038'], name="nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.nucl_acid_ext = Slot(uri=MIXS['0000037'], name="nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=MIXS.nucl_acid_ext_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.num_replicons = Slot(uri=MIXS['0000022'], name="num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS.num_replicons, domain=None, range=Optional[int])

slots.num_samp_collect = Slot(uri=MIXS['0001224'], name="num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=MIXS.num_samp_collect, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.number_contig = Slot(uri=MIXS['0000060'], name="number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.number_contig, domain=None, range=Optional[int])

slots.number_pets = Slot(uri=MIXS['0000231'], name="number_pets", curie=MIXS.curie('0000231'),
                   model_uri=MIXS.number_pets, domain=None, range=Optional[int])

slots.number_plants = Slot(uri=MIXS['0000230'], name="number_plants", curie=MIXS.curie('0000230'),
                   model_uri=MIXS.number_plants, domain=None, range=Optional[int])

slots.number_resident = Slot(uri=MIXS['0000232'], name="number_resident", curie=MIXS.curie('0000232'),
                   model_uri=MIXS.number_resident, domain=None, range=Optional[int])

slots.occup_density_samp = Slot(uri=MIXS['0000217'], name="occup_density_samp", curie=MIXS.curie('0000217'),
                   model_uri=MIXS.occup_density_samp, domain=None, range=Optional[str])

slots.occup_document = Slot(uri=MIXS['0000816'], name="occup_document", curie=MIXS.curie('0000816'),
                   model_uri=MIXS.occup_document, domain=None, range=Optional[str])

slots.occup_samp = Slot(uri=MIXS['0000772'], name="occup_samp", curie=MIXS.curie('0000772'),
                   model_uri=MIXS.occup_samp, domain=None, range=Optional[int])

slots.org_carb = Slot(uri=MIXS['0000508'], name="org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS.org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=MIXS.org_count_qpcr_info, domain=None, range=Optional[str])

slots.org_matter = Slot(uri=MIXS['0000204'], name="org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.org_matter, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.org_nitro = Slot(uri=MIXS['0000205'], name="org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.org_particles = Slot(uri=MIXS['0000665'], name="org_particles", curie=MIXS.curie('0000665'),
                   model_uri=MIXS.org_particles, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.organism_count = Slot(uri=MIXS['0000103'], name="organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.organism_count, domain=None, range=Optional[str])

slots.otu_class_appr = Slot(uri=MIXS['0000085'], name="otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=MIXS.otu_class_appr, domain=None, range=Optional[str])

slots.otu_db = Slot(uri=MIXS['0000087'], name="otu_db", curie=MIXS.curie('0000087'),
                   model_uri=MIXS.otu_db, domain=None, range=Optional[str])

slots.otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=MIXS.otu_seq_comp_appr, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.owc_tvdss = Slot(uri=MIXS['0000405'], name="owc_tvdss", curie=MIXS.curie('0000405'),
                   model_uri=MIXS.owc_tvdss, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.oxy_stat_samp = Slot(uri=MIXS['0000753'], name="oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.oxy_stat_samp, domain=None, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.oxygen = Slot(uri=MIXS['0000104'], name="oxygen", curie=MIXS.curie('0000104'),
                   model_uri=MIXS.oxygen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.part_org_carb = Slot(uri=MIXS['0000515'], name="part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS.part_org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.part_org_nitro = Slot(uri=MIXS['0000719'], name="part_org_nitro", curie=MIXS.curie('0000719'),
                   model_uri=MIXS.part_org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.part_plant_animal = Slot(uri=MIXS['0001149'], name="part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS.part_plant_animal, domain=None, range=Optional[str])

slots.particle_class = Slot(uri=MIXS['0000206'], name="particle_class", curie=MIXS.curie('0000206'),
                   model_uri=MIXS.particle_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.pathogenicity = Slot(uri=MIXS['0000027'], name="pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.pathogenicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.pcr_cond = Slot(uri=MIXS['0000049'], name="pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS.pcr_cond, domain=None, range=Optional[str])

slots.pcr_primers = Slot(uri=MIXS['0000046'], name="pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS.pcr_primers, domain=None, range=Optional[str])

slots.permeability = Slot(uri=MIXS['0000404'], name="permeability", curie=MIXS.curie('0000404'),
                   model_uri=MIXS.permeability, domain=None, range=Optional[str])

slots.perturbation = Slot(uri=MIXS['0000754'], name="perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.perturbation, domain=None, range=Optional[str])

slots.pesticide_regm = Slot(uri=MIXS['0000573'], name="pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS.pesticide_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.pet_farm_animal = Slot(uri=MIXS['0000267'], name="pet_farm_animal", curie=MIXS.curie('0000267'),
                   model_uri=MIXS.pet_farm_animal, domain=None, range=Optional[str])

slots.petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=MIXS.petroleum_hydrocarb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ph = Slot(uri=MIXS['0001001'], name="ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.ph, domain=None, range=Optional[float])

slots.ph_meth = Slot(uri=MIXS['0001106'], name="ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS.ph_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.ph_regm = Slot(uri=MIXS['0001056'], name="ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS.ph_regm, domain=None, range=Optional[str])

slots.phaeopigments = Slot(uri=MIXS['0000180'], name="phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=MIXS.phaeopigments, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.phosphate = Slot(uri=MIXS['0000505'], name="phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.phosphate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS.phosplipid_fatt_acid, domain=None, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*)'))

slots.photon_flux = Slot(uri=MIXS['0000725'], name="photon_flux", curie=MIXS.curie('0000725'),
                   model_uri=MIXS.photon_flux, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.photosynt_activ = Slot(uri=MIXS['0001296'], name="photosynt_activ", curie=MIXS.curie('0001296'),
                   model_uri=MIXS.photosynt_activ, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.photosynt_activ_meth = Slot(uri=MIXS['0001336'], name="photosynt_activ_meth", curie=MIXS.curie('0001336'),
                   model_uri=MIXS.photosynt_activ_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.plant_growth_med = Slot(uri=MIXS['0001057'], name="plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS.plant_growth_med, domain=None, range=Optional[str])

slots.plant_part_maturity = Slot(uri=MIXS['0001120'], name="plant_part_maturity", curie=MIXS.curie('0001120'),
                   model_uri=MIXS.plant_part_maturity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.plant_product = Slot(uri=MIXS['0001058'], name="plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS.plant_product, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.plant_reprod_crop = Slot(uri=MIXS['0001150'], name="plant_reprod_crop", curie=MIXS.curie('0001150'),
                   model_uri=MIXS.plant_reprod_crop, domain=None, range=Optional[str])

slots.plant_sex = Slot(uri=MIXS['0001059'], name="plant_sex", curie=MIXS.curie('0001059'),
                   model_uri=MIXS.plant_sex, domain=None, range=Optional[str])

slots.plant_struc = Slot(uri=MIXS['0001060'], name="plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS.plant_struc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.plant_water_method = Slot(uri=MIXS['0001111'], name="plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=MIXS.plant_water_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.ploidy = Slot(uri=MIXS['0000021'], name="ploidy", curie=MIXS.curie('0000021'),
                   model_uri=MIXS.ploidy, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.pollutants = Slot(uri=MIXS['0000107'], name="pollutants", curie=MIXS.curie('0000107'),
                   model_uri=MIXS.pollutants, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.pool_dna_extracts = Slot(uri=MIXS['0000325'], name="pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.pool_dna_extracts, domain=None, range=Optional[str])

slots.porosity = Slot(uri=MIXS['0000211'], name="porosity", curie=MIXS.curie('0000211'),
                   model_uri=MIXS.porosity, domain=None, range=Optional[str])

slots.pos_cont_type = Slot(uri=MIXS['0001322'], name="pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.pos_cont_type, domain=None, range=Optional[str])

slots.potassium = Slot(uri=MIXS['0000430'], name="potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.potassium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.pour_point = Slot(uri=MIXS['0000127'], name="pour_point", curie=MIXS.curie('0000127'),
                   model_uri=MIXS.pour_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.pre_treatment = Slot(uri=MIXS['0000348'], name="pre_treatment", curie=MIXS.curie('0000348'),
                   model_uri=MIXS.pre_treatment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.pred_genome_struc = Slot(uri=MIXS['0000083'], name="pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=MIXS.pred_genome_struc, domain=None, range=Optional[str])

slots.pred_genome_type = Slot(uri=MIXS['0000082'], name="pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=MIXS.pred_genome_type, domain=None, range=Optional[str])

slots.pregnancy = Slot(uri=MIXS['0000966'], name="pregnancy", curie=MIXS.curie('0000966'),
                   model_uri=MIXS.pregnancy, domain=None, range=Optional[str])

slots.pres_animal_insect = Slot(uri=MIXS['0000819'], name="pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=MIXS.pres_animal_insect, domain=None, range=Optional[str])

slots.pressure = Slot(uri=MIXS['0000412'], name="pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.pressure, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.previous_land_use = Slot(uri=MIXS['0000315'], name="previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS.previous_land_use, domain=None, range=Optional[str])

slots.previous_land_use_meth = Slot(uri=MIXS['0000316'], name="previous_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS.previous_land_use_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.primary_prod = Slot(uri=MIXS['0000728'], name="primary_prod", curie=MIXS.curie('0000728'),
                   model_uri=MIXS.primary_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.primary_treatment = Slot(uri=MIXS['0000349'], name="primary_treatment", curie=MIXS.curie('0000349'),
                   model_uri=MIXS.primary_treatment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.prod_rate = Slot(uri=MIXS['0000452'], name="prod_rate", curie=MIXS.curie('0000452'),
                   model_uri=MIXS.prod_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.prod_start_date = Slot(uri=MIXS['0001008'], name="prod_start_date", curie=MIXS.curie('0001008'),
                   model_uri=MIXS.prod_start_date, domain=None, range=Optional[str])

slots.profile_position = Slot(uri=MIXS['0001084'], name="profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS.profile_position, domain=None, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.project_name = Slot(uri=MIXS['0000092'], name="project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.project_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.propagation = Slot(uri=MIXS['0000033'], name="propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS.propagation, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.pulmonary_disord = Slot(uri=MIXS['0000269'], name="pulmonary_disord", curie=MIXS.curie('0000269'),
                   model_uri=MIXS.pulmonary_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.quad_pos = Slot(uri=MIXS['0000820'], name="quad_pos", curie=MIXS.curie('0000820'),
                   model_uri=MIXS.quad_pos, domain=None, range=Optional[str])

slots.radiation_regm = Slot(uri=MIXS['0000575'], name="radiation_regm", curie=MIXS.curie('0000575'),
                   model_uri=MIXS.radiation_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.rainfall_regm = Slot(uri=MIXS['0000576'], name="rainfall_regm", curie=MIXS.curie('0000576'),
                   model_uri=MIXS.rainfall_regm, domain=None, range=Optional[str])

slots.reactor_type = Slot(uri=MIXS['0000350'], name="reactor_type", curie=MIXS.curie('0000350'),
                   model_uri=MIXS.reactor_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.reassembly_bin = Slot(uri=MIXS['0000079'], name="reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS.reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.redox_potential = Slot(uri=MIXS['0000182'], name="redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=MIXS.redox_potential, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ref_biomaterial = Slot(uri=MIXS['0000025'], name="ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.ref_db = Slot(uri=MIXS['0000062'], name="ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.rel_air_humidity = Slot(uri=MIXS['0000121'], name="rel_air_humidity", curie=MIXS.curie('0000121'),
                   model_uri=MIXS.rel_air_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.rel_humidity_out = Slot(uri=MIXS['0000188'], name="rel_humidity_out", curie=MIXS.curie('0000188'),
                   model_uri=MIXS.rel_humidity_out, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.rel_location = Slot(uri=MIXS['0001161'], name="rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS.rel_location, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.rel_samp_loc = Slot(uri=MIXS['0000821'], name="rel_samp_loc", curie=MIXS.curie('0000821'),
                   model_uri=MIXS.rel_samp_loc, domain=None, range=Optional[str])

slots.rel_to_oxygen = Slot(uri=MIXS['0000015'], name="rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.rel_to_oxygen, domain=None, range=Optional[str])

slots.repository_name = Slot(uri=MIXS['0001152'], name="repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS.repository_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.reservoir = Slot(uri=MIXS['0000303'], name="reservoir", curie=MIXS.curie('0000303'),
                   model_uri=MIXS.reservoir, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.resins_pc = Slot(uri=MIXS['0000134'], name="resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=MIXS.resins_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.room_air_exch_rate = Slot(uri=MIXS['0000169'], name="room_air_exch_rate", curie=MIXS.curie('0000169'),
                   model_uri=MIXS.room_air_exch_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.room_architec_elem = Slot(uri=MIXS['0000233'], name="room_architec_elem", curie=MIXS.curie('0000233'),
                   model_uri=MIXS.room_architec_elem, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.room_condt = Slot(uri=MIXS['0000822'], name="room_condt", curie=MIXS.curie('0000822'),
                   model_uri=MIXS.room_condt, domain=None, range=Optional[str])

slots.room_connected = Slot(uri=MIXS['0000826'], name="room_connected", curie=MIXS.curie('0000826'),
                   model_uri=MIXS.room_connected, domain=None, range=Optional[str])

slots.room_count = Slot(uri=MIXS['0000234'], name="room_count", curie=MIXS.curie('0000234'),
                   model_uri=MIXS.room_count, domain=None, range=Optional[int])

slots.room_dim = Slot(uri=MIXS['0000192'], name="room_dim", curie=MIXS.curie('0000192'),
                   model_uri=MIXS.room_dim, domain=None, range=Optional[str])

slots.room_door_dist = Slot(uri=MIXS['0000193'], name="room_door_dist", curie=MIXS.curie('0000193'),
                   model_uri=MIXS.room_door_dist, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.room_door_share = Slot(uri=MIXS['0000242'], name="room_door_share", curie=MIXS.curie('0000242'),
                   model_uri=MIXS.room_door_share, domain=None, range=Optional[str])

slots.room_hallway = Slot(uri=MIXS['0000238'], name="room_hallway", curie=MIXS.curie('0000238'),
                   model_uri=MIXS.room_hallway, domain=None, range=Optional[str])

slots.room_loc = Slot(uri=MIXS['0000823'], name="room_loc", curie=MIXS.curie('0000823'),
                   model_uri=MIXS.room_loc, domain=None, range=Optional[str])

slots.room_moist_dam_hist = Slot(uri=MIXS['0000235'], name="room_moist_dam_hist", curie=MIXS.curie('0000235'),
                   model_uri=MIXS.room_moist_dam_hist, domain=None, range=Optional[int])

slots.room_net_area = Slot(uri=MIXS['0000194'], name="room_net_area", curie=MIXS.curie('0000194'),
                   model_uri=MIXS.room_net_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.room_occup = Slot(uri=MIXS['0000236'], name="room_occup", curie=MIXS.curie('0000236'),
                   model_uri=MIXS.room_occup, domain=None, range=Optional[int])

slots.room_samp_pos = Slot(uri=MIXS['0000824'], name="room_samp_pos", curie=MIXS.curie('0000824'),
                   model_uri=MIXS.room_samp_pos, domain=None, range=Optional[str])

slots.room_type = Slot(uri=MIXS['0000825'], name="room_type", curie=MIXS.curie('0000825'),
                   model_uri=MIXS.room_type, domain=None, range=Optional[str])

slots.room_vol = Slot(uri=MIXS['0000195'], name="room_vol", curie=MIXS.curie('0000195'),
                   model_uri=MIXS.room_vol, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.room_wall_share = Slot(uri=MIXS['0000243'], name="room_wall_share", curie=MIXS.curie('0000243'),
                   model_uri=MIXS.room_wall_share, domain=None, range=Optional[str])

slots.room_window_count = Slot(uri=MIXS['0000237'], name="room_window_count", curie=MIXS.curie('0000237'),
                   model_uri=MIXS.room_window_count, domain=None, range=Optional[int])

slots.root_cond = Slot(uri=MIXS['0001061'], name="root_cond", curie=MIXS.curie('0001061'),
                   model_uri=MIXS.root_cond, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.root_med_carbon = Slot(uri=MIXS['0000577'], name="root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=MIXS.root_med_carbon, domain=None, range=Optional[str])

slots.root_med_macronutr = Slot(uri=MIXS['0000578'], name="root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=MIXS.root_med_macronutr, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.root_med_micronutr = Slot(uri=MIXS['0000579'], name="root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=MIXS.root_med_micronutr, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.root_med_ph = Slot(uri=MIXS['0001062'], name="root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=MIXS.root_med_ph, domain=None, range=Optional[float])

slots.root_med_regl = Slot(uri=MIXS['0000581'], name="root_med_regl", curie=MIXS.curie('0000581'),
                   model_uri=MIXS.root_med_regl, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.root_med_solid = Slot(uri=MIXS['0001063'], name="root_med_solid", curie=MIXS.curie('0001063'),
                   model_uri=MIXS.root_med_solid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.root_med_suppl = Slot(uri=MIXS['0000580'], name="root_med_suppl", curie=MIXS.curie('0000580'),
                   model_uri=MIXS.root_med_suppl, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.route_transmission = Slot(uri=MIXS['0001316'], name="route_transmission", curie=MIXS.curie('0001316'),
                   model_uri=MIXS.route_transmission, domain=None, range=Optional[str])

slots.salinity = Slot(uri=MIXS['0000183'], name="salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.salinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.salinity_meth = Slot(uri=MIXS['0000341'], name="salinity_meth", curie=MIXS.curie('0000341'),
                   model_uri=MIXS.salinity_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.salt_regm = Slot(uri=MIXS['0000582'], name="salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS.salt_regm, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.samp_capt_status = Slot(uri=MIXS['0000860'], name="samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=MIXS.samp_capt_status, domain=None, range=Optional[str])

slots.samp_collect_point = Slot(uri=MIXS['0001015'], name="samp_collect_point", curie=MIXS.curie('0001015'),
                   model_uri=MIXS.samp_collect_point, domain=None, range=Optional[str])

slots.samp_dis_stage = Slot(uri=MIXS['0000249'], name="samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=MIXS.samp_dis_stage, domain=None, range=Optional[str])

slots.samp_floor = Slot(uri=MIXS['0000828'], name="samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=MIXS.samp_floor, domain=None, range=Optional[str])

slots.samp_loc_condition = Slot(uri=MIXS['0001257'], name="samp_loc_condition", curie=MIXS.curie('0001257'),
                   model_uri=MIXS.samp_loc_condition, domain=None, range=Optional[str])

slots.samp_loc_corr_rate = Slot(uri=MIXS['0000136'], name="samp_loc_corr_rate", curie=MIXS.curie('0000136'),
                   model_uri=MIXS.samp_loc_corr_rate, domain=None, range=Optional[str])

slots.samp_mat_process = Slot(uri=MIXS['0000016'], name="samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.samp_md = Slot(uri=MIXS['0000413'], name="samp_md", curie=MIXS.curie('0000413'),
                   model_uri=MIXS.samp_md, domain=None, range=Optional[str])

slots.samp_pooling = Slot(uri=MIXS['0001153'], name="samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.samp_pooling, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.samp_preserv = Slot(uri=MIXS['0000463'], name="samp_preserv", curie=MIXS.curie('0000463'),
                   model_uri=MIXS.samp_preserv, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_purpose = Slot(uri=MIXS['0001151'], name="samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS.samp_purpose, domain=None, range=Optional[str])

slots.samp_rep_biol = Slot(uri=MIXS['0001226'], name="samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=MIXS.samp_rep_biol, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_rep_tech = Slot(uri=MIXS['0001227'], name="samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=MIXS.samp_rep_tech, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_room_id = Slot(uri=MIXS['0000244'], name="samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=MIXS.samp_room_id, domain=None, range=Optional[int])

slots.samp_salinity = Slot(uri=MIXS['0000109'], name="samp_salinity", curie=MIXS.curie('0000109'),
                   model_uri=MIXS.samp_salinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_size = Slot(uri=MIXS['0000001'], name="samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_sort_meth = Slot(uri=MIXS['0000216'], name="samp_sort_meth", curie=MIXS.curie('0000216'),
                   model_uri=MIXS.samp_sort_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS.samp_source_mat_cat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.samp_stor_device = Slot(uri=MIXS['0001228'], name="samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS.samp_stor_device, domain=None, range=Optional[str])

slots.samp_stor_media = Slot(uri=MIXS['0001229'], name="samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS.samp_stor_media, domain=None, range=Optional[str])

slots.samp_store_dur = Slot(uri=MIXS['0000116'], name="samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.samp_store_dur, domain=None, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.samp_store_loc = Slot(uri=MIXS['0000755'], name="samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.samp_store_loc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.samp_store_sol = Slot(uri=MIXS['0001317'], name="samp_store_sol", curie=MIXS.curie('0001317'),
                   model_uri=MIXS.samp_store_sol, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.samp_store_temp = Slot(uri=MIXS['0000110'], name="samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.samp_store_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_subtype = Slot(uri=MIXS['0000999'], name="samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=MIXS.samp_subtype, domain=None, range=Optional[str])

slots.samp_surf_moisture = Slot(uri=MIXS['0001256'], name="samp_surf_moisture", curie=MIXS.curie('0001256'),
                   model_uri=MIXS.samp_surf_moisture, domain=None, range=Optional[str])

slots.samp_taxon_id = Slot(uri=MIXS['0001320'], name="samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.samp_taxon_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.samp_time_out = Slot(uri=MIXS['0000196'], name="samp_time_out", curie=MIXS.curie('0000196'),
                   model_uri=MIXS.samp_time_out, domain=None, range=Optional[str])

slots.samp_transport_cond = Slot(uri=MIXS['0000410'], name="samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=MIXS.samp_transport_cond, domain=None, range=Optional[str])

slots.samp_transport_cont = Slot(uri=MIXS['0001230'], name="samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=MIXS.samp_transport_cont, domain=None, range=Optional[str])

slots.samp_transport_dur = Slot(uri=MIXS['0001231'], name="samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=MIXS.samp_transport_dur, domain=None, range=Optional[str])

slots.samp_transport_temp = Slot(uri=MIXS['0001232'], name="samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=MIXS.samp_transport_temp, domain=None, range=Optional[str])

slots.samp_tvdss = Slot(uri=MIXS['0000409'], name="samp_tvdss", curie=MIXS.curie('0000409'),
                   model_uri=MIXS.samp_tvdss, domain=None, range=Optional[str])

slots.samp_type = Slot(uri=MIXS['0000998'], name="samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS.samp_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.samp_weather = Slot(uri=MIXS['0000827'], name="samp_weather", curie=MIXS.curie('0000827'),
                   model_uri=MIXS.samp_weather, domain=None, range=Optional[str])

slots.samp_well_name = Slot(uri=MIXS['0000296'], name="samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=MIXS.samp_well_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.saturates_pc = Slot(uri=MIXS['0000131'], name="saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=MIXS.saturates_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.season = Slot(uri=MIXS['0000829'], name="season", curie=MIXS.curie('0000829'),
                   model_uri=MIXS.season, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.season_environment = Slot(uri=MIXS['0001068'], name="season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS.season_environment, domain=None, range=Optional[str])

slots.season_humidity = Slot(uri=MIXS['0001148'], name="season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=MIXS.season_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.season_precpt = Slot(uri=MIXS['0000645'], name="season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS.season_precpt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.season_temp = Slot(uri=MIXS['0000643'], name="season_temp", curie=MIXS.curie('0000643'),
                   model_uri=MIXS.season_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.season_use = Slot(uri=MIXS['0000830'], name="season_use", curie=MIXS.curie('0000830'),
                   model_uri=MIXS.season_use, domain=None, range=Optional[str])

slots.secondary_treatment = Slot(uri=MIXS['0000351'], name="secondary_treatment", curie=MIXS.curie('0000351'),
                   model_uri=MIXS.secondary_treatment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.sediment_type = Slot(uri=MIXS['0001078'], name="sediment_type", curie=MIXS.curie('0001078'),
                   model_uri=MIXS.sediment_type, domain=None, range=Optional[str])

slots.seq_meth = Slot(uri=MIXS['0000050'], name="seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.seq_meth, domain=None, range=Optional[str])

slots.seq_quality_check = Slot(uri=MIXS['0000051'], name="seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS.seq_quality_check, domain=None, range=Optional[str])

slots.sequencing_kit = Slot(uri=MIXS['0001155'], name="sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS.sequencing_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.sequencing_location = Slot(uri=MIXS['0001156'], name="sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.sequencing_location, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.serovar_or_serotype = Slot(uri=MIXS['0001157'], name="serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=MIXS.serovar_or_serotype, domain=None, range=Optional[str])

slots.sewage_type = Slot(uri=MIXS['0000215'], name="sewage_type", curie=MIXS.curie('0000215'),
                   model_uri=MIXS.sewage_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.sexual_act = Slot(uri=MIXS['0000285'], name="sexual_act", curie=MIXS.curie('0000285'),
                   model_uri=MIXS.sexual_act, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.shad_dev_water_mold = Slot(uri=MIXS['0000834'], name="shad_dev_water_mold", curie=MIXS.curie('0000834'),
                   model_uri=MIXS.shad_dev_water_mold, domain=None, range=Optional[str])

slots.shading_device_cond = Slot(uri=MIXS['0000831'], name="shading_device_cond", curie=MIXS.curie('0000831'),
                   model_uri=MIXS.shading_device_cond, domain=None, range=Optional[str])

slots.shading_device_loc = Slot(uri=MIXS['0000832'], name="shading_device_loc", curie=MIXS.curie('0000832'),
                   model_uri=MIXS.shading_device_loc, domain=None, range=Optional[str])

slots.shading_device_mat = Slot(uri=MIXS['0000245'], name="shading_device_mat", curie=MIXS.curie('0000245'),
                   model_uri=MIXS.shading_device_mat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.shading_device_type = Slot(uri=MIXS['0000835'], name="shading_device_type", curie=MIXS.curie('0000835'),
                   model_uri=MIXS.shading_device_type, domain=None, range=Optional[str])

slots.sieving = Slot(uri=MIXS['0000322'], name="sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS.sieving, domain=None, range=Optional[str])

slots.silicate = Slot(uri=MIXS['0000184'], name="silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS.silicate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sim_search_meth = Slot(uri=MIXS['0000063'], name="sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=MIXS.single_cell_lysis_appr, domain=None, range=Optional[str])

slots.single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=MIXS.single_cell_lysis_prot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.size_frac = Slot(uri=MIXS['0000017'], name="size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.size_frac_low = Slot(uri=MIXS['0000735'], name="size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=MIXS.size_frac_low, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.size_frac_up = Slot(uri=MIXS['0000736'], name="size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=MIXS.size_frac_up, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.slope_aspect = Slot(uri=MIXS['0000647'], name="slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS.slope_aspect, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.slope_gradient = Slot(uri=MIXS['0000646'], name="slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS.slope_gradient, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sludge_retent_time = Slot(uri=MIXS['0000669'], name="sludge_retent_time", curie=MIXS.curie('0000669'),
                   model_uri=MIXS.sludge_retent_time, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.smoker = Slot(uri=MIXS['0000262'], name="smoker", curie=MIXS.curie('0000262'),
                   model_uri=MIXS.smoker, domain=None, range=Optional[Union[bool, Bool]])

slots.sodium = Slot(uri=MIXS['0000428'], name="sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.sodium, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soil_conductivity = Slot(uri=MIXS['0001158'], name="soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS.soil_conductivity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soil_cover = Slot(uri=MIXS['0001159'], name="soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS.soil_cover, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.soil_pH = Slot(uri=MIXS['0001160'], name="soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS.soil_pH, domain=None, range=Optional[float])

slots.soil_porosity = Slot(uri=MIXS['0001162'], name="soil_porosity", curie=MIXS.curie('0001162'),
                   model_uri=MIXS.soil_porosity, domain=None, range=Optional[str])

slots.soil_temp = Slot(uri=MIXS['0001163'], name="soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS.soil_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soil_texture_class = Slot(uri=MIXS['0001164'], name="soil_texture_class", curie=MIXS.curie('0001164'),
                   model_uri=MIXS.soil_texture_class, domain=None, range=Optional[str])

slots.soil_type = Slot(uri=MIXS['0000332'], name="soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS.soil_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.soil_type_meth = Slot(uri=MIXS['0000334'], name="soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS.soil_type_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.solar_irradiance = Slot(uri=MIXS['0000112'], name="solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=MIXS.solar_irradiance, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soluble_inorg_mat = Slot(uri=MIXS['0000672'], name="soluble_inorg_mat", curie=MIXS.curie('0000672'),
                   model_uri=MIXS.soluble_inorg_mat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soluble_org_mat = Slot(uri=MIXS['0000673'], name="soluble_org_mat", curie=MIXS.curie('0000673'),
                   model_uri=MIXS.soluble_org_mat, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.soluble_react_phosp = Slot(uri=MIXS['0000738'], name="soluble_react_phosp", curie=MIXS.curie('0000738'),
                   model_uri=MIXS.soluble_react_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sop = Slot(uri=MIXS['0000090'], name="sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.sort_tech = Slot(uri=MIXS['0000075'], name="sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS.sort_tech, domain=None, range=Optional[str])

slots.source_mat_id = Slot(uri=MIXS['0000026'], name="source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.source_uvig = Slot(uri=MIXS['0000035'], name="source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=MIXS.source_uvig, domain=None, range=Optional[str])

slots.space_typ_state = Slot(uri=MIXS['0000770'], name="space_typ_state", curie=MIXS.curie('0000770'),
                   model_uri=MIXS.space_typ_state, domain=None, range=Optional[str])

slots.spec_intended_cons = Slot(uri=MIXS['0001234'], name="spec_intended_cons", curie=MIXS.curie('0001234'),
                   model_uri=MIXS.spec_intended_cons, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.special_diet = Slot(uri=MIXS['0000905'], name="special_diet", curie=MIXS.curie('0000905'),
                   model_uri=MIXS.special_diet, domain=None, range=Optional[str])

slots.specific = Slot(uri=MIXS['0000836'], name="specific", curie=MIXS.curie('0000836'),
                   model_uri=MIXS.specific, domain=None, range=Optional[str])

slots.specific_host = Slot(uri=MIXS['0000029'], name="specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.specific_humidity = Slot(uri=MIXS['0000214'], name="specific_humidity", curie=MIXS.curie('0000214'),
                   model_uri=MIXS.specific_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.spikein_AMR = Slot(uri=MIXS['0001235'], name="spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=MIXS.spikein_AMR, domain=None, range=Optional[str])

slots.spikein_antibiotic = Slot(uri=MIXS['0001171'], name="spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=MIXS.spikein_antibiotic, domain=None, range=Optional[str])

slots.spikein_count = Slot(uri=MIXS['0001335'], name="spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=MIXS.spikein_count, domain=None, range=Optional[str])

slots.spikein_growth_med = Slot(uri=MIXS['0001169'], name="spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=MIXS.spikein_growth_med, domain=None, range=Optional[str])

slots.spikein_metal = Slot(uri=MIXS['0001172'], name="spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=MIXS.spikein_metal, domain=None, range=Optional[str])

slots.spikein_org = Slot(uri=MIXS['0001167'], name="spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=MIXS.spikein_org, domain=None, range=Optional[str])

slots.spikein_serovar = Slot(uri=MIXS['0001168'], name="spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=MIXS.spikein_serovar, domain=None, range=Optional[str])

slots.spikein_strain = Slot(uri=MIXS['0001170'], name="spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS.spikein_strain, domain=None, range=Optional[str])

slots.sr_dep_env = Slot(uri=MIXS['0000996'], name="sr_dep_env", curie=MIXS.curie('0000996'),
                   model_uri=MIXS.sr_dep_env, domain=None, range=Optional[str])

slots.sr_geol_age = Slot(uri=MIXS['0000997'], name="sr_geol_age", curie=MIXS.curie('0000997'),
                   model_uri=MIXS.sr_geol_age, domain=None, range=Optional[str])

slots.sr_kerog_type = Slot(uri=MIXS['0000994'], name="sr_kerog_type", curie=MIXS.curie('0000994'),
                   model_uri=MIXS.sr_kerog_type, domain=None, range=Optional[str])

slots.sr_lithology = Slot(uri=MIXS['0000995'], name="sr_lithology", curie=MIXS.curie('0000995'),
                   model_uri=MIXS.sr_lithology, domain=None, range=Optional[str])

slots.standing_water_regm = Slot(uri=MIXS['0001069'], name="standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS.standing_water_regm, domain=None, range=Optional[str])

slots.ster_meth_samp_room = Slot(uri=MIXS['0001259'], name="ster_meth_samp_room", curie=MIXS.curie('0001259'),
                   model_uri=MIXS.ster_meth_samp_room, domain=None, range=Optional[str])

slots.store_cond = Slot(uri=MIXS['0000327'], name="store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS.store_cond, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.study_complt_stat = Slot(uri=MIXS['0000898'], name="study_complt_stat", curie=MIXS.curie('0000898'),
                   model_uri=MIXS.study_complt_stat, domain=None, range=Optional[str])

slots.study_design = Slot(uri=MIXS['0001236'], name="study_design", curie=MIXS.curie('0001236'),
                   model_uri=MIXS.study_design, domain=None, range=Optional[str])

slots.study_inc_dur = Slot(uri=MIXS['0001237'], name="study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=MIXS.study_inc_dur, domain=None, range=Optional[str])

slots.study_inc_temp = Slot(uri=MIXS['0001238'], name="study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=MIXS.study_inc_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.study_timecourse = Slot(uri=MIXS['0001239'], name="study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=MIXS.study_timecourse, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.study_tmnt = Slot(uri=MIXS['0001240'], name="study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=MIXS.study_tmnt, domain=None, range=Optional[str])

slots.subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.subspecf_gen_lin, domain=None, range=Optional[str])

slots.substructure_type = Slot(uri=MIXS['0000767'], name="substructure_type", curie=MIXS.curie('0000767'),
                   model_uri=MIXS.substructure_type, domain=None, range=Optional[str])

slots.sulfate = Slot(uri=MIXS['0000423'], name="sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.sulfate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sulfate_fw = Slot(uri=MIXS['0000407'], name="sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS.sulfate_fw, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sulfide = Slot(uri=MIXS['0000424'], name="sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.sulfide, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.surf_air_cont = Slot(uri=MIXS['0000759'], name="surf_air_cont", curie=MIXS.curie('0000759'),
                   model_uri=MIXS.surf_air_cont, domain=None, range=Optional[str])

slots.surf_humidity = Slot(uri=MIXS['0000123'], name="surf_humidity", curie=MIXS.curie('0000123'),
                   model_uri=MIXS.surf_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.surf_material = Slot(uri=MIXS['0000758'], name="surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS.surf_material, domain=None, range=Optional[str])

slots.surf_moisture = Slot(uri=MIXS['0000128'], name="surf_moisture", curie=MIXS.curie('0000128'),
                   model_uri=MIXS.surf_moisture, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.surf_moisture_ph = Slot(uri=MIXS['0000760'], name="surf_moisture_ph", curie=MIXS.curie('0000760'),
                   model_uri=MIXS.surf_moisture_ph, domain=None, range=Optional[float])

slots.surf_temp = Slot(uri=MIXS['0000125'], name="surf_temp", curie=MIXS.curie('0000125'),
                   model_uri=MIXS.surf_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.suspend_part_matter = Slot(uri=MIXS['0000741'], name="suspend_part_matter", curie=MIXS.curie('0000741'),
                   model_uri=MIXS.suspend_part_matter, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.suspend_solids = Slot(uri=MIXS['0000150'], name="suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=MIXS.suspend_solids, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.sym_life_cycle_type = Slot(uri=MIXS['0001300'], name="sym_life_cycle_type", curie=MIXS.curie('0001300'),
                   model_uri=MIXS.sym_life_cycle_type, domain=None, range=Optional[str])

slots.symbiont_host_role = Slot(uri=MIXS['0001303'], name="symbiont_host_role", curie=MIXS.curie('0001303'),
                   model_uri=MIXS.symbiont_host_role, domain=None, range=Optional[str])

slots.tan = Slot(uri=MIXS['0000120'], name="tan", curie=MIXS.curie('0000120'),
                   model_uri=MIXS.tan, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.target_gene = Slot(uri=MIXS['0000044'], name="target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS.target_gene, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.target_subfragment = Slot(uri=MIXS['0000045'], name="target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS.target_subfragment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.tax_class = Slot(uri=MIXS['0000064'], name="tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.tax_ident = Slot(uri=MIXS['0000053'], name="tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.tax_ident, domain=None, range=Optional[str])

slots.temp = Slot(uri=MIXS['0000113'], name="temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.temp_out = Slot(uri=MIXS['0000197'], name="temp_out", curie=MIXS.curie('0000197'),
                   model_uri=MIXS.temp_out, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tertiary_treatment = Slot(uri=MIXS['0000352'], name="tertiary_treatment", curie=MIXS.curie('0000352'),
                   model_uri=MIXS.tertiary_treatment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.tidal_stage = Slot(uri=MIXS['0000750'], name="tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=MIXS.tidal_stage, domain=None, range=Optional[Union[str, "TIDALSTAGEENUM"]])

slots.tillage = Slot(uri=MIXS['0001081'], name="tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS.tillage, domain=None, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.time_last_toothbrush = Slot(uri=MIXS['0000924'], name="time_last_toothbrush", curie=MIXS.curie('0000924'),
                   model_uri=MIXS.time_last_toothbrush, domain=None, range=Optional[str])

slots.time_since_last_wash = Slot(uri=MIXS['0000943'], name="time_since_last_wash", curie=MIXS.curie('0000943'),
                   model_uri=MIXS.time_since_last_wash, domain=None, range=Optional[str])

slots.timepoint = Slot(uri=MIXS['0001173'], name="timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS.timepoint, domain=None, range=Optional[str])

slots.tiss_cult_growth_med = Slot(uri=MIXS['0001070'], name="tiss_cult_growth_med", curie=MIXS.curie('0001070'),
                   model_uri=MIXS.tiss_cult_growth_med, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.toluene = Slot(uri=MIXS['0000154'], name="toluene", curie=MIXS.curie('0000154'),
                   model_uri=MIXS.toluene, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_carb = Slot(uri=MIXS['0000525'], name="tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS.tot_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_depth_water_col = Slot(uri=MIXS['0000634'], name="tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=MIXS.tot_depth_water_col, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_diss_nitro = Slot(uri=MIXS['0000744'], name="tot_diss_nitro", curie=MIXS.curie('0000744'),
                   model_uri=MIXS.tot_diss_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_inorg_nitro = Slot(uri=MIXS['0000745'], name="tot_inorg_nitro", curie=MIXS.curie('0000745'),
                   model_uri=MIXS.tot_inorg_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_iron = Slot(uri=MIXS['0000105'], name="tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=MIXS.tot_iron, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_org_c_meth = Slot(uri=MIXS['0000337'], name="tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS.tot_org_c_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.tot_org_carb = Slot(uri=MIXS['0000533'], name="tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.tot_org_carb, domain=None, range=Optional[str])

slots.tot_part_carb = Slot(uri=MIXS['0000747'], name="tot_part_carb", curie=MIXS.curie('0000747'),
                   model_uri=MIXS.tot_part_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_phosp = Slot(uri=MIXS['0000117'], name="tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=MIXS.tot_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_phosphate = Slot(uri=MIXS['0000689'], name="tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=MIXS.tot_phosphate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tot_sulfur = Slot(uri=MIXS['0000419'], name="tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=MIXS.tot_sulfur, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.train_line = Slot(uri=MIXS['0000837'], name="train_line", curie=MIXS.curie('0000837'),
                   model_uri=MIXS.train_line, domain=None, range=Optional[str])

slots.train_stat_loc = Slot(uri=MIXS['0000838'], name="train_stat_loc", curie=MIXS.curie('0000838'),
                   model_uri=MIXS.train_stat_loc, domain=None, range=Optional[str])

slots.train_stop_loc = Slot(uri=MIXS['0000839'], name="train_stop_loc", curie=MIXS.curie('0000839'),
                   model_uri=MIXS.train_stop_loc, domain=None, range=Optional[str])

slots.travel_out_six_month = Slot(uri=MIXS['0000268'], name="travel_out_six_month", curie=MIXS.curie('0000268'),
                   model_uri=MIXS.travel_out_six_month, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.trna_ext_software = Slot(uri=MIXS['0000068'], name="trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS.trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.trnas = Slot(uri=MIXS['0000067'], name="trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS.trnas, domain=None, range=Optional[int])

slots.trophic_level = Slot(uri=MIXS['0000032'], name="trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.turbidity = Slot(uri=MIXS['0000191'], name="turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS.turbidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=MIXS.tvdss_of_hcr_press, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=MIXS.tvdss_of_hcr_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.twin_sibling = Slot(uri=MIXS['0000326'], name="twin_sibling", curie=MIXS.curie('0000326'),
                   model_uri=MIXS.twin_sibling, domain=None, range=Optional[Union[bool, Bool]])

slots.typ_occup_density = Slot(uri=MIXS['0000771'], name="typ_occup_density", curie=MIXS.curie('0000771'),
                   model_uri=MIXS.typ_occup_density, domain=None, range=Optional[float])

slots.type_of_symbiosis = Slot(uri=MIXS['0001307'], name="type_of_symbiosis", curie=MIXS.curie('0001307'),
                   model_uri=MIXS.type_of_symbiosis, domain=None, range=Optional[str])

slots.urine_collect_meth = Slot(uri=MIXS['0000899'], name="urine_collect_meth", curie=MIXS.curie('0000899'),
                   model_uri=MIXS.urine_collect_meth, domain=None, range=Optional[str])

slots.urogenit_disord = Slot(uri=MIXS['0000289'], name="urogenit_disord", curie=MIXS.curie('0000289'),
                   model_uri=MIXS.urogenit_disord, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.urogenit_tract_disor = Slot(uri=MIXS['0000278'], name="urogenit_tract_disor", curie=MIXS.curie('0000278'),
                   model_uri=MIXS.urogenit_tract_disor, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.ventilation_rate = Slot(uri=MIXS['0000114'], name="ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=MIXS.ventilation_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.ventilation_type = Slot(uri=MIXS['0000756'], name="ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS.ventilation_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.vfa = Slot(uri=MIXS['0000152'], name="vfa", curie=MIXS.curie('0000152'),
                   model_uri=MIXS.vfa, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.vfa_fw = Slot(uri=MIXS['0000408'], name="vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS.vfa_fw, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.vir_ident_software = Slot(uri=MIXS['0000081'], name="vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=MIXS.vir_ident_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.virus_enrich_appr = Slot(uri=MIXS['0000036'], name="virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS.virus_enrich_appr, domain=None, range=Optional[str])

slots.vis_media = Slot(uri=MIXS['0000840'], name="vis_media", curie=MIXS.curie('0000840'),
                   model_uri=MIXS.vis_media, domain=None, range=Optional[str])

slots.viscosity = Slot(uri=MIXS['0000126'], name="viscosity", curie=MIXS.curie('0000126'),
                   model_uri=MIXS.viscosity, domain=None, range=Optional[str])

slots.volatile_org_comp = Slot(uri=MIXS['0000115'], name="volatile_org_comp", curie=MIXS.curie('0000115'),
                   model_uri=MIXS.volatile_org_comp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.wall_area = Slot(uri=MIXS['0000198'], name="wall_area", curie=MIXS.curie('0000198'),
                   model_uri=MIXS.wall_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.wall_const_type = Slot(uri=MIXS['0000841'], name="wall_const_type", curie=MIXS.curie('0000841'),
                   model_uri=MIXS.wall_const_type, domain=None, range=Optional[str])

slots.wall_finish_mat = Slot(uri=MIXS['0000842'], name="wall_finish_mat", curie=MIXS.curie('0000842'),
                   model_uri=MIXS.wall_finish_mat, domain=None, range=Optional[str])

slots.wall_height = Slot(uri=MIXS['0000221'], name="wall_height", curie=MIXS.curie('0000221'),
                   model_uri=MIXS.wall_height, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.wall_loc = Slot(uri=MIXS['0000843'], name="wall_loc", curie=MIXS.curie('0000843'),
                   model_uri=MIXS.wall_loc, domain=None, range=Optional[str])

slots.wall_surf_treatment = Slot(uri=MIXS['0000845'], name="wall_surf_treatment", curie=MIXS.curie('0000845'),
                   model_uri=MIXS.wall_surf_treatment, domain=None, range=Optional[str])

slots.wall_texture = Slot(uri=MIXS['0000846'], name="wall_texture", curie=MIXS.curie('0000846'),
                   model_uri=MIXS.wall_texture, domain=None, range=Optional[str])

slots.wall_thermal_mass = Slot(uri=MIXS['0000222'], name="wall_thermal_mass", curie=MIXS.curie('0000222'),
                   model_uri=MIXS.wall_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.wall_water_mold = Slot(uri=MIXS['0000844'], name="wall_water_mold", curie=MIXS.curie('0000844'),
                   model_uri=MIXS.wall_water_mold, domain=None, range=Optional[str])

slots.wastewater_type = Slot(uri=MIXS['0000353'], name="wastewater_type", curie=MIXS.curie('0000353'),
                   model_uri=MIXS.wastewater_type, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.water_cont_soil_meth = Slot(uri=MIXS['0000323'], name="water_cont_soil_meth", curie=MIXS.curie('0000323'),
                   model_uri=MIXS.water_cont_soil_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.water_content = Slot(uri=MIXS['0000185'], name="water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS.water_content, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.water_current = Slot(uri=MIXS['0000203'], name="water_current", curie=MIXS.curie('0000203'),
                   model_uri=MIXS.water_current, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.water_cut = Slot(uri=MIXS['0000454'], name="water_cut", curie=MIXS.curie('0000454'),
                   model_uri=MIXS.water_cut, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.water_feat_size = Slot(uri=MIXS['0000223'], name="water_feat_size", curie=MIXS.curie('0000223'),
                   model_uri=MIXS.water_feat_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.water_feat_type = Slot(uri=MIXS['0000847'], name="water_feat_type", curie=MIXS.curie('0000847'),
                   model_uri=MIXS.water_feat_type, domain=None, range=Optional[str])

slots.water_frequency = Slot(uri=MIXS['0001174'], name="water_frequency", curie=MIXS.curie('0001174'),
                   model_uri=MIXS.water_frequency, domain=None, range=Optional[str])

slots.water_pH = Slot(uri=MIXS['0001175'], name="water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS.water_pH, domain=None, range=Optional[float])

slots.water_prod_rate = Slot(uri=MIXS['0000453'], name="water_prod_rate", curie=MIXS.curie('0000453'),
                   model_uri=MIXS.water_prod_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.water_source_adjac = Slot(uri=MIXS['0001122'], name="water_source_adjac", curie=MIXS.curie('0001122'),
                   model_uri=MIXS.water_source_adjac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.water_source_shared = Slot(uri=MIXS['0001176'], name="water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=MIXS.water_source_shared, domain=None, range=Optional[str])

slots.water_temp_regm = Slot(uri=MIXS['0000590'], name="water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS.water_temp_regm, domain=None, range=Optional[str])

slots.watering_regm = Slot(uri=MIXS['0000591'], name="watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS.watering_regm, domain=None, range=Optional[str])

slots.weekday = Slot(uri=MIXS['0000848'], name="weekday", curie=MIXS.curie('0000848'),
                   model_uri=MIXS.weekday, domain=None, range=Optional[str])

slots.weight_loss_3_month = Slot(uri=MIXS['0000295'], name="weight_loss_3_month", curie=MIXS.curie('0000295'),
                   model_uri=MIXS.weight_loss_3_month, domain=None, range=Optional[str])

slots.wga_amp_appr = Slot(uri=MIXS['0000055'], name="wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS.wga_amp_appr, domain=None, range=Optional[str])

slots.wga_amp_kit = Slot(uri=MIXS['0000006'], name="wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS.wga_amp_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.win = Slot(uri=MIXS['0000297'], name="win", curie=MIXS.curie('0000297'),
                   model_uri=MIXS.win, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.wind_direction = Slot(uri=MIXS['0000757'], name="wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS.wind_direction, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.wind_speed = Slot(uri=MIXS['0000118'], name="wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS.wind_speed, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.window_cond = Slot(uri=MIXS['0000849'], name="window_cond", curie=MIXS.curie('0000849'),
                   model_uri=MIXS.window_cond, domain=None, range=Optional[str])

slots.window_cover = Slot(uri=MIXS['0000850'], name="window_cover", curie=MIXS.curie('0000850'),
                   model_uri=MIXS.window_cover, domain=None, range=Optional[str])

slots.window_horiz_pos = Slot(uri=MIXS['0000851'], name="window_horiz_pos", curie=MIXS.curie('0000851'),
                   model_uri=MIXS.window_horiz_pos, domain=None, range=Optional[str])

slots.window_loc = Slot(uri=MIXS['0000852'], name="window_loc", curie=MIXS.curie('0000852'),
                   model_uri=MIXS.window_loc, domain=None, range=Optional[str])

slots.window_mat = Slot(uri=MIXS['0000853'], name="window_mat", curie=MIXS.curie('0000853'),
                   model_uri=MIXS.window_mat, domain=None, range=Optional[str])

slots.window_open_freq = Slot(uri=MIXS['0000246'], name="window_open_freq", curie=MIXS.curie('0000246'),
                   model_uri=MIXS.window_open_freq, domain=None, range=Optional[int])

slots.window_size = Slot(uri=MIXS['0000224'], name="window_size", curie=MIXS.curie('0000224'),
                   model_uri=MIXS.window_size, domain=None, range=Optional[str])

slots.window_status = Slot(uri=MIXS['0000855'], name="window_status", curie=MIXS.curie('0000855'),
                   model_uri=MIXS.window_status, domain=None, range=Optional[str])

slots.window_type = Slot(uri=MIXS['0000856'], name="window_type", curie=MIXS.curie('0000856'),
                   model_uri=MIXS.window_type, domain=None, range=Optional[str])

slots.window_vert_pos = Slot(uri=MIXS['0000857'], name="window_vert_pos", curie=MIXS.curie('0000857'),
                   model_uri=MIXS.window_vert_pos, domain=None, range=Optional[str])

slots.window_water_mold = Slot(uri=MIXS['0000854'], name="window_water_mold", curie=MIXS.curie('0000854'),
                   model_uri=MIXS.window_water_mold, domain=None, range=Optional[str])

slots.xylene = Slot(uri=MIXS['0000156'], name="xylene", curie=MIXS.curie('0000156'),
                   model_uri=MIXS.xylene, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_adapters = Slot(uri=MIXS['0000048'], name="Agriculture_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Agriculture_adapters, domain=Agriculture, range=str,
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Agriculture_adjacent_environment = Slot(uri=MIXS['0001121'], name="Agriculture_adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=MIXS.Agriculture_adjacent_environment, domain=Agriculture, range=Optional[str])

slots.Agriculture_agrochem_addition = Slot(uri=MIXS['0000639'], name="Agriculture_agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=MIXS.Agriculture_agrochem_addition, domain=Agriculture, range=Optional[str])

slots.Agriculture_ances_data = Slot(uri=MIXS['0000247'], name="Agriculture_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS.Agriculture_ances_data, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_anim_water_method = Slot(uri=MIXS['0001115'], name="Agriculture_anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=MIXS.Agriculture_anim_water_method, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_annot = Slot(uri=MIXS['0000059'], name="Agriculture_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Agriculture_annot, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_annual_precpt = Slot(uri=MIXS['0000644'], name="Agriculture_annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=MIXS.Agriculture_annual_precpt, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_annual_temp = Slot(uri=MIXS['0000642'], name="Agriculture_annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=MIXS.Agriculture_annual_temp, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_assembly_name = Slot(uri=MIXS['0000057'], name="Agriculture_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Agriculture_assembly_name, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Agriculture_assembly_qual = Slot(uri=MIXS['0000056'], name="Agriculture_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Agriculture_assembly_qual, domain=Agriculture, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.Agriculture_assembly_software = Slot(uri=MIXS['0000058'], name="Agriculture_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Agriculture_assembly_software, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Agriculture_biotic_relationship = Slot(uri=MIXS['0000028'], name="Agriculture_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.Agriculture_biotic_relationship, domain=Agriculture, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.Agriculture_chem_administration = Slot(uri=MIXS['0000751'], name="Agriculture_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.Agriculture_chem_administration, domain=Agriculture, range=str)

slots.Agriculture_chimera_check = Slot(uri=MIXS['0000052'], name="Agriculture_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS.Agriculture_chimera_check, domain=Agriculture, range=str)

slots.Agriculture_climate_environment = Slot(uri=MIXS['0001040'], name="Agriculture_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS.Agriculture_climate_environment, domain=Agriculture, range=Optional[str])

slots.Agriculture_crop_rotation = Slot(uri=MIXS['0000318'], name="Agriculture_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS.Agriculture_crop_rotation, domain=Agriculture, range=Optional[str])

slots.Agriculture_crop_yield = Slot(uri=MIXS['0001116'], name="Agriculture_crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=MIXS.Agriculture_crop_yield, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_cult_isol_date = Slot(uri=MIXS['0001181'], name="Agriculture_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.Agriculture_cult_isol_date, domain=Agriculture, range=Optional[str])

slots.Agriculture_cur_land_use = Slot(uri=MIXS['0001080'], name="Agriculture_cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=MIXS.Agriculture_cur_land_use, domain=Agriculture, range=Optional[Union[str, "CURLANDUSEENUM"]])

slots.Agriculture_cur_vegetation = Slot(uri=MIXS['0000312'], name="Agriculture_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS.Agriculture_cur_vegetation, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="Agriculture_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS.Agriculture_cur_vegetation_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_drainage_class = Slot(uri=MIXS['0001085'], name="Agriculture_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS.Agriculture_drainage_class, domain=Agriculture, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.Agriculture_elev = Slot(uri=MIXS['0000093'], name="Agriculture_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Agriculture_elev, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_enrichment_protocol = Slot(uri=MIXS['0001177'], name="Agriculture_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.Agriculture_enrichment_protocol, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.Agriculture_extreme_event = Slot(uri=MIXS['0000320'], name="Agriculture_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS.Agriculture_extreme_event, domain=Agriculture, range=Optional[str])

slots.Agriculture_fao_class = Slot(uri=MIXS['0001083'], name="Agriculture_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS.Agriculture_fao_class, domain=Agriculture, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.Agriculture_farm_equip = Slot(uri=MIXS['0001126'], name="Agriculture_farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=MIXS.Agriculture_farm_equip, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_farm_equip_san = Slot(uri=MIXS['0001124'], name="Agriculture_farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=MIXS.Agriculture_farm_equip_san, domain=Agriculture, range=Optional[str])

slots.Agriculture_farm_equip_shared = Slot(uri=MIXS['0001123'], name="Agriculture_farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=MIXS.Agriculture_farm_equip_shared, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_farm_water_source = Slot(uri=MIXS['0001110'], name="Agriculture_farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=MIXS.Agriculture_farm_water_source, domain=Agriculture, range=Optional[str])

slots.Agriculture_fertilizer_admin = Slot(uri=MIXS['0001127'], name="Agriculture_fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=MIXS.Agriculture_fertilizer_admin, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_fire = Slot(uri=MIXS['0001086'], name="Agriculture_fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS.Agriculture_fire, domain=Agriculture, range=Optional[str])

slots.Agriculture_flooding = Slot(uri=MIXS['0000319'], name="Agriculture_flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS.Agriculture_flooding, domain=Agriculture, range=Optional[str])

slots.Agriculture_food_harvest_proc = Slot(uri=MIXS['0001133'], name="Agriculture_food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=MIXS.Agriculture_food_harvest_proc, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_food_prod = Slot(uri=MIXS['0001211'], name="Agriculture_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS.Agriculture_food_prod, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_food_product_type = Slot(uri=MIXS['0001184'], name="Agriculture_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.Agriculture_food_product_type, domain=Agriculture, range=Optional[str])

slots.Agriculture_food_source = Slot(uri=MIXS['0001139'], name="Agriculture_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.Agriculture_food_source, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_food_trav_mode = Slot(uri=MIXS['0001137'], name="Agriculture_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.Agriculture_food_trav_mode, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_food_trav_vehic = Slot(uri=MIXS['0001138'], name="Agriculture_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.Agriculture_food_trav_vehic, domain=Agriculture, range=Optional[str])

slots.Agriculture_fungicide_regm = Slot(uri=MIXS['0000557'], name="Agriculture_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS.Agriculture_fungicide_regm, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_gaseous_environment = Slot(uri=MIXS['0000558'], name="Agriculture_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS.Agriculture_gaseous_environment, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_genetic_mod = Slot(uri=MIXS['0000859'], name="Agriculture_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.Agriculture_genetic_mod, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.Agriculture_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="Agriculture_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS.Agriculture_heavy_metals_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_herbicide_regm = Slot(uri=MIXS['0000561'], name="Agriculture_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS.Agriculture_herbicide_regm, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_horizon_meth = Slot(uri=MIXS['0000321'], name="Agriculture_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS.Agriculture_horizon_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_host_age = Slot(uri=MIXS['0000255'], name="Agriculture_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.Agriculture_host_age, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_common_name = Slot(uri=MIXS['0000248'], name="Agriculture_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS.Agriculture_host_common_name, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_disease_stat = Slot(uri=MIXS['0000031'], name="Agriculture_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.Agriculture_host_disease_stat, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.Agriculture_host_dry_mass = Slot(uri=MIXS['0000257'], name="Agriculture_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.Agriculture_host_dry_mass, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_genotype = Slot(uri=MIXS['0000365'], name="Agriculture_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.Agriculture_host_genotype, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_height = Slot(uri=MIXS['0000264'], name="Agriculture_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.Agriculture_host_height, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_length = Slot(uri=MIXS['0000256'], name="Agriculture_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.Agriculture_host_length, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_life_stage = Slot(uri=MIXS['0000251'], name="Agriculture_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS.Agriculture_host_life_stage, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_host_phenotype = Slot(uri=MIXS['0000874'], name="Agriculture_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.Agriculture_host_phenotype, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_host_spec_range = Slot(uri=MIXS['0000030'], name="Agriculture_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.Agriculture_host_spec_range, domain=Agriculture, range=str,
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.Agriculture_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="Agriculture_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS.Agriculture_host_subspecf_genlin, domain=Agriculture, range=Optional[str])

slots.Agriculture_host_taxid = Slot(uri=MIXS['0000250'], name="Agriculture_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.Agriculture_host_taxid, domain=Agriculture, range=int)

slots.Agriculture_host_tot_mass = Slot(uri=MIXS['0000263'], name="Agriculture_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.Agriculture_host_tot_mass, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_humidity = Slot(uri=MIXS['0000100'], name="Agriculture_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS.Agriculture_humidity, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_isol_growth_condt = Slot(uri=MIXS['0000003'], name="Agriculture_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.Agriculture_isol_growth_condt, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_lib_layout = Slot(uri=MIXS['0000041'], name="Agriculture_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Agriculture_lib_layout, domain=Agriculture, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Agriculture_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Agriculture_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Agriculture_lib_reads_seqd, domain=Agriculture, range=int)

slots.Agriculture_lib_screen = Slot(uri=MIXS['0000043'], name="Agriculture_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Agriculture_lib_screen, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_lib_size = Slot(uri=MIXS['0000039'], name="Agriculture_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Agriculture_lib_size, domain=Agriculture, range=Optional[int])

slots.Agriculture_lib_vector = Slot(uri=MIXS['0000042'], name="Agriculture_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Agriculture_lib_vector, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_library_prep_kit = Slot(uri=MIXS['0001145'], name="Agriculture_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.Agriculture_library_prep_kit, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_link_class_info = Slot(uri=MIXS['0000329'], name="Agriculture_link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=MIXS.Agriculture_link_class_info, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_link_climate_info = Slot(uri=MIXS['0000328'], name="Agriculture_link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=MIXS.Agriculture_link_climate_info, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_local_class = Slot(uri=MIXS['0000330'], name="Agriculture_local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS.Agriculture_local_class, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_local_class_meth = Slot(uri=MIXS['0000331'], name="Agriculture_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS.Agriculture_local_class_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_lot_number = Slot(uri=MIXS['0001147'], name="Agriculture_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.Agriculture_lot_number, domain=Agriculture, range=Optional[str])

slots.Agriculture_microbial_biomass = Slot(uri=MIXS['0000650'], name="Agriculture_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS.Agriculture_microbial_biomass, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_mid = Slot(uri=MIXS['0000047'], name="Agriculture_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Agriculture_mid, domain=Agriculture, range=str,
                   pattern=re.compile(r'[ACGT]+'))

slots.Agriculture_misc_param = Slot(uri=MIXS['0000752'], name="Agriculture_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.Agriculture_misc_param, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Agriculture_non_mineral_nutr_regm = Slot(uri=MIXS['0000571'], name="Agriculture_non_mineral_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS.Agriculture_non_mineral_nutr_regm, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Agriculture_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Agriculture_nucl_acid_amp, domain=Agriculture, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Agriculture_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Agriculture_nucl_acid_ext, domain=Agriculture, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_organism_count = Slot(uri=MIXS['0000103'], name="Agriculture_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.Agriculture_organism_count, domain=Agriculture, range=Optional[str])

slots.Agriculture_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Agriculture_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.Agriculture_oxy_stat_samp, domain=Agriculture, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Agriculture_pathogenicity = Slot(uri=MIXS['0000027'], name="Agriculture_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.Agriculture_pathogenicity, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_pcr_cond = Slot(uri=MIXS['0000049'], name="Agriculture_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS.Agriculture_pcr_cond, domain=Agriculture, range=str)

slots.Agriculture_pcr_primers = Slot(uri=MIXS['0000046'], name="Agriculture_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS.Agriculture_pcr_primers, domain=Agriculture, range=str)

slots.Agriculture_perturbation = Slot(uri=MIXS['0000754'], name="Agriculture_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.Agriculture_perturbation, domain=Agriculture, range=Optional[str])

slots.Agriculture_pesticide_regm = Slot(uri=MIXS['0000573'], name="Agriculture_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS.Agriculture_pesticide_regm, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_ph_meth = Slot(uri=MIXS['0001106'], name="Agriculture_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS.Agriculture_ph_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_ph_regm = Slot(uri=MIXS['0001056'], name="Agriculture_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS.Agriculture_ph_regm, domain=Agriculture, range=Optional[str])

slots.Agriculture_photosynt_activ = Slot(uri=MIXS['0001296'], name="Agriculture_photosynt_activ", curie=MIXS.curie('0001296'),
                   model_uri=MIXS.Agriculture_photosynt_activ, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_photosynt_activ_meth = Slot(uri=MIXS['0001336'], name="Agriculture_photosynt_activ_meth", curie=MIXS.curie('0001336'),
                   model_uri=MIXS.Agriculture_photosynt_activ_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.Agriculture_plant_growth_med = Slot(uri=MIXS['0001057'], name="Agriculture_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS.Agriculture_plant_growth_med, domain=Agriculture, range=Optional[str])

slots.Agriculture_plant_product = Slot(uri=MIXS['0001058'], name="Agriculture_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS.Agriculture_plant_product, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_plant_struc = Slot(uri=MIXS['0001060'], name="Agriculture_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS.Agriculture_plant_struc, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_plant_water_method = Slot(uri=MIXS['0001111'], name="Agriculture_plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=MIXS.Agriculture_plant_water_method, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="Agriculture_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.Agriculture_pool_dna_extracts, domain=Agriculture, range=str)

slots.Agriculture_porosity = Slot(uri=MIXS['0000211'], name="Agriculture_porosity", curie=MIXS.curie('0000211'),
                   model_uri=MIXS.Agriculture_porosity, domain=Agriculture, range=Optional[str])

slots.Agriculture_pres_animal_insect = Slot(uri=MIXS['0000819'], name="Agriculture_pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=MIXS.Agriculture_pres_animal_insect, domain=Agriculture, range=Optional[str])

slots.Agriculture_previous_land_use = Slot(uri=MIXS['0000315'], name="Agriculture_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS.Agriculture_previous_land_use, domain=Agriculture, range=Optional[str])

slots.Agriculture_previous_land_use_meth = Slot(uri=MIXS['0000316'], name="Agriculture_previous_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS.Agriculture_previous_land_use_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_profile_position = Slot(uri=MIXS['0001084'], name="Agriculture_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS.Agriculture_profile_position, domain=Agriculture, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.Agriculture_rel_location = Slot(uri=MIXS['0001161'], name="Agriculture_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS.Agriculture_rel_location, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_root_med_carbon = Slot(uri=MIXS['0000577'], name="Agriculture_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=MIXS.Agriculture_root_med_carbon, domain=Agriculture, range=Optional[str])

slots.Agriculture_root_med_macronutr = Slot(uri=MIXS['0000578'], name="Agriculture_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=MIXS.Agriculture_root_med_macronutr, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_root_med_ph = Slot(uri=MIXS['0001062'], name="Agriculture_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=MIXS.Agriculture_root_med_ph, domain=Agriculture, range=Optional[float])

slots.Agriculture_salt_regm = Slot(uri=MIXS['0000582'], name="Agriculture_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS.Agriculture_salt_regm, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_samp_mat_process = Slot(uri=MIXS['0000016'], name="Agriculture_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Agriculture_samp_mat_process, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_samp_pooling = Slot(uri=MIXS['0001153'], name="Agriculture_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.Agriculture_samp_pooling, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_samp_size = Slot(uri=MIXS['0000001'], name="Agriculture_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Agriculture_samp_size, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_samp_store_dur = Slot(uri=MIXS['0000116'], name="Agriculture_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.Agriculture_samp_store_dur, domain=Agriculture, range=str,
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_samp_store_loc = Slot(uri=MIXS['0000755'], name="Agriculture_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.Agriculture_samp_store_loc, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_samp_store_temp = Slot(uri=MIXS['0000110'], name="Agriculture_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.Agriculture_samp_store_temp, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Agriculture_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Agriculture_samp_vol_we_dna_ext, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_season = Slot(uri=MIXS['0000829'], name="Agriculture_season", curie=MIXS.curie('0000829'),
                   model_uri=MIXS.Agriculture_season, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_season_environment = Slot(uri=MIXS['0001068'], name="Agriculture_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS.Agriculture_season_environment, domain=Agriculture, range=Optional[str])

slots.Agriculture_season_humidity = Slot(uri=MIXS['0001148'], name="Agriculture_season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=MIXS.Agriculture_season_humidity, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_season_precpt = Slot(uri=MIXS['0000645'], name="Agriculture_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS.Agriculture_season_precpt, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_season_temp = Slot(uri=MIXS['0000643'], name="Agriculture_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=MIXS.Agriculture_season_temp, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_seq_meth = Slot(uri=MIXS['0000050'], name="Agriculture_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Agriculture_seq_meth, domain=Agriculture, range=str)

slots.Agriculture_seq_quality_check = Slot(uri=MIXS['0000051'], name="Agriculture_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS.Agriculture_seq_quality_check, domain=Agriculture, range=Optional[str])

slots.Agriculture_sequencing_location = Slot(uri=MIXS['0001156'], name="Agriculture_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.Agriculture_sequencing_location, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_sieving = Slot(uri=MIXS['0000322'], name="Agriculture_sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS.Agriculture_sieving, domain=Agriculture, range=str)

slots.Agriculture_size_frac_low = Slot(uri=MIXS['0000735'], name="Agriculture_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=MIXS.Agriculture_size_frac_low, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_size_frac_up = Slot(uri=MIXS['0000736'], name="Agriculture_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=MIXS.Agriculture_size_frac_up, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_slope_aspect = Slot(uri=MIXS['0000647'], name="Agriculture_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS.Agriculture_slope_aspect, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_slope_gradient = Slot(uri=MIXS['0000646'], name="Agriculture_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS.Agriculture_slope_gradient, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_soil_conductivity = Slot(uri=MIXS['0001158'], name="Agriculture_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS.Agriculture_soil_conductivity, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_soil_cover = Slot(uri=MIXS['0001159'], name="Agriculture_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS.Agriculture_soil_cover, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_soil_pH = Slot(uri=MIXS['0001160'], name="Agriculture_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS.Agriculture_soil_pH, domain=Agriculture, range=Optional[float])

slots.Agriculture_soil_temp = Slot(uri=MIXS['0001163'], name="Agriculture_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS.Agriculture_soil_temp, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_soil_type = Slot(uri=MIXS['0000332'], name="Agriculture_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS.Agriculture_soil_type, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Agriculture_soil_type_meth = Slot(uri=MIXS['0000334'], name="Agriculture_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS.Agriculture_soil_type_meth, domain=Agriculture, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_solar_irradiance = Slot(uri=MIXS['0000112'], name="Agriculture_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=MIXS.Agriculture_solar_irradiance, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_sop = Slot(uri=MIXS['0000090'], name="Agriculture_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Agriculture_sop, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Agriculture_source_mat_id = Slot(uri=MIXS['0000026'], name="Agriculture_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Agriculture_source_mat_id, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_specific_host = Slot(uri=MIXS['0000029'], name="Agriculture_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.Agriculture_specific_host, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.Agriculture_spikein_strain = Slot(uri=MIXS['0001170'], name="Agriculture_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS.Agriculture_spikein_strain, domain=Agriculture, range=Optional[str])

slots.Agriculture_standing_water_regm = Slot(uri=MIXS['0001069'], name="Agriculture_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS.Agriculture_standing_water_regm, domain=Agriculture, range=Optional[str])

slots.Agriculture_store_cond = Slot(uri=MIXS['0000327'], name="Agriculture_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS.Agriculture_store_cond, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Agriculture_target_gene = Slot(uri=MIXS['0000044'], name="Agriculture_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS.Agriculture_target_gene, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_target_subfragment = Slot(uri=MIXS['0000045'], name="Agriculture_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS.Agriculture_target_subfragment, domain=Agriculture, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Agriculture_temp = Slot(uri=MIXS['0000113'], name="Agriculture_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Agriculture_temp, domain=Agriculture, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_tillage = Slot(uri=MIXS['0001081'], name="Agriculture_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS.Agriculture_tillage, domain=Agriculture, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.Agriculture_tot_carb = Slot(uri=MIXS['0000525'], name="Agriculture_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS.Agriculture_tot_carb, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Agriculture_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="Agriculture_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS.Agriculture_tot_org_c_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Agriculture_tot_org_carb = Slot(uri=MIXS['0000533'], name="Agriculture_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.Agriculture_tot_org_carb, domain=Agriculture, range=Optional[str])

slots.Agriculture_trophic_level = Slot(uri=MIXS['0000032'], name="Agriculture_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.Agriculture_trophic_level, domain=Agriculture, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.Agriculture_water_pH = Slot(uri=MIXS['0001175'], name="Agriculture_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS.Agriculture_water_pH, domain=Agriculture, range=Optional[float])

slots.Agriculture_water_source_shared = Slot(uri=MIXS['0001176'], name="Agriculture_water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=MIXS.Agriculture_water_source_shared, domain=Agriculture, range=Optional[str])

slots.Agriculture_water_temp_regm = Slot(uri=MIXS['0000590'], name="Agriculture_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS.Agriculture_water_temp_regm, domain=Agriculture, range=Optional[str])

slots.Agriculture_watering_regm = Slot(uri=MIXS['0000591'], name="Agriculture_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS.Agriculture_watering_regm, domain=Agriculture, range=Optional[str])

slots.Air_air_pm_concen = Slot(uri=MIXS['0000108'], name="Air_air_pm_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS.Air_air_pm_concen, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_alt = Slot(uri=MIXS['0000094'], name="Air_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Air_alt, domain=Air, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_barometric_press = Slot(uri=MIXS['0000096'], name="Air_barometric_press", curie=MIXS.curie('0000096'),
                   model_uri=MIXS.Air_barometric_press, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_carb_dioxide = Slot(uri=MIXS['0000097'], name="Air_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS.Air_carb_dioxide, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_carb_monoxide = Slot(uri=MIXS['0000098'], name="Air_carb_monoxide", curie=MIXS.curie('0000098'),
                   model_uri=MIXS.Air_carb_monoxide, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_chem_administration = Slot(uri=MIXS['0000751'], name="Air_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.Air_chem_administration, domain=Air, range=Optional[str])

slots.Air_elev = Slot(uri=MIXS['0000093'], name="Air_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Air_elev, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_humidity = Slot(uri=MIXS['0000100'], name="Air_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS.Air_humidity, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_methane = Slot(uri=MIXS['0000101'], name="Air_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS.Air_methane, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_misc_param = Slot(uri=MIXS['0000752'], name="Air_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.Air_misc_param, domain=Air, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Air_organism_count = Slot(uri=MIXS['0000103'], name="Air_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.Air_organism_count, domain=Air, range=Optional[str])

slots.Air_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Air_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.Air_oxy_stat_samp, domain=Air, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Air_oxygen = Slot(uri=MIXS['0000104'], name="Air_oxygen", curie=MIXS.curie('0000104'),
                   model_uri=MIXS.Air_oxygen, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_perturbation = Slot(uri=MIXS['0000754'], name="Air_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.Air_perturbation, domain=Air, range=Optional[str])

slots.Air_pollutants = Slot(uri=MIXS['0000107'], name="Air_pollutants", curie=MIXS.curie('0000107'),
                   model_uri=MIXS.Air_pollutants, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_project_name = Slot(uri=MIXS['0000092'], name="Air_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Air_project_name, domain=Air, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Air_salinity = Slot(uri=MIXS['0000183'], name="Air_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.Air_salinity, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_samp_store_dur = Slot(uri=MIXS['0000116'], name="Air_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.Air_samp_store_dur, domain=Air, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Air_samp_store_loc = Slot(uri=MIXS['0000755'], name="Air_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.Air_samp_store_loc, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Air_samp_store_temp = Slot(uri=MIXS['0000110'], name="Air_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.Air_samp_store_temp, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Air_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Air_samp_vol_we_dna_ext, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_solar_irradiance = Slot(uri=MIXS['0000112'], name="Air_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=MIXS.Air_solar_irradiance, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_temp = Slot(uri=MIXS['0000113'], name="Air_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Air_temp, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_ventilation_rate = Slot(uri=MIXS['0000114'], name="Air_ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=MIXS.Air_ventilation_rate, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_ventilation_type = Slot(uri=MIXS['0000756'], name="Air_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS.Air_ventilation_type, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Air_volatile_org_comp = Slot(uri=MIXS['0000115'], name="Air_volatile_org_comp", curie=MIXS.curie('0000115'),
                   model_uri=MIXS.Air_volatile_org_comp, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Air_wind_direction = Slot(uri=MIXS['0000757'], name="Air_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS.Air_wind_direction, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Air_wind_speed = Slot(uri=MIXS['0000118'], name="Air_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS.Air_wind_speed, domain=Air, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_abs_air_humidity = Slot(uri=MIXS['0000122'], name="BuiltEnvironment_abs_air_humidity", curie=MIXS.curie('0000122'),
                   model_uri=MIXS.BuiltEnvironment_abs_air_humidity, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_address = Slot(uri=MIXS['0000218'], name="BuiltEnvironment_address", curie=MIXS.curie('0000218'),
                   model_uri=MIXS.BuiltEnvironment_address, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_adj_room = Slot(uri=MIXS['0000219'], name="BuiltEnvironment_adj_room", curie=MIXS.curie('0000219'),
                   model_uri=MIXS.BuiltEnvironment_adj_room, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_aero_struc = Slot(uri=MIXS['0000773'], name="BuiltEnvironment_aero_struc", curie=MIXS.curie('0000773'),
                   model_uri=MIXS.BuiltEnvironment_aero_struc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_air_temp = Slot(uri=MIXS['0000124'], name="BuiltEnvironment_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS.BuiltEnvironment_air_temp, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_amount_light = Slot(uri=MIXS['0000140'], name="BuiltEnvironment_amount_light", curie=MIXS.curie('0000140'),
                   model_uri=MIXS.BuiltEnvironment_amount_light, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_arch_struc = Slot(uri=MIXS['0000774'], name="BuiltEnvironment_arch_struc", curie=MIXS.curie('0000774'),
                   model_uri=MIXS.BuiltEnvironment_arch_struc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_avg_dew_point = Slot(uri=MIXS['0000141'], name="BuiltEnvironment_avg_dew_point", curie=MIXS.curie('0000141'),
                   model_uri=MIXS.BuiltEnvironment_avg_dew_point, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_avg_occup = Slot(uri=MIXS['0000775'], name="BuiltEnvironment_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS.BuiltEnvironment_avg_occup, domain=BuiltEnvironment, range=Optional[float])

slots.BuiltEnvironment_avg_temp = Slot(uri=MIXS['0000142'], name="BuiltEnvironment_avg_temp", curie=MIXS.curie('0000142'),
                   model_uri=MIXS.BuiltEnvironment_avg_temp, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_bathroom_count = Slot(uri=MIXS['0000776'], name="BuiltEnvironment_bathroom_count", curie=MIXS.curie('0000776'),
                   model_uri=MIXS.BuiltEnvironment_bathroom_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_bedroom_count = Slot(uri=MIXS['0000777'], name="BuiltEnvironment_bedroom_count", curie=MIXS.curie('0000777'),
                   model_uri=MIXS.BuiltEnvironment_bedroom_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_build_docs = Slot(uri=MIXS['0000787'], name="BuiltEnvironment_build_docs", curie=MIXS.curie('0000787'),
                   model_uri=MIXS.BuiltEnvironment_build_docs, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_build_occup_type = Slot(uri=MIXS['0000761'], name="BuiltEnvironment_build_occup_type", curie=MIXS.curie('0000761'),
                   model_uri=MIXS.BuiltEnvironment_build_occup_type, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_building_setting = Slot(uri=MIXS['0000768'], name="BuiltEnvironment_building_setting", curie=MIXS.curie('0000768'),
                   model_uri=MIXS.BuiltEnvironment_building_setting, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_built_struc_age = Slot(uri=MIXS['0000145'], name="BuiltEnvironment_built_struc_age", curie=MIXS.curie('0000145'),
                   model_uri=MIXS.BuiltEnvironment_built_struc_age, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_built_struc_set = Slot(uri=MIXS['0000778'], name="BuiltEnvironment_built_struc_set", curie=MIXS.curie('0000778'),
                   model_uri=MIXS.BuiltEnvironment_built_struc_set, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_built_struc_type = Slot(uri=MIXS['0000721'], name="BuiltEnvironment_built_struc_type", curie=MIXS.curie('0000721'),
                   model_uri=MIXS.BuiltEnvironment_built_struc_type, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_carb_dioxide = Slot(uri=MIXS['0000097'], name="BuiltEnvironment_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS.BuiltEnvironment_carb_dioxide, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_ceil_area = Slot(uri=MIXS['0000148'], name="BuiltEnvironment_ceil_area", curie=MIXS.curie('0000148'),
                   model_uri=MIXS.BuiltEnvironment_ceil_area, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_ceil_cond = Slot(uri=MIXS['0000779'], name="BuiltEnvironment_ceil_cond", curie=MIXS.curie('0000779'),
                   model_uri=MIXS.BuiltEnvironment_ceil_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ceil_finish_mat = Slot(uri=MIXS['0000780'], name="BuiltEnvironment_ceil_finish_mat", curie=MIXS.curie('0000780'),
                   model_uri=MIXS.BuiltEnvironment_ceil_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ceil_struc = Slot(uri=MIXS['0000782'], name="BuiltEnvironment_ceil_struc", curie=MIXS.curie('0000782'),
                   model_uri=MIXS.BuiltEnvironment_ceil_struc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ceil_texture = Slot(uri=MIXS['0000783'], name="BuiltEnvironment_ceil_texture", curie=MIXS.curie('0000783'),
                   model_uri=MIXS.BuiltEnvironment_ceil_texture, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ceil_thermal_mass = Slot(uri=MIXS['0000143'], name="BuiltEnvironment_ceil_thermal_mass", curie=MIXS.curie('0000143'),
                   model_uri=MIXS.BuiltEnvironment_ceil_thermal_mass, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_ceil_type = Slot(uri=MIXS['0000784'], name="BuiltEnvironment_ceil_type", curie=MIXS.curie('0000784'),
                   model_uri=MIXS.BuiltEnvironment_ceil_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ceil_water_mold = Slot(uri=MIXS['0000781'], name="BuiltEnvironment_ceil_water_mold", curie=MIXS.curie('0000781'),
                   model_uri=MIXS.BuiltEnvironment_ceil_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_cool_syst_id = Slot(uri=MIXS['0000785'], name="BuiltEnvironment_cool_syst_id", curie=MIXS.curie('0000785'),
                   model_uri=MIXS.BuiltEnvironment_cool_syst_id, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_date_last_rain = Slot(uri=MIXS['0000786'], name="BuiltEnvironment_date_last_rain", curie=MIXS.curie('0000786'),
                   model_uri=MIXS.BuiltEnvironment_date_last_rain, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_dew_point = Slot(uri=MIXS['0000129'], name="BuiltEnvironment_dew_point", curie=MIXS.curie('0000129'),
                   model_uri=MIXS.BuiltEnvironment_dew_point, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_door_comp_type = Slot(uri=MIXS['0000795'], name="BuiltEnvironment_door_comp_type", curie=MIXS.curie('0000795'),
                   model_uri=MIXS.BuiltEnvironment_door_comp_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_cond = Slot(uri=MIXS['0000788'], name="BuiltEnvironment_door_cond", curie=MIXS.curie('0000788'),
                   model_uri=MIXS.BuiltEnvironment_door_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_direct = Slot(uri=MIXS['0000789'], name="BuiltEnvironment_door_direct", curie=MIXS.curie('0000789'),
                   model_uri=MIXS.BuiltEnvironment_door_direct, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_loc = Slot(uri=MIXS['0000790'], name="BuiltEnvironment_door_loc", curie=MIXS.curie('0000790'),
                   model_uri=MIXS.BuiltEnvironment_door_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_mat = Slot(uri=MIXS['0000791'], name="BuiltEnvironment_door_mat", curie=MIXS.curie('0000791'),
                   model_uri=MIXS.BuiltEnvironment_door_mat, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_move = Slot(uri=MIXS['0000792'], name="BuiltEnvironment_door_move", curie=MIXS.curie('0000792'),
                   model_uri=MIXS.BuiltEnvironment_door_move, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_size = Slot(uri=MIXS['0000158'], name="BuiltEnvironment_door_size", curie=MIXS.curie('0000158'),
                   model_uri=MIXS.BuiltEnvironment_door_size, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_door_type = Slot(uri=MIXS['0000794'], name="BuiltEnvironment_door_type", curie=MIXS.curie('0000794'),
                   model_uri=MIXS.BuiltEnvironment_door_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_type_metal = Slot(uri=MIXS['0000796'], name="BuiltEnvironment_door_type_metal", curie=MIXS.curie('0000796'),
                   model_uri=MIXS.BuiltEnvironment_door_type_metal, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_type_wood = Slot(uri=MIXS['0000797'], name="BuiltEnvironment_door_type_wood", curie=MIXS.curie('0000797'),
                   model_uri=MIXS.BuiltEnvironment_door_type_wood, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_door_water_mold = Slot(uri=MIXS['0000793'], name="BuiltEnvironment_door_water_mold", curie=MIXS.curie('0000793'),
                   model_uri=MIXS.BuiltEnvironment_door_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_drawings = Slot(uri=MIXS['0000798'], name="BuiltEnvironment_drawings", curie=MIXS.curie('0000798'),
                   model_uri=MIXS.BuiltEnvironment_drawings, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_elevator = Slot(uri=MIXS['0000799'], name="BuiltEnvironment_elevator", curie=MIXS.curie('0000799'),
                   model_uri=MIXS.BuiltEnvironment_elevator, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_escalator = Slot(uri=MIXS['0000800'], name="BuiltEnvironment_escalator", curie=MIXS.curie('0000800'),
                   model_uri=MIXS.BuiltEnvironment_escalator, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_exp_duct = Slot(uri=MIXS['0000144'], name="BuiltEnvironment_exp_duct", curie=MIXS.curie('0000144'),
                   model_uri=MIXS.BuiltEnvironment_exp_duct, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_exp_pipe = Slot(uri=MIXS['0000220'], name="BuiltEnvironment_exp_pipe", curie=MIXS.curie('0000220'),
                   model_uri=MIXS.BuiltEnvironment_exp_pipe, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_ext_door = Slot(uri=MIXS['0000170'], name="BuiltEnvironment_ext_door", curie=MIXS.curie('0000170'),
                   model_uri=MIXS.BuiltEnvironment_ext_door, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_ext_wall_orient = Slot(uri=MIXS['0000817'], name="BuiltEnvironment_ext_wall_orient", curie=MIXS.curie('0000817'),
                   model_uri=MIXS.BuiltEnvironment_ext_wall_orient, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_ext_window_orient = Slot(uri=MIXS['0000818'], name="BuiltEnvironment_ext_window_orient", curie=MIXS.curie('0000818'),
                   model_uri=MIXS.BuiltEnvironment_ext_window_orient, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_filter_type = Slot(uri=MIXS['0000765'], name="BuiltEnvironment_filter_type", curie=MIXS.curie('0000765'),
                   model_uri=MIXS.BuiltEnvironment_filter_type, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_fireplace_type = Slot(uri=MIXS['0000802'], name="BuiltEnvironment_fireplace_type", curie=MIXS.curie('0000802'),
                   model_uri=MIXS.BuiltEnvironment_fireplace_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_floor_age = Slot(uri=MIXS['0000164'], name="BuiltEnvironment_floor_age", curie=MIXS.curie('0000164'),
                   model_uri=MIXS.BuiltEnvironment_floor_age, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_floor_area = Slot(uri=MIXS['0000165'], name="BuiltEnvironment_floor_area", curie=MIXS.curie('0000165'),
                   model_uri=MIXS.BuiltEnvironment_floor_area, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_floor_cond = Slot(uri=MIXS['0000803'], name="BuiltEnvironment_floor_cond", curie=MIXS.curie('0000803'),
                   model_uri=MIXS.BuiltEnvironment_floor_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_floor_count = Slot(uri=MIXS['0000225'], name="BuiltEnvironment_floor_count", curie=MIXS.curie('0000225'),
                   model_uri=MIXS.BuiltEnvironment_floor_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_floor_finish_mat = Slot(uri=MIXS['0000804'], name="BuiltEnvironment_floor_finish_mat", curie=MIXS.curie('0000804'),
                   model_uri=MIXS.BuiltEnvironment_floor_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_floor_struc = Slot(uri=MIXS['0000806'], name="BuiltEnvironment_floor_struc", curie=MIXS.curie('0000806'),
                   model_uri=MIXS.BuiltEnvironment_floor_struc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_floor_thermal_mass = Slot(uri=MIXS['0000166'], name="BuiltEnvironment_floor_thermal_mass", curie=MIXS.curie('0000166'),
                   model_uri=MIXS.BuiltEnvironment_floor_thermal_mass, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_floor_water_mold = Slot(uri=MIXS['0000805'], name="BuiltEnvironment_floor_water_mold", curie=MIXS.curie('0000805'),
                   model_uri=MIXS.BuiltEnvironment_floor_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_freq_clean = Slot(uri=MIXS['0000226'], name="BuiltEnvironment_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS.BuiltEnvironment_freq_clean, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_freq_cook = Slot(uri=MIXS['0000227'], name="BuiltEnvironment_freq_cook", curie=MIXS.curie('0000227'),
                   model_uri=MIXS.BuiltEnvironment_freq_cook, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_furniture = Slot(uri=MIXS['0000807'], name="BuiltEnvironment_furniture", curie=MIXS.curie('0000807'),
                   model_uri=MIXS.BuiltEnvironment_furniture, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_gender_restroom = Slot(uri=MIXS['0000808'], name="BuiltEnvironment_gender_restroom", curie=MIXS.curie('0000808'),
                   model_uri=MIXS.BuiltEnvironment_gender_restroom, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_hall_count = Slot(uri=MIXS['0000228'], name="BuiltEnvironment_hall_count", curie=MIXS.curie('0000228'),
                   model_uri=MIXS.BuiltEnvironment_hall_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_handidness = Slot(uri=MIXS['0000809'], name="BuiltEnvironment_handidness", curie=MIXS.curie('0000809'),
                   model_uri=MIXS.BuiltEnvironment_handidness, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_heat_cool_type = Slot(uri=MIXS['0000766'], name="BuiltEnvironment_heat_cool_type", curie=MIXS.curie('0000766'),
                   model_uri=MIXS.BuiltEnvironment_heat_cool_type, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_heat_deliv_loc = Slot(uri=MIXS['0000810'], name="BuiltEnvironment_heat_deliv_loc", curie=MIXS.curie('0000810'),
                   model_uri=MIXS.BuiltEnvironment_heat_deliv_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_heat_sys_deliv_meth = Slot(uri=MIXS['0000812'], name="BuiltEnvironment_heat_sys_deliv_meth", curie=MIXS.curie('0000812'),
                   model_uri=MIXS.BuiltEnvironment_heat_sys_deliv_meth, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_heat_system_id = Slot(uri=MIXS['0000833'], name="BuiltEnvironment_heat_system_id", curie=MIXS.curie('0000833'),
                   model_uri=MIXS.BuiltEnvironment_heat_system_id, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_height_carper_fiber = Slot(uri=MIXS['0000167'], name="BuiltEnvironment_height_carper_fiber", curie=MIXS.curie('0000167'),
                   model_uri=MIXS.BuiltEnvironment_height_carper_fiber, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_indoor_space = Slot(uri=MIXS['0000763'], name="BuiltEnvironment_indoor_space", curie=MIXS.curie('0000763'),
                   model_uri=MIXS.BuiltEnvironment_indoor_space, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_indoor_surf = Slot(uri=MIXS['0000764'], name="BuiltEnvironment_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS.BuiltEnvironment_indoor_surf, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_inside_lux = Slot(uri=MIXS['0000168'], name="BuiltEnvironment_inside_lux", curie=MIXS.curie('0000168'),
                   model_uri=MIXS.BuiltEnvironment_inside_lux, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_int_wall_cond = Slot(uri=MIXS['0000813'], name="BuiltEnvironment_int_wall_cond", curie=MIXS.curie('0000813'),
                   model_uri=MIXS.BuiltEnvironment_int_wall_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_last_clean = Slot(uri=MIXS['0000814'], name="BuiltEnvironment_last_clean", curie=MIXS.curie('0000814'),
                   model_uri=MIXS.BuiltEnvironment_last_clean, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_light_type = Slot(uri=MIXS['0000769'], name="BuiltEnvironment_light_type", curie=MIXS.curie('0000769'),
                   model_uri=MIXS.BuiltEnvironment_light_type, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_max_occup = Slot(uri=MIXS['0000229'], name="BuiltEnvironment_max_occup", curie=MIXS.curie('0000229'),
                   model_uri=MIXS.BuiltEnvironment_max_occup, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_mech_struc = Slot(uri=MIXS['0000815'], name="BuiltEnvironment_mech_struc", curie=MIXS.curie('0000815'),
                   model_uri=MIXS.BuiltEnvironment_mech_struc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_number_pets = Slot(uri=MIXS['0000231'], name="BuiltEnvironment_number_pets", curie=MIXS.curie('0000231'),
                   model_uri=MIXS.BuiltEnvironment_number_pets, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_number_plants = Slot(uri=MIXS['0000230'], name="BuiltEnvironment_number_plants", curie=MIXS.curie('0000230'),
                   model_uri=MIXS.BuiltEnvironment_number_plants, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_number_resident = Slot(uri=MIXS['0000232'], name="BuiltEnvironment_number_resident", curie=MIXS.curie('0000232'),
                   model_uri=MIXS.BuiltEnvironment_number_resident, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_occup_density_samp = Slot(uri=MIXS['0000217'], name="BuiltEnvironment_occup_density_samp", curie=MIXS.curie('0000217'),
                   model_uri=MIXS.BuiltEnvironment_occup_density_samp, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_occup_document = Slot(uri=MIXS['0000816'], name="BuiltEnvironment_occup_document", curie=MIXS.curie('0000816'),
                   model_uri=MIXS.BuiltEnvironment_occup_document, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_occup_samp = Slot(uri=MIXS['0000772'], name="BuiltEnvironment_occup_samp", curie=MIXS.curie('0000772'),
                   model_uri=MIXS.BuiltEnvironment_occup_samp, domain=BuiltEnvironment, range=int)

slots.BuiltEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="BuiltEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.BuiltEnvironment_organism_count, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_pres_animal_insect = Slot(uri=MIXS['0000819'], name="BuiltEnvironment_pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=MIXS.BuiltEnvironment_pres_animal_insect, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_project_name = Slot(uri=MIXS['0000092'], name="BuiltEnvironment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.BuiltEnvironment_project_name, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_quad_pos = Slot(uri=MIXS['0000820'], name="BuiltEnvironment_quad_pos", curie=MIXS.curie('0000820'),
                   model_uri=MIXS.BuiltEnvironment_quad_pos, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_rel_air_humidity = Slot(uri=MIXS['0000121'], name="BuiltEnvironment_rel_air_humidity", curie=MIXS.curie('0000121'),
                   model_uri=MIXS.BuiltEnvironment_rel_air_humidity, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_rel_humidity_out = Slot(uri=MIXS['0000188'], name="BuiltEnvironment_rel_humidity_out", curie=MIXS.curie('0000188'),
                   model_uri=MIXS.BuiltEnvironment_rel_humidity_out, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_rel_samp_loc = Slot(uri=MIXS['0000821'], name="BuiltEnvironment_rel_samp_loc", curie=MIXS.curie('0000821'),
                   model_uri=MIXS.BuiltEnvironment_rel_samp_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_air_exch_rate = Slot(uri=MIXS['0000169'], name="BuiltEnvironment_room_air_exch_rate", curie=MIXS.curie('0000169'),
                   model_uri=MIXS.BuiltEnvironment_room_air_exch_rate, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_room_architec_elem = Slot(uri=MIXS['0000233'], name="BuiltEnvironment_room_architec_elem", curie=MIXS.curie('0000233'),
                   model_uri=MIXS.BuiltEnvironment_room_architec_elem, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_room_condt = Slot(uri=MIXS['0000822'], name="BuiltEnvironment_room_condt", curie=MIXS.curie('0000822'),
                   model_uri=MIXS.BuiltEnvironment_room_condt, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_connected = Slot(uri=MIXS['0000826'], name="BuiltEnvironment_room_connected", curie=MIXS.curie('0000826'),
                   model_uri=MIXS.BuiltEnvironment_room_connected, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_count = Slot(uri=MIXS['0000234'], name="BuiltEnvironment_room_count", curie=MIXS.curie('0000234'),
                   model_uri=MIXS.BuiltEnvironment_room_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_room_dim = Slot(uri=MIXS['0000192'], name="BuiltEnvironment_room_dim", curie=MIXS.curie('0000192'),
                   model_uri=MIXS.BuiltEnvironment_room_dim, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_door_dist = Slot(uri=MIXS['0000193'], name="BuiltEnvironment_room_door_dist", curie=MIXS.curie('0000193'),
                   model_uri=MIXS.BuiltEnvironment_room_door_dist, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_room_door_share = Slot(uri=MIXS['0000242'], name="BuiltEnvironment_room_door_share", curie=MIXS.curie('0000242'),
                   model_uri=MIXS.BuiltEnvironment_room_door_share, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_hallway = Slot(uri=MIXS['0000238'], name="BuiltEnvironment_room_hallway", curie=MIXS.curie('0000238'),
                   model_uri=MIXS.BuiltEnvironment_room_hallway, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_loc = Slot(uri=MIXS['0000823'], name="BuiltEnvironment_room_loc", curie=MIXS.curie('0000823'),
                   model_uri=MIXS.BuiltEnvironment_room_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_moist_dam_hist = Slot(uri=MIXS['0000235'], name="BuiltEnvironment_room_moist_dam_hist", curie=MIXS.curie('0000235'),
                   model_uri=MIXS.BuiltEnvironment_room_moist_dam_hist, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_room_net_area = Slot(uri=MIXS['0000194'], name="BuiltEnvironment_room_net_area", curie=MIXS.curie('0000194'),
                   model_uri=MIXS.BuiltEnvironment_room_net_area, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_room_occup = Slot(uri=MIXS['0000236'], name="BuiltEnvironment_room_occup", curie=MIXS.curie('0000236'),
                   model_uri=MIXS.BuiltEnvironment_room_occup, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_room_samp_pos = Slot(uri=MIXS['0000824'], name="BuiltEnvironment_room_samp_pos", curie=MIXS.curie('0000824'),
                   model_uri=MIXS.BuiltEnvironment_room_samp_pos, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_type = Slot(uri=MIXS['0000825'], name="BuiltEnvironment_room_type", curie=MIXS.curie('0000825'),
                   model_uri=MIXS.BuiltEnvironment_room_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_vol = Slot(uri=MIXS['0000195'], name="BuiltEnvironment_room_vol", curie=MIXS.curie('0000195'),
                   model_uri=MIXS.BuiltEnvironment_room_vol, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_room_wall_share = Slot(uri=MIXS['0000243'], name="BuiltEnvironment_room_wall_share", curie=MIXS.curie('0000243'),
                   model_uri=MIXS.BuiltEnvironment_room_wall_share, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_room_window_count = Slot(uri=MIXS['0000237'], name="BuiltEnvironment_room_window_count", curie=MIXS.curie('0000237'),
                   model_uri=MIXS.BuiltEnvironment_room_window_count, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_samp_floor = Slot(uri=MIXS['0000828'], name="BuiltEnvironment_samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=MIXS.BuiltEnvironment_samp_floor, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_samp_room_id = Slot(uri=MIXS['0000244'], name="BuiltEnvironment_samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=MIXS.BuiltEnvironment_samp_room_id, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_samp_sort_meth = Slot(uri=MIXS['0000216'], name="BuiltEnvironment_samp_sort_meth", curie=MIXS.curie('0000216'),
                   model_uri=MIXS.BuiltEnvironment_samp_sort_meth, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_samp_time_out = Slot(uri=MIXS['0000196'], name="BuiltEnvironment_samp_time_out", curie=MIXS.curie('0000196'),
                   model_uri=MIXS.BuiltEnvironment_samp_time_out, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_samp_weather = Slot(uri=MIXS['0000827'], name="BuiltEnvironment_samp_weather", curie=MIXS.curie('0000827'),
                   model_uri=MIXS.BuiltEnvironment_samp_weather, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_season = Slot(uri=MIXS['0000829'], name="BuiltEnvironment_season", curie=MIXS.curie('0000829'),
                   model_uri=MIXS.BuiltEnvironment_season, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.BuiltEnvironment_season_use = Slot(uri=MIXS['0000830'], name="BuiltEnvironment_season_use", curie=MIXS.curie('0000830'),
                   model_uri=MIXS.BuiltEnvironment_season_use, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_shad_dev_water_mold = Slot(uri=MIXS['0000834'], name="BuiltEnvironment_shad_dev_water_mold", curie=MIXS.curie('0000834'),
                   model_uri=MIXS.BuiltEnvironment_shad_dev_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_shading_device_cond = Slot(uri=MIXS['0000831'], name="BuiltEnvironment_shading_device_cond", curie=MIXS.curie('0000831'),
                   model_uri=MIXS.BuiltEnvironment_shading_device_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_shading_device_loc = Slot(uri=MIXS['0000832'], name="BuiltEnvironment_shading_device_loc", curie=MIXS.curie('0000832'),
                   model_uri=MIXS.BuiltEnvironment_shading_device_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_shading_device_mat = Slot(uri=MIXS['0000245'], name="BuiltEnvironment_shading_device_mat", curie=MIXS.curie('0000245'),
                   model_uri=MIXS.BuiltEnvironment_shading_device_mat, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_shading_device_type = Slot(uri=MIXS['0000835'], name="BuiltEnvironment_shading_device_type", curie=MIXS.curie('0000835'),
                   model_uri=MIXS.BuiltEnvironment_shading_device_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_space_typ_state = Slot(uri=MIXS['0000770'], name="BuiltEnvironment_space_typ_state", curie=MIXS.curie('0000770'),
                   model_uri=MIXS.BuiltEnvironment_space_typ_state, domain=BuiltEnvironment, range=str)

slots.BuiltEnvironment_specific = Slot(uri=MIXS['0000836'], name="BuiltEnvironment_specific", curie=MIXS.curie('0000836'),
                   model_uri=MIXS.BuiltEnvironment_specific, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_specific_humidity = Slot(uri=MIXS['0000214'], name="BuiltEnvironment_specific_humidity", curie=MIXS.curie('0000214'),
                   model_uri=MIXS.BuiltEnvironment_specific_humidity, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_substructure_type = Slot(uri=MIXS['0000767'], name="BuiltEnvironment_substructure_type", curie=MIXS.curie('0000767'),
                   model_uri=MIXS.BuiltEnvironment_substructure_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_surf_air_cont = Slot(uri=MIXS['0000759'], name="BuiltEnvironment_surf_air_cont", curie=MIXS.curie('0000759'),
                   model_uri=MIXS.BuiltEnvironment_surf_air_cont, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_surf_humidity = Slot(uri=MIXS['0000123'], name="BuiltEnvironment_surf_humidity", curie=MIXS.curie('0000123'),
                   model_uri=MIXS.BuiltEnvironment_surf_humidity, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_surf_material = Slot(uri=MIXS['0000758'], name="BuiltEnvironment_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS.BuiltEnvironment_surf_material, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_surf_moisture = Slot(uri=MIXS['0000128'], name="BuiltEnvironment_surf_moisture", curie=MIXS.curie('0000128'),
                   model_uri=MIXS.BuiltEnvironment_surf_moisture, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_surf_moisture_ph = Slot(uri=MIXS['0000760'], name="BuiltEnvironment_surf_moisture_ph", curie=MIXS.curie('0000760'),
                   model_uri=MIXS.BuiltEnvironment_surf_moisture_ph, domain=BuiltEnvironment, range=Optional[float])

slots.BuiltEnvironment_surf_temp = Slot(uri=MIXS['0000125'], name="BuiltEnvironment_surf_temp", curie=MIXS.curie('0000125'),
                   model_uri=MIXS.BuiltEnvironment_surf_temp, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_temp_out = Slot(uri=MIXS['0000197'], name="BuiltEnvironment_temp_out", curie=MIXS.curie('0000197'),
                   model_uri=MIXS.BuiltEnvironment_temp_out, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_train_line = Slot(uri=MIXS['0000837'], name="BuiltEnvironment_train_line", curie=MIXS.curie('0000837'),
                   model_uri=MIXS.BuiltEnvironment_train_line, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_train_stat_loc = Slot(uri=MIXS['0000838'], name="BuiltEnvironment_train_stat_loc", curie=MIXS.curie('0000838'),
                   model_uri=MIXS.BuiltEnvironment_train_stat_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_train_stop_loc = Slot(uri=MIXS['0000839'], name="BuiltEnvironment_train_stop_loc", curie=MIXS.curie('0000839'),
                   model_uri=MIXS.BuiltEnvironment_train_stop_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_typ_occup_density = Slot(uri=MIXS['0000771'], name="BuiltEnvironment_typ_occup_density", curie=MIXS.curie('0000771'),
                   model_uri=MIXS.BuiltEnvironment_typ_occup_density, domain=BuiltEnvironment, range=float)

slots.BuiltEnvironment_ventilation_type = Slot(uri=MIXS['0000756'], name="BuiltEnvironment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS.BuiltEnvironment_ventilation_type, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_vis_media = Slot(uri=MIXS['0000840'], name="BuiltEnvironment_vis_media", curie=MIXS.curie('0000840'),
                   model_uri=MIXS.BuiltEnvironment_vis_media, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_area = Slot(uri=MIXS['0000198'], name="BuiltEnvironment_wall_area", curie=MIXS.curie('0000198'),
                   model_uri=MIXS.BuiltEnvironment_wall_area, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_wall_const_type = Slot(uri=MIXS['0000841'], name="BuiltEnvironment_wall_const_type", curie=MIXS.curie('0000841'),
                   model_uri=MIXS.BuiltEnvironment_wall_const_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_finish_mat = Slot(uri=MIXS['0000842'], name="BuiltEnvironment_wall_finish_mat", curie=MIXS.curie('0000842'),
                   model_uri=MIXS.BuiltEnvironment_wall_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_height = Slot(uri=MIXS['0000221'], name="BuiltEnvironment_wall_height", curie=MIXS.curie('0000221'),
                   model_uri=MIXS.BuiltEnvironment_wall_height, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_wall_loc = Slot(uri=MIXS['0000843'], name="BuiltEnvironment_wall_loc", curie=MIXS.curie('0000843'),
                   model_uri=MIXS.BuiltEnvironment_wall_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_surf_treatment = Slot(uri=MIXS['0000845'], name="BuiltEnvironment_wall_surf_treatment", curie=MIXS.curie('0000845'),
                   model_uri=MIXS.BuiltEnvironment_wall_surf_treatment, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_texture = Slot(uri=MIXS['0000846'], name="BuiltEnvironment_wall_texture", curie=MIXS.curie('0000846'),
                   model_uri=MIXS.BuiltEnvironment_wall_texture, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_wall_thermal_mass = Slot(uri=MIXS['0000222'], name="BuiltEnvironment_wall_thermal_mass", curie=MIXS.curie('0000222'),
                   model_uri=MIXS.BuiltEnvironment_wall_thermal_mass, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_wall_water_mold = Slot(uri=MIXS['0000844'], name="BuiltEnvironment_wall_water_mold", curie=MIXS.curie('0000844'),
                   model_uri=MIXS.BuiltEnvironment_wall_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_water_feat_size = Slot(uri=MIXS['0000223'], name="BuiltEnvironment_water_feat_size", curie=MIXS.curie('0000223'),
                   model_uri=MIXS.BuiltEnvironment_water_feat_size, domain=BuiltEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.BuiltEnvironment_water_feat_type = Slot(uri=MIXS['0000847'], name="BuiltEnvironment_water_feat_type", curie=MIXS.curie('0000847'),
                   model_uri=MIXS.BuiltEnvironment_water_feat_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_weekday = Slot(uri=MIXS['0000848'], name="BuiltEnvironment_weekday", curie=MIXS.curie('0000848'),
                   model_uri=MIXS.BuiltEnvironment_weekday, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_cond = Slot(uri=MIXS['0000849'], name="BuiltEnvironment_window_cond", curie=MIXS.curie('0000849'),
                   model_uri=MIXS.BuiltEnvironment_window_cond, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_cover = Slot(uri=MIXS['0000850'], name="BuiltEnvironment_window_cover", curie=MIXS.curie('0000850'),
                   model_uri=MIXS.BuiltEnvironment_window_cover, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_horiz_pos = Slot(uri=MIXS['0000851'], name="BuiltEnvironment_window_horiz_pos", curie=MIXS.curie('0000851'),
                   model_uri=MIXS.BuiltEnvironment_window_horiz_pos, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_loc = Slot(uri=MIXS['0000852'], name="BuiltEnvironment_window_loc", curie=MIXS.curie('0000852'),
                   model_uri=MIXS.BuiltEnvironment_window_loc, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_mat = Slot(uri=MIXS['0000853'], name="BuiltEnvironment_window_mat", curie=MIXS.curie('0000853'),
                   model_uri=MIXS.BuiltEnvironment_window_mat, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_open_freq = Slot(uri=MIXS['0000246'], name="BuiltEnvironment_window_open_freq", curie=MIXS.curie('0000246'),
                   model_uri=MIXS.BuiltEnvironment_window_open_freq, domain=BuiltEnvironment, range=Optional[int])

slots.BuiltEnvironment_window_size = Slot(uri=MIXS['0000224'], name="BuiltEnvironment_window_size", curie=MIXS.curie('0000224'),
                   model_uri=MIXS.BuiltEnvironment_window_size, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_status = Slot(uri=MIXS['0000855'], name="BuiltEnvironment_window_status", curie=MIXS.curie('0000855'),
                   model_uri=MIXS.BuiltEnvironment_window_status, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_type = Slot(uri=MIXS['0000856'], name="BuiltEnvironment_window_type", curie=MIXS.curie('0000856'),
                   model_uri=MIXS.BuiltEnvironment_window_type, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_vert_pos = Slot(uri=MIXS['0000857'], name="BuiltEnvironment_window_vert_pos", curie=MIXS.curie('0000857'),
                   model_uri=MIXS.BuiltEnvironment_window_vert_pos, domain=BuiltEnvironment, range=Optional[str])

slots.BuiltEnvironment_window_water_mold = Slot(uri=MIXS['0000854'], name="BuiltEnvironment_window_water_mold", curie=MIXS.curie('0000854'),
                   model_uri=MIXS.BuiltEnvironment_window_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.Checklist_adapters = Slot(uri=MIXS['0000048'], name="Checklist_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Checklist_adapters, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Checklist_alt = Slot(uri=MIXS['0000094'], name="Checklist_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Checklist_alt, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_annot = Slot(uri=MIXS['0000059'], name="Checklist_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Checklist_annot, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_assembly_name = Slot(uri=MIXS['0000057'], name="Checklist_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Checklist_assembly_name, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Checklist_assembly_qual = Slot(uri=MIXS['0000056'], name="Checklist_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Checklist_assembly_qual, domain=Checklist, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.Checklist_assembly_software = Slot(uri=MIXS['0000058'], name="Checklist_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Checklist_assembly_software, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_bin_param = Slot(uri=MIXS['0000077'], name="Checklist_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS.Checklist_bin_param, domain=Checklist, range=Optional[str])

slots.Checklist_bin_software = Slot(uri=MIXS['0000078'], name="Checklist_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS.Checklist_bin_software, domain=Checklist, range=Optional[str])

slots.Checklist_biotic_relationship = Slot(uri=MIXS['0000028'], name="Checklist_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.Checklist_biotic_relationship, domain=Checklist, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.Checklist_chimera_check = Slot(uri=MIXS['0000052'], name="Checklist_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS.Checklist_chimera_check, domain=Checklist, range=Optional[str])

slots.Checklist_collection_date = Slot(uri=MIXS['0000011'], name="Checklist_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.Checklist_collection_date, domain=Checklist, range=Optional[str])

slots.Checklist_compl_appr = Slot(uri=MIXS['0000071'], name="Checklist_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS.Checklist_compl_appr, domain=Checklist, range=Optional[str])

slots.Checklist_compl_score = Slot(uri=MIXS['0000069'], name="Checklist_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.Checklist_compl_score, domain=Checklist, range=Optional[str])

slots.Checklist_compl_software = Slot(uri=MIXS['0000070'], name="Checklist_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.Checklist_compl_software, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_contam_score = Slot(uri=MIXS['0000072'], name="Checklist_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS.Checklist_contam_score, domain=Checklist, range=Optional[str])

slots.Checklist_contam_screen_input = Slot(uri=MIXS['0000005'], name="Checklist_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS.Checklist_contam_screen_input, domain=Checklist, range=Optional[str])

slots.Checklist_contam_screen_param = Slot(uri=MIXS['0000073'], name="Checklist_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS.Checklist_contam_screen_param, domain=Checklist, range=Optional[str])

slots.Checklist_decontam_software = Slot(uri=MIXS['0000074'], name="Checklist_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS.Checklist_decontam_software, domain=Checklist, range=Optional[str])

slots.Checklist_detec_type = Slot(uri=MIXS['0000084'], name="Checklist_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=MIXS.Checklist_detec_type, domain=Checklist, range=Optional[str])

slots.Checklist_elev = Slot(uri=MIXS['0000093'], name="Checklist_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Checklist_elev, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_encoded_traits = Slot(uri=MIXS['0000034'], name="Checklist_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS.Checklist_encoded_traits, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_env_broad_scale = Slot(uri=MIXS['0000012'], name="Checklist_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.Checklist_env_broad_scale, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Checklist_env_local_scale = Slot(uri=MIXS['0000013'], name="Checklist_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.Checklist_env_local_scale, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Checklist_env_medium = Slot(uri=MIXS['0000014'], name="Checklist_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.Checklist_env_medium, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Checklist_estimated_size = Slot(uri=MIXS['0000024'], name="Checklist_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.Checklist_estimated_size, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.Checklist_experimental_factor = Slot(uri=MIXS['0000008'], name="Checklist_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.Checklist_experimental_factor, domain=Checklist, range=Optional[str])

slots.Checklist_extrachrom_elements = Slot(uri=MIXS['0000023'], name="Checklist_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.Checklist_extrachrom_elements, domain=Checklist, range=Optional[int])

slots.Checklist_feat_pred = Slot(uri=MIXS['0000061'], name="Checklist_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.Checklist_feat_pred, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_geo_loc_name = Slot(uri=MIXS['0000010'], name="Checklist_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.Checklist_geo_loc_name, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.Checklist_host_disease_stat = Slot(uri=MIXS['0000031'], name="Checklist_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.Checklist_host_disease_stat, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.Checklist_host_pred_appr = Slot(uri=MIXS['0000088'], name="Checklist_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=MIXS.Checklist_host_pred_appr, domain=Checklist, range=Optional[str])

slots.Checklist_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="Checklist_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=MIXS.Checklist_host_pred_est_acc, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_host_spec_range = Slot(uri=MIXS['0000030'], name="Checklist_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.Checklist_host_spec_range, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.Checklist_isol_growth_condt = Slot(uri=MIXS['0000003'], name="Checklist_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.Checklist_isol_growth_condt, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Checklist_lat_lon = Slot(uri=MIXS['0000009'], name="Checklist_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.Checklist_lat_lon, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.Checklist_lib_layout = Slot(uri=MIXS['0000041'], name="Checklist_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Checklist_lib_layout, domain=Checklist, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Checklist_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Checklist_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Checklist_lib_reads_seqd, domain=Checklist, range=Optional[int])

slots.Checklist_lib_screen = Slot(uri=MIXS['0000043'], name="Checklist_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Checklist_lib_screen, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_lib_size = Slot(uri=MIXS['0000039'], name="Checklist_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Checklist_lib_size, domain=Checklist, range=Optional[int])

slots.Checklist_lib_vector = Slot(uri=MIXS['0000042'], name="Checklist_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Checklist_lib_vector, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_mag_cov_software = Slot(uri=MIXS['0000080'], name="Checklist_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS.Checklist_mag_cov_software, domain=Checklist, range=Optional[str])

slots.Checklist_mid = Slot(uri=MIXS['0000047'], name="Checklist_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Checklist_mid, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.Checklist_neg_cont_type = Slot(uri=MIXS['0001321'], name="Checklist_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.Checklist_neg_cont_type, domain=Checklist, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.Checklist_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Checklist_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Checklist_nucl_acid_amp, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Checklist_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Checklist_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Checklist_nucl_acid_ext, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Checklist_num_replicons = Slot(uri=MIXS['0000022'], name="Checklist_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS.Checklist_num_replicons, domain=Checklist, range=Optional[int])

slots.Checklist_number_contig = Slot(uri=MIXS['0000060'], name="Checklist_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.Checklist_number_contig, domain=Checklist, range=Optional[int])

slots.Checklist_otu_class_appr = Slot(uri=MIXS['0000085'], name="Checklist_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=MIXS.Checklist_otu_class_appr, domain=Checklist, range=Optional[str])

slots.Checklist_otu_db = Slot(uri=MIXS['0000087'], name="Checklist_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=MIXS.Checklist_otu_db, domain=Checklist, range=Optional[str])

slots.Checklist_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="Checklist_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=MIXS.Checklist_otu_seq_comp_appr, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_pathogenicity = Slot(uri=MIXS['0000027'], name="Checklist_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.Checklist_pathogenicity, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_pcr_cond = Slot(uri=MIXS['0000049'], name="Checklist_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS.Checklist_pcr_cond, domain=Checklist, range=Optional[str])

slots.Checklist_pcr_primers = Slot(uri=MIXS['0000046'], name="Checklist_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS.Checklist_pcr_primers, domain=Checklist, range=Optional[str])

slots.Checklist_ploidy = Slot(uri=MIXS['0000021'], name="Checklist_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=MIXS.Checklist_ploidy, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Checklist_pos_cont_type = Slot(uri=MIXS['0001322'], name="Checklist_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.Checklist_pos_cont_type, domain=Checklist, range=Optional[str])

slots.Checklist_pred_genome_struc = Slot(uri=MIXS['0000083'], name="Checklist_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=MIXS.Checklist_pred_genome_struc, domain=Checklist, range=Optional[str])

slots.Checklist_pred_genome_type = Slot(uri=MIXS['0000082'], name="Checklist_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=MIXS.Checklist_pred_genome_type, domain=Checklist, range=Optional[str])

slots.Checklist_project_name = Slot(uri=MIXS['0000092'], name="Checklist_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Checklist_project_name, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_propagation = Slot(uri=MIXS['0000033'], name="Checklist_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS.Checklist_propagation, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_reassembly_bin = Slot(uri=MIXS['0000079'], name="Checklist_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS.Checklist_reassembly_bin, domain=Checklist, range=Optional[Union[bool, Bool]])

slots.Checklist_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Checklist_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.Checklist_ref_biomaterial, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Checklist_ref_db = Slot(uri=MIXS['0000062'], name="Checklist_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.Checklist_ref_db, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Checklist_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.Checklist_rel_to_oxygen, domain=Checklist, range=Optional[str])

slots.Checklist_samp_mat_process = Slot(uri=MIXS['0000016'], name="Checklist_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Checklist_samp_mat_process, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_samp_size = Slot(uri=MIXS['0000001'], name="Checklist_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Checklist_samp_size, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_samp_taxon_id = Slot(uri=MIXS['0001320'], name="Checklist_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.Checklist_samp_taxon_id, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.Checklist_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Checklist_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Checklist_samp_vol_we_dna_ext, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_seq_meth = Slot(uri=MIXS['0000050'], name="Checklist_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Checklist_seq_meth, domain=Checklist, range=Optional[str])

slots.Checklist_seq_quality_check = Slot(uri=MIXS['0000051'], name="Checklist_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS.Checklist_seq_quality_check, domain=Checklist, range=Optional[str])

slots.Checklist_sim_search_meth = Slot(uri=MIXS['0000063'], name="Checklist_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.Checklist_sim_search_meth, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="Checklist_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=MIXS.Checklist_single_cell_lysis_appr, domain=Checklist, range=Optional[str])

slots.Checklist_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="Checklist_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=MIXS.Checklist_single_cell_lysis_prot, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_size_frac = Slot(uri=MIXS['0000017'], name="Checklist_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.Checklist_size_frac, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_sop = Slot(uri=MIXS['0000090'], name="Checklist_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Checklist_sop, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Checklist_sort_tech = Slot(uri=MIXS['0000075'], name="Checklist_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS.Checklist_sort_tech, domain=Checklist, range=Optional[str])

slots.Checklist_source_mat_id = Slot(uri=MIXS['0000026'], name="Checklist_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Checklist_source_mat_id, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_source_uvig = Slot(uri=MIXS['0000035'], name="Checklist_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=MIXS.Checklist_source_uvig, domain=Checklist, range=Optional[str])

slots.Checklist_specific_host = Slot(uri=MIXS['0000029'], name="Checklist_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.Checklist_specific_host, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.Checklist_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="Checklist_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.Checklist_subspecf_gen_lin, domain=Checklist, range=Optional[str])

slots.Checklist_target_gene = Slot(uri=MIXS['0000044'], name="Checklist_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS.Checklist_target_gene, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_target_subfragment = Slot(uri=MIXS['0000045'], name="Checklist_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS.Checklist_target_subfragment, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_tax_class = Slot(uri=MIXS['0000064'], name="Checklist_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.Checklist_tax_class, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Checklist_tax_ident = Slot(uri=MIXS['0000053'], name="Checklist_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.Checklist_tax_ident, domain=Checklist, range=Optional[str])

slots.Checklist_temp = Slot(uri=MIXS['0000113'], name="Checklist_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Checklist_temp, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Checklist_trna_ext_software = Slot(uri=MIXS['0000068'], name="Checklist_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS.Checklist_trna_ext_software, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_trnas = Slot(uri=MIXS['0000067'], name="Checklist_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS.Checklist_trnas, domain=Checklist, range=Optional[int])

slots.Checklist_trophic_level = Slot(uri=MIXS['0000032'], name="Checklist_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.Checklist_trophic_level, domain=Checklist, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.Checklist_vir_ident_software = Slot(uri=MIXS['0000081'], name="Checklist_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=MIXS.Checklist_vir_ident_software, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Checklist_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="Checklist_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS.Checklist_virus_enrich_appr, domain=Checklist, range=Optional[str])

slots.Checklist_wga_amp_appr = Slot(uri=MIXS['0000055'], name="Checklist_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS.Checklist_wga_amp_appr, domain=Checklist, range=Optional[str])

slots.Checklist_wga_amp_kit = Slot(uri=MIXS['0000006'], name="Checklist_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS.Checklist_wga_amp_kit, domain=Checklist, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Database_migs_ba_plant_associated_set = Slot(uri=MIXS.migs_ba_plant_associated_set, name="Database_migs_ba_plant_associated_set", curie=MIXS.curie('migs_ba_plant_associated_set'),
                   model_uri=MIXS.Database_migs_ba_plant_associated_set, domain=Database, range=Optional[Union[Union[dict, "MigsBaPlantAssociated"], List[Union[dict, "MigsBaPlantAssociated"]]]])

slots.Database_migs_ba_sediment_set = Slot(uri=MIXS.migs_ba_sediment_set, name="Database_migs_ba_sediment_set", curie=MIXS.curie('migs_ba_sediment_set'),
                   model_uri=MIXS.Database_migs_ba_sediment_set, domain=Database, range=Optional[Union[Union[dict, "MigsBaSediment"], List[Union[dict, "MigsBaSediment"]]]])

slots.Database_migs_ba_set = Slot(uri=MIXS.migs_ba_set, name="Database_migs_ba_set", curie=MIXS.curie('migs_ba_set'),
                   model_uri=MIXS.Database_migs_ba_set, domain=Database, range=Optional[Union[Union[dict, "MigsBa"], List[Union[dict, "MigsBa"]]]])

slots.Database_migs_ba_soil_set = Slot(uri=MIXS.migs_ba_soil_set, name="Database_migs_ba_soil_set", curie=MIXS.curie('migs_ba_soil_set'),
                   model_uri=MIXS.Database_migs_ba_soil_set, domain=Database, range=Optional[Union[Union[dict, "MigsBaSoil"], List[Union[dict, "MigsBaSoil"]]]])

slots.Database_migs_ba_water_set = Slot(uri=MIXS.migs_ba_water_set, name="Database_migs_ba_water_set", curie=MIXS.curie('migs_ba_water_set'),
                   model_uri=MIXS.Database_migs_ba_water_set, domain=Database, range=Optional[Union[Union[dict, "MigsBaWater"], List[Union[dict, "MigsBaWater"]]]])

slots.Database_mims_plant_associated_set = Slot(uri=MIXS.mims_plant_associated_set, name="Database_mims_plant_associated_set", curie=MIXS.curie('mims_plant_associated_set'),
                   model_uri=MIXS.Database_mims_plant_associated_set, domain=Database, range=Optional[Union[Union[dict, "MimsPlantAssociated"], List[Union[dict, "MimsPlantAssociated"]]]])

slots.Database_mims_sediment_set = Slot(uri=MIXS.mims_sediment_set, name="Database_mims_sediment_set", curie=MIXS.curie('mims_sediment_set'),
                   model_uri=MIXS.Database_mims_sediment_set, domain=Database, range=Optional[Union[Union[dict, "MimsSediment"], List[Union[dict, "MimsSediment"]]]])

slots.Database_mims_soil_set = Slot(uri=MIXS.mims_soil_set, name="Database_mims_soil_set", curie=MIXS.curie('mims_soil_set'),
                   model_uri=MIXS.Database_mims_soil_set, domain=Database, range=Optional[Union[Union[dict, "MimsSoil"], List[Union[dict, "MimsSoil"]]]])

slots.Database_mims_water_set = Slot(uri=MIXS.mims_water_set, name="Database_mims_water_set", curie=MIXS.curie('mims_water_set'),
                   model_uri=MIXS.Database_mims_water_set, domain=Database, range=Optional[Union[Union[dict, "MimsWater"], List[Union[dict, "MimsWater"]]]])

slots.FoodAnimalAndAnimalFeed_HACCP_term = Slot(uri=MIXS['0001215'], name="FoodAnimalAndAnimalFeed_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_HACCP_term, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_IFSAC_category = Slot(uri=MIXS['0001179'], name="FoodAnimalAndAnimalFeed_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_IFSAC_category, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_am = Slot(uri=MIXS['0001243'], name="FoodAnimalAndAnimalFeed_animal_am", curie=MIXS.curie('0001243'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_am, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_am_dur = Slot(uri=MIXS['0001244'], name="FoodAnimalAndAnimalFeed_animal_am_dur", curie=MIXS.curie('0001244'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_am_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_animal_am_freq = Slot(uri=MIXS['0001245'], name="FoodAnimalAndAnimalFeed_animal_am_freq", curie=MIXS.curie('0001245'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_am_freq, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_am_route = Slot(uri=MIXS['0001246'], name="FoodAnimalAndAnimalFeed_animal_am_route", curie=MIXS.curie('0001246'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_am_route, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_am_use = Slot(uri=MIXS['0001247'], name="FoodAnimalAndAnimalFeed_animal_am_use", curie=MIXS.curie('0001247'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_am_use, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_body_cond = Slot(uri=MIXS['0001248'], name="FoodAnimalAndAnimalFeed_animal_body_cond", curie=MIXS.curie('0001248'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_body_cond, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_animal_diet = Slot(uri=MIXS['0001130'], name="FoodAnimalAndAnimalFeed_animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_diet, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_animal_feed_equip = Slot(uri=MIXS['0001113'], name="FoodAnimalAndAnimalFeed_animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_feed_equip, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_animal_group_size = Slot(uri=MIXS['0001129'], name="FoodAnimalAndAnimalFeed_animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_group_size, domain=FoodAnimalAndAnimalFeed, range=Optional[int])

slots.FoodAnimalAndAnimalFeed_animal_housing = Slot(uri=MIXS['0001180'], name="FoodAnimalAndAnimalFeed_animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_housing, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_animal_sex = Slot(uri=MIXS['0001249'], name="FoodAnimalAndAnimalFeed_animal_sex", curie=MIXS.curie('0001249'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_animal_sex, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_bacterial_density = Slot(uri=MIXS['0001194'], name="FoodAnimalAndAnimalFeed_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_bacterial_density, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="FoodAnimalAndAnimalFeed_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_coll_site_geo_feat, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_collection_date = Slot(uri=MIXS['0000011'], name="FoodAnimalAndAnimalFeed_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_collection_date, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="FoodAnimalAndAnimalFeed_cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cons_food_stor_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="FoodAnimalAndAnimalFeed_cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cons_food_stor_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cons_purch_date = Slot(uri=MIXS['0001197'], name="FoodAnimalAndAnimalFeed_cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cons_purch_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cons_qty_purchased = Slot(uri=MIXS['0001198'], name="FoodAnimalAndAnimalFeed_cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cons_qty_purchased, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_cult_isol_date = Slot(uri=MIXS['0001181'], name="FoodAnimalAndAnimalFeed_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cult_isol_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cult_result = Slot(uri=MIXS['0001117'], name="FoodAnimalAndAnimalFeed_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cult_result, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cult_result_org = Slot(uri=MIXS['0001118'], name="FoodAnimalAndAnimalFeed_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cult_result_org, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_cult_target = Slot(uri=MIXS['0001119'], name="FoodAnimalAndAnimalFeed_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_cult_target, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodAnimalAndAnimalFeed_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_enrichment_protocol, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodAnimalAndAnimalFeed_env_broad_scale = Slot(uri=MIXS['0000012'], name="FoodAnimalAndAnimalFeed_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_env_broad_scale, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_env_local_scale = Slot(uri=MIXS['0000013'], name="FoodAnimalAndAnimalFeed_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_env_local_scale, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_env_medium = Slot(uri=MIXS['0000014'], name="FoodAnimalAndAnimalFeed_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_env_medium, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodAnimalAndAnimalFeed_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_experimental_factor, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_additive = Slot(uri=MIXS['0001200'], name="FoodAnimalAndAnimalFeed_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_additive, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodAnimalAndAnimalFeed_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_contact_surf, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_contain_wrap = Slot(uri=MIXS['0001132'], name="FoodAnimalAndAnimalFeed_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_contain_wrap, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_cooking_proc = Slot(uri=MIXS['0001202'], name="FoodAnimalAndAnimalFeed_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_cooking_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_dis_point = Slot(uri=MIXS['0001203'], name="FoodAnimalAndAnimalFeed_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_dis_point, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_dis_point_city = Slot(uri=MIXS['0001204'], name="FoodAnimalAndAnimalFeed_food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_dis_point_city, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_ingredient = Slot(uri=MIXS['0001205'], name="FoodAnimalAndAnimalFeed_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_ingredient, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_origin = Slot(uri=MIXS['0001207'], name="FoodAnimalAndAnimalFeed_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_origin, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_food_pack_capacity = Slot(uri=MIXS['0001208'], name="FoodAnimalAndAnimalFeed_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_pack_capacity, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_food_pack_integrity = Slot(uri=MIXS['0001209'], name="FoodAnimalAndAnimalFeed_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_pack_integrity, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodAnimalAndAnimalFeed_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_pack_medium, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_preserv_proc = Slot(uri=MIXS['0001135'], name="FoodAnimalAndAnimalFeed_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_preserv_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_prior_contact = Slot(uri=MIXS['0001210'], name="FoodAnimalAndAnimalFeed_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_prior_contact, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_prod = Slot(uri=MIXS['0001211'], name="FoodAnimalAndAnimalFeed_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_prod, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_food_prod_synonym = Slot(uri=MIXS['0001212'], name="FoodAnimalAndAnimalFeed_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_prod_synonym, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodAnimalAndAnimalFeed_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_product_qual, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_food_product_type = Slot(uri=MIXS['0001184'], name="FoodAnimalAndAnimalFeed_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_product_type, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_food_quality_date = Slot(uri=MIXS['0001178'], name="FoodAnimalAndAnimalFeed_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_quality_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_source = Slot(uri=MIXS['0001139'], name="FoodAnimalAndAnimalFeed_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_source, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_food_source_age = Slot(uri=MIXS['0001251'], name="FoodAnimalAndAnimalFeed_food_source_age", curie=MIXS.curie('0001251'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_source_age, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_trace_list = Slot(uri=MIXS['0001214'], name="FoodAnimalAndAnimalFeed_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_trace_list, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_trav_mode = Slot(uri=MIXS['0001137'], name="FoodAnimalAndAnimalFeed_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_trav_mode, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_food_trav_vehic = Slot(uri=MIXS['0001138'], name="FoodAnimalAndAnimalFeed_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_trav_vehic, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_food_treat_proc = Slot(uri=MIXS['0001140'], name="FoodAnimalAndAnimalFeed_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_food_treat_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_geo_loc_name = Slot(uri=MIXS['0000010'], name="FoodAnimalAndAnimalFeed_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_geo_loc_name, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodAnimalAndAnimalFeed_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_intended_consumer, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_lat_lon = Slot(uri=MIXS['0000009'], name="FoodAnimalAndAnimalFeed_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_lat_lon, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.FoodAnimalAndAnimalFeed_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodAnimalAndAnimalFeed_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_library_prep_kit, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_lot_number = Slot(uri=MIXS['0001147'], name="FoodAnimalAndAnimalFeed_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_lot_number, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_microb_cult_med = Slot(uri=MIXS['0001216'], name="FoodAnimalAndAnimalFeed_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_microb_cult_med, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_misc_param = Slot(uri=MIXS['0000752'], name="FoodAnimalAndAnimalFeed_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_misc_param, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.FoodAnimalAndAnimalFeed_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodAnimalAndAnimalFeed_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_nucl_acid_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodAnimalAndAnimalFeed_organism_count = Slot(uri=MIXS['0000103'], name="FoodAnimalAndAnimalFeed_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_organism_count, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_part_plant_animal = Slot(uri=MIXS['0001149'], name="FoodAnimalAndAnimalFeed_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_part_plant_animal, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_perturbation = Slot(uri=MIXS['0000754'], name="FoodAnimalAndAnimalFeed_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_perturbation, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodAnimalAndAnimalFeed_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_pool_dna_extracts, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_project_name = Slot(uri=MIXS['0000092'], name="FoodAnimalAndAnimalFeed_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_project_name, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_repository_name = Slot(uri=MIXS['0001152'], name="FoodAnimalAndAnimalFeed_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_repository_name, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodAnimalAndAnimalFeed_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_pooling, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodAnimalAndAnimalFeed_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_purpose, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_samp_rep_biol = Slot(uri=MIXS['0001226'], name="FoodAnimalAndAnimalFeed_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_rep_biol, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_rep_tech = Slot(uri=MIXS['0001227'], name="FoodAnimalAndAnimalFeed_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_rep_tech, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_size = Slot(uri=MIXS['0000001'], name="FoodAnimalAndAnimalFeed_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_size, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodAnimalAndAnimalFeed_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_source_mat_cat, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodAnimalAndAnimalFeed_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodAnimalAndAnimalFeed_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_stor_device, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodAnimalAndAnimalFeed_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_stor_media, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodAnimalAndAnimalFeed_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_store_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.FoodAnimalAndAnimalFeed_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodAnimalAndAnimalFeed_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_store_loc, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_store_temp = Slot(uri=MIXS['0000110'], name="FoodAnimalAndAnimalFeed_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_store_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_samp_transport_cont = Slot(uri=MIXS['0001230'], name="FoodAnimalAndAnimalFeed_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_transport_cont, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_transport_dur = Slot(uri=MIXS['0001231'], name="FoodAnimalAndAnimalFeed_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_transport_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_transport_temp = Slot(uri=MIXS['0001232'], name="FoodAnimalAndAnimalFeed_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_transport_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_seq_meth = Slot(uri=MIXS['0000050'], name="FoodAnimalAndAnimalFeed_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_seq_meth, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_sequencing_kit = Slot(uri=MIXS['0001155'], name="FoodAnimalAndAnimalFeed_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_sequencing_kit, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_sequencing_location = Slot(uri=MIXS['0001156'], name="FoodAnimalAndAnimalFeed_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_sequencing_location, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="FoodAnimalAndAnimalFeed_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_serovar_or_serotype, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_AMR = Slot(uri=MIXS['0001235'], name="FoodAnimalAndAnimalFeed_spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_AMR, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="FoodAnimalAndAnimalFeed_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_antibiotic, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_count = Slot(uri=MIXS['0001335'], name="FoodAnimalAndAnimalFeed_spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_count, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_growth_med = Slot(uri=MIXS['0001169'], name="FoodAnimalAndAnimalFeed_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_growth_med, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_metal = Slot(uri=MIXS['0001172'], name="FoodAnimalAndAnimalFeed_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_metal, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_org = Slot(uri=MIXS['0001167'], name="FoodAnimalAndAnimalFeed_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_org, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_serovar = Slot(uri=MIXS['0001168'], name="FoodAnimalAndAnimalFeed_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_serovar, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_spikein_strain = Slot(uri=MIXS['0001170'], name="FoodAnimalAndAnimalFeed_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_spikein_strain, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_study_design = Slot(uri=MIXS['0001236'], name="FoodAnimalAndAnimalFeed_study_design", curie=MIXS.curie('0001236'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_study_design, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_study_inc_dur = Slot(uri=MIXS['0001237'], name="FoodAnimalAndAnimalFeed_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_study_inc_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_study_inc_temp = Slot(uri=MIXS['0001238'], name="FoodAnimalAndAnimalFeed_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_study_inc_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_study_timecourse = Slot(uri=MIXS['0001239'], name="FoodAnimalAndAnimalFeed_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_study_timecourse, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_study_tmnt = Slot(uri=MIXS['0001240'], name="FoodAnimalAndAnimalFeed_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_study_tmnt, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_temp = Slot(uri=MIXS['0000113'], name="FoodAnimalAndAnimalFeed_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodAnimalAndAnimalFeed_timepoint = Slot(uri=MIXS['0001173'], name="FoodAnimalAndAnimalFeed_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS.FoodAnimalAndAnimalFeed_timepoint, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodFarmEnvironment_IFSAC_category = Slot(uri=MIXS['0001179'], name="FoodFarmEnvironment_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS.FoodFarmEnvironment_IFSAC_category, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_adjacent_environment = Slot(uri=MIXS['0001121'], name="FoodFarmEnvironment_adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=MIXS.FoodFarmEnvironment_adjacent_environment, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_air_flow_impede = Slot(uri=MIXS['0001146'], name="FoodFarmEnvironment_air_flow_impede", curie=MIXS.curie('0001146'),
                   model_uri=MIXS.FoodFarmEnvironment_air_flow_impede, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_air_pm_concen = Slot(uri=MIXS['0000108'], name="FoodFarmEnvironment_air_pm_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS.FoodFarmEnvironment_air_pm_concen, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_ances_data = Slot(uri=MIXS['0000247'], name="FoodFarmEnvironment_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS.FoodFarmEnvironment_ances_data, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_anim_water_method = Slot(uri=MIXS['0001115'], name="FoodFarmEnvironment_anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=MIXS.FoodFarmEnvironment_anim_water_method, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_animal_diet = Slot(uri=MIXS['0001130'], name="FoodFarmEnvironment_animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=MIXS.FoodFarmEnvironment_animal_diet, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_animal_feed_equip = Slot(uri=MIXS['0001113'], name="FoodFarmEnvironment_animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=MIXS.FoodFarmEnvironment_animal_feed_equip, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_animal_group_size = Slot(uri=MIXS['0001129'], name="FoodFarmEnvironment_animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=MIXS.FoodFarmEnvironment_animal_group_size, domain=FoodFarmEnvironment, range=Optional[int])

slots.FoodFarmEnvironment_animal_housing = Slot(uri=MIXS['0001180'], name="FoodFarmEnvironment_animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=MIXS.FoodFarmEnvironment_animal_housing, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_animal_intrusion = Slot(uri=MIXS['0001114'], name="FoodFarmEnvironment_animal_intrusion", curie=MIXS.curie('0001114'),
                   model_uri=MIXS.FoodFarmEnvironment_animal_intrusion, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_biotic_regm = Slot(uri=MIXS['0001038'], name="FoodFarmEnvironment_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS.FoodFarmEnvironment_biotic_regm, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_chem_administration = Slot(uri=MIXS['0000751'], name="FoodFarmEnvironment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.FoodFarmEnvironment_chem_administration, domain=FoodFarmEnvironment, range=str)

slots.FoodFarmEnvironment_collection_date = Slot(uri=MIXS['0000011'], name="FoodFarmEnvironment_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.FoodFarmEnvironment_collection_date, domain=FoodFarmEnvironment, range=str)

slots.FoodFarmEnvironment_conduc = Slot(uri=MIXS['0000692'], name="FoodFarmEnvironment_conduc", curie=MIXS.curie('0000692'),
                   model_uri=MIXS.FoodFarmEnvironment_conduc, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_crop_rotation = Slot(uri=MIXS['0000318'], name="FoodFarmEnvironment_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS.FoodFarmEnvironment_crop_rotation, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_crop_yield = Slot(uri=MIXS['0001116'], name="FoodFarmEnvironment_crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=MIXS.FoodFarmEnvironment_crop_yield, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_cult_isol_date = Slot(uri=MIXS['0001181'], name="FoodFarmEnvironment_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.FoodFarmEnvironment_cult_isol_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_cult_result = Slot(uri=MIXS['0001117'], name="FoodFarmEnvironment_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS.FoodFarmEnvironment_cult_result, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_cult_result_org = Slot(uri=MIXS['0001118'], name="FoodFarmEnvironment_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS.FoodFarmEnvironment_cult_result_org, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_cult_target = Slot(uri=MIXS['0001119'], name="FoodFarmEnvironment_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS.FoodFarmEnvironment_cult_target, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_date_extr_weath = Slot(uri=MIXS['0001142'], name="FoodFarmEnvironment_date_extr_weath", curie=MIXS.curie('0001142'),
                   model_uri=MIXS.FoodFarmEnvironment_date_extr_weath, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodFarmEnvironment_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.FoodFarmEnvironment_enrichment_protocol, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodFarmEnvironment_env_broad_scale = Slot(uri=MIXS['0000012'], name="FoodFarmEnvironment_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.FoodFarmEnvironment_env_broad_scale, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_env_local_scale = Slot(uri=MIXS['0000013'], name="FoodFarmEnvironment_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.FoodFarmEnvironment_env_local_scale, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_env_medium = Slot(uri=MIXS['0000014'], name="FoodFarmEnvironment_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.FoodFarmEnvironment_env_medium, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_extr_weather_event = Slot(uri=MIXS['0001141'], name="FoodFarmEnvironment_extr_weather_event", curie=MIXS.curie('0001141'),
                   model_uri=MIXS.FoodFarmEnvironment_extr_weather_event, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_farm_equip = Slot(uri=MIXS['0001126'], name="FoodFarmEnvironment_farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=MIXS.FoodFarmEnvironment_farm_equip, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_farm_equip_san = Slot(uri=MIXS['0001124'], name="FoodFarmEnvironment_farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=MIXS.FoodFarmEnvironment_farm_equip_san, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_farm_equip_san_freq = Slot(uri=MIXS['0001125'], name="FoodFarmEnvironment_farm_equip_san_freq", curie=MIXS.curie('0001125'),
                   model_uri=MIXS.FoodFarmEnvironment_farm_equip_san_freq, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_farm_equip_shared = Slot(uri=MIXS['0001123'], name="FoodFarmEnvironment_farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=MIXS.FoodFarmEnvironment_farm_equip_shared, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_farm_water_source = Slot(uri=MIXS['0001110'], name="FoodFarmEnvironment_farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=MIXS.FoodFarmEnvironment_farm_water_source, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_fertilizer_admin = Slot(uri=MIXS['0001127'], name="FoodFarmEnvironment_fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=MIXS.FoodFarmEnvironment_fertilizer_admin, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_fertilizer_date = Slot(uri=MIXS['0001128'], name="FoodFarmEnvironment_fertilizer_date", curie=MIXS.curie('0001128'),
                   model_uri=MIXS.FoodFarmEnvironment_fertilizer_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_clean_proc = Slot(uri=MIXS['0001182'], name="FoodFarmEnvironment_food_clean_proc", curie=MIXS.curie('0001182'),
                   model_uri=MIXS.FoodFarmEnvironment_food_clean_proc, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodFarmEnvironment_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS.FoodFarmEnvironment_food_contact_surf, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_contain_wrap = Slot(uri=MIXS['0001132'], name="FoodFarmEnvironment_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS.FoodFarmEnvironment_food_contain_wrap, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_harvest_proc = Slot(uri=MIXS['0001133'], name="FoodFarmEnvironment_food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=MIXS.FoodFarmEnvironment_food_harvest_proc, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodFarmEnvironment_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS.FoodFarmEnvironment_food_pack_medium, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_preserv_proc = Slot(uri=MIXS['0001135'], name="FoodFarmEnvironment_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS.FoodFarmEnvironment_food_preserv_proc, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_prod_char = Slot(uri=MIXS['0001136'], name="FoodFarmEnvironment_food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=MIXS.FoodFarmEnvironment_food_prod_char, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_food_product_type = Slot(uri=MIXS['0001184'], name="FoodFarmEnvironment_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.FoodFarmEnvironment_food_product_type, domain=FoodFarmEnvironment, range=str)

slots.FoodFarmEnvironment_food_quality_date = Slot(uri=MIXS['0001178'], name="FoodFarmEnvironment_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS.FoodFarmEnvironment_food_quality_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_source = Slot(uri=MIXS['0001139'], name="FoodFarmEnvironment_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.FoodFarmEnvironment_food_source, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_food_trav_mode = Slot(uri=MIXS['0001137'], name="FoodFarmEnvironment_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.FoodFarmEnvironment_food_trav_mode, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_food_trav_vehic = Slot(uri=MIXS['0001138'], name="FoodFarmEnvironment_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.FoodFarmEnvironment_food_trav_vehic, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_food_treat_proc = Slot(uri=MIXS['0001140'], name="FoodFarmEnvironment_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS.FoodFarmEnvironment_food_treat_proc, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_genetic_mod = Slot(uri=MIXS['0000859'], name="FoodFarmEnvironment_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.FoodFarmEnvironment_genetic_mod, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodFarmEnvironment_geo_loc_name = Slot(uri=MIXS['0000010'], name="FoodFarmEnvironment_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.FoodFarmEnvironment_geo_loc_name, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_growth_habit = Slot(uri=MIXS['0001044'], name="FoodFarmEnvironment_growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=MIXS.FoodFarmEnvironment_growth_habit, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_growth_medium = Slot(uri=MIXS['0001108'], name="FoodFarmEnvironment_growth_medium", curie=MIXS.curie('0001108'),
                   model_uri=MIXS.FoodFarmEnvironment_growth_medium, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_age = Slot(uri=MIXS['0000255'], name="FoodFarmEnvironment_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.FoodFarmEnvironment_host_age, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_disease_stat = Slot(uri=MIXS['0000031'], name="FoodFarmEnvironment_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.FoodFarmEnvironment_host_disease_stat, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.FoodFarmEnvironment_host_dry_mass = Slot(uri=MIXS['0000257'], name="FoodFarmEnvironment_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.FoodFarmEnvironment_host_dry_mass, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_genotype = Slot(uri=MIXS['0000365'], name="FoodFarmEnvironment_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.FoodFarmEnvironment_host_genotype, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_height = Slot(uri=MIXS['0000264'], name="FoodFarmEnvironment_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.FoodFarmEnvironment_host_height, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_length = Slot(uri=MIXS['0000256'], name="FoodFarmEnvironment_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.FoodFarmEnvironment_host_length, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_host_phenotype = Slot(uri=MIXS['0000874'], name="FoodFarmEnvironment_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.FoodFarmEnvironment_host_phenotype, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="FoodFarmEnvironment_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS.FoodFarmEnvironment_host_subspecf_genlin, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_taxid = Slot(uri=MIXS['0000250'], name="FoodFarmEnvironment_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.FoodFarmEnvironment_host_taxid, domain=FoodFarmEnvironment, range=Optional[int])

slots.FoodFarmEnvironment_host_tot_mass = Slot(uri=MIXS['0000263'], name="FoodFarmEnvironment_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.FoodFarmEnvironment_host_tot_mass, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_humidity = Slot(uri=MIXS['0000100'], name="FoodFarmEnvironment_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS.FoodFarmEnvironment_humidity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodFarmEnvironment_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS.FoodFarmEnvironment_intended_consumer, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_lat_lon = Slot(uri=MIXS['0000009'], name="FoodFarmEnvironment_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.FoodFarmEnvironment_lat_lon, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.FoodFarmEnvironment_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodFarmEnvironment_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.FoodFarmEnvironment_library_prep_kit, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_lot_number = Slot(uri=MIXS['0001147'], name="FoodFarmEnvironment_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.FoodFarmEnvironment_lot_number, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_mechanical_damage = Slot(uri=MIXS['0001052'], name="FoodFarmEnvironment_mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=MIXS.FoodFarmEnvironment_mechanical_damage, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_misc_param = Slot(uri=MIXS['0000752'], name="FoodFarmEnvironment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.FoodFarmEnvironment_misc_param, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.FoodFarmEnvironment_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodFarmEnvironment_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.FoodFarmEnvironment_nucl_acid_ext, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFarmEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="FoodFarmEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.FoodFarmEnvironment_organism_count, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_part_plant_animal = Slot(uri=MIXS['0001149'], name="FoodFarmEnvironment_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS.FoodFarmEnvironment_part_plant_animal, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_perturbation = Slot(uri=MIXS['0000754'], name="FoodFarmEnvironment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.FoodFarmEnvironment_perturbation, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_ph = Slot(uri=MIXS['0001001'], name="FoodFarmEnvironment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.FoodFarmEnvironment_ph, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_ph_meth = Slot(uri=MIXS['0001106'], name="FoodFarmEnvironment_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS.FoodFarmEnvironment_ph_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFarmEnvironment_plant_growth_med = Slot(uri=MIXS['0001057'], name="FoodFarmEnvironment_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS.FoodFarmEnvironment_plant_growth_med, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_plant_part_maturity = Slot(uri=MIXS['0001120'], name="FoodFarmEnvironment_plant_part_maturity", curie=MIXS.curie('0001120'),
                   model_uri=MIXS.FoodFarmEnvironment_plant_part_maturity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_plant_reprod_crop = Slot(uri=MIXS['0001150'], name="FoodFarmEnvironment_plant_reprod_crop", curie=MIXS.curie('0001150'),
                   model_uri=MIXS.FoodFarmEnvironment_plant_reprod_crop, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_plant_water_method = Slot(uri=MIXS['0001111'], name="FoodFarmEnvironment_plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=MIXS.FoodFarmEnvironment_plant_water_method, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_previous_land_use = Slot(uri=MIXS['0000315'], name="FoodFarmEnvironment_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS.FoodFarmEnvironment_previous_land_use, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_project_name = Slot(uri=MIXS['0000092'], name="FoodFarmEnvironment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.FoodFarmEnvironment_project_name, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_rel_location = Slot(uri=MIXS['0001161'], name="FoodFarmEnvironment_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS.FoodFarmEnvironment_rel_location, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_repository_name = Slot(uri=MIXS['0001152'], name="FoodFarmEnvironment_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS.FoodFarmEnvironment_repository_name, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_root_cond = Slot(uri=MIXS['0001061'], name="FoodFarmEnvironment_root_cond", curie=MIXS.curie('0001061'),
                   model_uri=MIXS.FoodFarmEnvironment_root_cond, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodFarmEnvironment_root_med_carbon = Slot(uri=MIXS['0000577'], name="FoodFarmEnvironment_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=MIXS.FoodFarmEnvironment_root_med_carbon, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_root_med_macronutr = Slot(uri=MIXS['0000578'], name="FoodFarmEnvironment_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=MIXS.FoodFarmEnvironment_root_med_macronutr, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_root_med_micronutr = Slot(uri=MIXS['0000579'], name="FoodFarmEnvironment_root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=MIXS.FoodFarmEnvironment_root_med_micronutr, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_root_med_ph = Slot(uri=MIXS['0001062'], name="FoodFarmEnvironment_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=MIXS.FoodFarmEnvironment_root_med_ph, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_salinity = Slot(uri=MIXS['0000183'], name="FoodFarmEnvironment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.FoodFarmEnvironment_salinity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_salinity_meth = Slot(uri=MIXS['0000341'], name="FoodFarmEnvironment_salinity_meth", curie=MIXS.curie('0000341'),
                   model_uri=MIXS.FoodFarmEnvironment_salinity_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFarmEnvironment_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodFarmEnvironment_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_pooling, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodFarmEnvironment_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_purpose, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_samp_size = Slot(uri=MIXS['0000001'], name="FoodFarmEnvironment_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_size, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodFarmEnvironment_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_source_mat_cat, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodFarmEnvironment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_store_dur, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.FoodFarmEnvironment_samp_store_temp = Slot(uri=MIXS['0000110'], name="FoodFarmEnvironment_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_store_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_samp_type = Slot(uri=MIXS['0000998'], name="FoodFarmEnvironment_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_type, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodFarmEnvironment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.FoodFarmEnvironment_samp_vol_we_dna_ext, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_season = Slot(uri=MIXS['0000829'], name="FoodFarmEnvironment_season", curie=MIXS.curie('0000829'),
                   model_uri=MIXS.FoodFarmEnvironment_season, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_season_humidity = Slot(uri=MIXS['0001148'], name="FoodFarmEnvironment_season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=MIXS.FoodFarmEnvironment_season_humidity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_season_precpt = Slot(uri=MIXS['0000645'], name="FoodFarmEnvironment_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS.FoodFarmEnvironment_season_precpt, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_season_temp = Slot(uri=MIXS['0000643'], name="FoodFarmEnvironment_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=MIXS.FoodFarmEnvironment_season_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_seq_meth = Slot(uri=MIXS['0000050'], name="FoodFarmEnvironment_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.FoodFarmEnvironment_seq_meth, domain=FoodFarmEnvironment, range=str)

slots.FoodFarmEnvironment_sequencing_kit = Slot(uri=MIXS['0001155'], name="FoodFarmEnvironment_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS.FoodFarmEnvironment_sequencing_kit, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_sequencing_location = Slot(uri=MIXS['0001156'], name="FoodFarmEnvironment_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.FoodFarmEnvironment_sequencing_location, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="FoodFarmEnvironment_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=MIXS.FoodFarmEnvironment_serovar_or_serotype, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_size_frac_low = Slot(uri=MIXS['0000735'], name="FoodFarmEnvironment_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=MIXS.FoodFarmEnvironment_size_frac_low, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_size_frac_up = Slot(uri=MIXS['0000736'], name="FoodFarmEnvironment_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=MIXS.FoodFarmEnvironment_size_frac_up, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_soil_conductivity = Slot(uri=MIXS['0001158'], name="FoodFarmEnvironment_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_conductivity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_soil_cover = Slot(uri=MIXS['0001159'], name="FoodFarmEnvironment_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_cover, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_soil_pH = Slot(uri=MIXS['0001160'], name="FoodFarmEnvironment_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_pH, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_soil_porosity = Slot(uri=MIXS['0001162'], name="FoodFarmEnvironment_soil_porosity", curie=MIXS.curie('0001162'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_porosity, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_soil_temp = Slot(uri=MIXS['0001163'], name="FoodFarmEnvironment_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_soil_texture_class = Slot(uri=MIXS['0001164'], name="FoodFarmEnvironment_soil_texture_class", curie=MIXS.curie('0001164'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_texture_class, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_soil_type = Slot(uri=MIXS['0000332'], name="FoodFarmEnvironment_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_type, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFarmEnvironment_soil_type_meth = Slot(uri=MIXS['0000334'], name="FoodFarmEnvironment_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS.FoodFarmEnvironment_soil_type_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFarmEnvironment_solar_irradiance = Slot(uri=MIXS['0000112'], name="FoodFarmEnvironment_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=MIXS.FoodFarmEnvironment_solar_irradiance, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="FoodFarmEnvironment_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_antibiotic, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_count = Slot(uri=MIXS['0001335'], name="FoodFarmEnvironment_spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_count, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_growth_med = Slot(uri=MIXS['0001169'], name="FoodFarmEnvironment_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_growth_med, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_metal = Slot(uri=MIXS['0001172'], name="FoodFarmEnvironment_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_metal, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_org = Slot(uri=MIXS['0001167'], name="FoodFarmEnvironment_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_org, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_serovar = Slot(uri=MIXS['0001168'], name="FoodFarmEnvironment_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_serovar, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_spikein_strain = Slot(uri=MIXS['0001170'], name="FoodFarmEnvironment_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS.FoodFarmEnvironment_spikein_strain, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_temp = Slot(uri=MIXS['0000113'], name="FoodFarmEnvironment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.FoodFarmEnvironment_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_tillage = Slot(uri=MIXS['0001081'], name="FoodFarmEnvironment_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS.FoodFarmEnvironment_tillage, domain=FoodFarmEnvironment, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.FoodFarmEnvironment_timepoint = Slot(uri=MIXS['0001173'], name="FoodFarmEnvironment_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS.FoodFarmEnvironment_timepoint, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="FoodFarmEnvironment_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS.FoodFarmEnvironment_tot_org_c_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFarmEnvironment_tot_org_carb = Slot(uri=MIXS['0000533'], name="FoodFarmEnvironment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.FoodFarmEnvironment_tot_org_carb, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_turbidity = Slot(uri=MIXS['0000191'], name="FoodFarmEnvironment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS.FoodFarmEnvironment_turbidity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_ventilation_rate = Slot(uri=MIXS['0000114'], name="FoodFarmEnvironment_ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=MIXS.FoodFarmEnvironment_ventilation_rate, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_ventilation_type = Slot(uri=MIXS['0000756'], name="FoodFarmEnvironment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS.FoodFarmEnvironment_ventilation_type, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_water_frequency = Slot(uri=MIXS['0001174'], name="FoodFarmEnvironment_water_frequency", curie=MIXS.curie('0001174'),
                   model_uri=MIXS.FoodFarmEnvironment_water_frequency, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_water_pH = Slot(uri=MIXS['0001175'], name="FoodFarmEnvironment_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS.FoodFarmEnvironment_water_pH, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_water_source_adjac = Slot(uri=MIXS['0001122'], name="FoodFarmEnvironment_water_source_adjac", curie=MIXS.curie('0001122'),
                   model_uri=MIXS.FoodFarmEnvironment_water_source_adjac, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_water_source_shared = Slot(uri=MIXS['0001176'], name="FoodFarmEnvironment_water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=MIXS.FoodFarmEnvironment_water_source_shared, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_wind_direction = Slot(uri=MIXS['0000757'], name="FoodFarmEnvironment_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS.FoodFarmEnvironment_wind_direction, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFarmEnvironment_wind_speed = Slot(uri=MIXS['0000118'], name="FoodFarmEnvironment_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS.FoodFarmEnvironment_wind_speed, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_HACCP_term = Slot(uri=MIXS['0001215'], name="FoodFoodProductionFacility_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=MIXS.FoodFoodProductionFacility_HACCP_term, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_IFSAC_category = Slot(uri=MIXS['0001179'], name="FoodFoodProductionFacility_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS.FoodFoodProductionFacility_IFSAC_category, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_air_temp = Slot(uri=MIXS['0000124'], name="FoodFoodProductionFacility_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS.FoodFoodProductionFacility_air_temp, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_area_samp_size = Slot(uri=MIXS['0001255'], name="FoodFoodProductionFacility_area_samp_size", curie=MIXS.curie('0001255'),
                   model_uri=MIXS.FoodFoodProductionFacility_area_samp_size, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_avg_occup = Slot(uri=MIXS['0000775'], name="FoodFoodProductionFacility_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS.FoodFoodProductionFacility_avg_occup, domain=FoodFoodProductionFacility, range=Optional[float])

slots.FoodFoodProductionFacility_bacterial_density = Slot(uri=MIXS['0001194'], name="FoodFoodProductionFacility_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=MIXS.FoodFoodProductionFacility_bacterial_density, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_biocide_used = Slot(uri=MIXS['0001258'], name="FoodFoodProductionFacility_biocide_used", curie=MIXS.curie('0001258'),
                   model_uri=MIXS.FoodFoodProductionFacility_biocide_used, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="FoodFoodProductionFacility_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=MIXS.FoodFoodProductionFacility_coll_site_geo_feat, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_collection_date = Slot(uri=MIXS['0000011'], name="FoodFoodProductionFacility_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.FoodFoodProductionFacility_collection_date, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_cult_isol_date = Slot(uri=MIXS['0001181'], name="FoodFoodProductionFacility_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.FoodFoodProductionFacility_cult_isol_date, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_cult_result = Slot(uri=MIXS['0001117'], name="FoodFoodProductionFacility_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS.FoodFoodProductionFacility_cult_result, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_cult_result_org = Slot(uri=MIXS['0001118'], name="FoodFoodProductionFacility_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS.FoodFoodProductionFacility_cult_result_org, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_cult_target = Slot(uri=MIXS['0001119'], name="FoodFoodProductionFacility_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS.FoodFoodProductionFacility_cult_target, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_dietary_claim_use = Slot(uri=MIXS['0001199'], name="FoodFoodProductionFacility_dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=MIXS.FoodFoodProductionFacility_dietary_claim_use, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodFoodProductionFacility_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.FoodFoodProductionFacility_enrichment_protocol, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodFoodProductionFacility_env_broad_scale = Slot(uri=MIXS['0000012'], name="FoodFoodProductionFacility_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.FoodFoodProductionFacility_env_broad_scale, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_env_local_scale = Slot(uri=MIXS['0000013'], name="FoodFoodProductionFacility_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.FoodFoodProductionFacility_env_local_scale, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_env_medium = Slot(uri=MIXS['0000014'], name="FoodFoodProductionFacility_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.FoodFoodProductionFacility_env_medium, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_env_monitoring_zone = Slot(uri=MIXS['0001254'], name="FoodFoodProductionFacility_env_monitoring_zone", curie=MIXS.curie('0001254'),
                   model_uri=MIXS.FoodFoodProductionFacility_env_monitoring_zone, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodFoodProductionFacility_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.FoodFoodProductionFacility_experimental_factor, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_facility_type = Slot(uri=MIXS['0001252'], name="FoodFoodProductionFacility_facility_type", curie=MIXS.curie('0001252'),
                   model_uri=MIXS.FoodFoodProductionFacility_facility_type, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_additive = Slot(uri=MIXS['0001200'], name="FoodFoodProductionFacility_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_additive, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_allergen_label = Slot(uri=MIXS['0001201'], name="FoodFoodProductionFacility_food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_allergen_label, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodFoodProductionFacility_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_contact_surf, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_food_contain_wrap = Slot(uri=MIXS['0001132'], name="FoodFoodProductionFacility_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_contain_wrap, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_cooking_proc = Slot(uri=MIXS['0001202'], name="FoodFoodProductionFacility_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_cooking_proc, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_dis_point = Slot(uri=MIXS['0001203'], name="FoodFoodProductionFacility_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_dis_point, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_dis_point_city = Slot(uri=MIXS['0001204'], name="FoodFoodProductionFacility_food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_dis_point_city, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_ingredient = Slot(uri=MIXS['0001205'], name="FoodFoodProductionFacility_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_ingredient, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_name_status = Slot(uri=MIXS['0001206'], name="FoodFoodProductionFacility_food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_name_status, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_food_origin = Slot(uri=MIXS['0001207'], name="FoodFoodProductionFacility_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_origin, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_pack_capacity = Slot(uri=MIXS['0001208'], name="FoodFoodProductionFacility_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_pack_capacity, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_food_pack_integrity = Slot(uri=MIXS['0001209'], name="FoodFoodProductionFacility_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_pack_integrity, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodFoodProductionFacility_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_pack_medium, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_preserv_proc = Slot(uri=MIXS['0001135'], name="FoodFoodProductionFacility_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_preserv_proc, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_prior_contact = Slot(uri=MIXS['0001210'], name="FoodFoodProductionFacility_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_prior_contact, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_prod = Slot(uri=MIXS['0001211'], name="FoodFoodProductionFacility_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_prod, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_food_prod_char = Slot(uri=MIXS['0001136'], name="FoodFoodProductionFacility_food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_prod_char, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_food_prod_synonym = Slot(uri=MIXS['0001212'], name="FoodFoodProductionFacility_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_prod_synonym, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodFoodProductionFacility_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_product_qual, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_food_product_type = Slot(uri=MIXS['0001184'], name="FoodFoodProductionFacility_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_product_type, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_food_quality_date = Slot(uri=MIXS['0001178'], name="FoodFoodProductionFacility_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_quality_date, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_source = Slot(uri=MIXS['0001139'], name="FoodFoodProductionFacility_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_source, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_food_trace_list = Slot(uri=MIXS['0001214'], name="FoodFoodProductionFacility_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_trace_list, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_trav_mode = Slot(uri=MIXS['0001137'], name="FoodFoodProductionFacility_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_trav_mode, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_food_trav_vehic = Slot(uri=MIXS['0001138'], name="FoodFoodProductionFacility_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_trav_vehic, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_food_treat_proc = Slot(uri=MIXS['0001140'], name="FoodFoodProductionFacility_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS.FoodFoodProductionFacility_food_treat_proc, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_freq_clean = Slot(uri=MIXS['0000226'], name="FoodFoodProductionFacility_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS.FoodFoodProductionFacility_freq_clean, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_genetic_mod = Slot(uri=MIXS['0000859'], name="FoodFoodProductionFacility_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.FoodFoodProductionFacility_genetic_mod, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodFoodProductionFacility_geo_loc_name = Slot(uri=MIXS['0000010'], name="FoodFoodProductionFacility_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.FoodFoodProductionFacility_geo_loc_name, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_hygienic_area = Slot(uri=MIXS['0001253'], name="FoodFoodProductionFacility_hygienic_area", curie=MIXS.curie('0001253'),
                   model_uri=MIXS.FoodFoodProductionFacility_hygienic_area, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_indoor_surf = Slot(uri=MIXS['0000764'], name="FoodFoodProductionFacility_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS.FoodFoodProductionFacility_indoor_surf, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodFoodProductionFacility_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS.FoodFoodProductionFacility_intended_consumer, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_lat_lon = Slot(uri=MIXS['0000009'], name="FoodFoodProductionFacility_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.FoodFoodProductionFacility_lat_lon, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.FoodFoodProductionFacility_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodFoodProductionFacility_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.FoodFoodProductionFacility_library_prep_kit, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_lot_number = Slot(uri=MIXS['0001147'], name="FoodFoodProductionFacility_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.FoodFoodProductionFacility_lot_number, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_microb_cult_med = Slot(uri=MIXS['0001216'], name="FoodFoodProductionFacility_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=MIXS.FoodFoodProductionFacility_microb_cult_med, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_misc_param = Slot(uri=MIXS['0000752'], name="FoodFoodProductionFacility_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.FoodFoodProductionFacility_misc_param, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.FoodFoodProductionFacility_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodFoodProductionFacility_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.FoodFoodProductionFacility_nucl_acid_ext, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodFoodProductionFacility_nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="FoodFoodProductionFacility_nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=MIXS.FoodFoodProductionFacility_nucl_acid_ext_kit, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_num_samp_collect = Slot(uri=MIXS['0001224'], name="FoodFoodProductionFacility_num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=MIXS.FoodFoodProductionFacility_num_samp_collect, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_organism_count = Slot(uri=MIXS['0000103'], name="FoodFoodProductionFacility_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.FoodFoodProductionFacility_organism_count, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_part_plant_animal = Slot(uri=MIXS['0001149'], name="FoodFoodProductionFacility_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS.FoodFoodProductionFacility_part_plant_animal, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodFoodProductionFacility_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.FoodFoodProductionFacility_pool_dna_extracts, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_project_name = Slot(uri=MIXS['0000092'], name="FoodFoodProductionFacility_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.FoodFoodProductionFacility_project_name, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_repository_name = Slot(uri=MIXS['0001152'], name="FoodFoodProductionFacility_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS.FoodFoodProductionFacility_repository_name, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_room_dim = Slot(uri=MIXS['0000192'], name="FoodFoodProductionFacility_room_dim", curie=MIXS.curie('0000192'),
                   model_uri=MIXS.FoodFoodProductionFacility_room_dim, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_floor = Slot(uri=MIXS['0000828'], name="FoodFoodProductionFacility_samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_floor, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_loc_condition = Slot(uri=MIXS['0001257'], name="FoodFoodProductionFacility_samp_loc_condition", curie=MIXS.curie('0001257'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_loc_condition, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodFoodProductionFacility_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_pooling, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodFoodProductionFacility_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_purpose, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_rep_biol = Slot(uri=MIXS['0001226'], name="FoodFoodProductionFacility_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_rep_biol, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_rep_tech = Slot(uri=MIXS['0001227'], name="FoodFoodProductionFacility_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_rep_tech, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_room_id = Slot(uri=MIXS['0000244'], name="FoodFoodProductionFacility_samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_room_id, domain=FoodFoodProductionFacility, range=Optional[int])

slots.FoodFoodProductionFacility_samp_size = Slot(uri=MIXS['0000001'], name="FoodFoodProductionFacility_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_size, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodFoodProductionFacility_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_source_mat_cat, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodFoodProductionFacility_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_stor_device, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodFoodProductionFacility_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_stor_media, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodFoodProductionFacility_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_store_dur, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.FoodFoodProductionFacility_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodFoodProductionFacility_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_store_loc, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_store_temp = Slot(uri=MIXS['0000110'], name="FoodFoodProductionFacility_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_store_temp, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_samp_surf_moisture = Slot(uri=MIXS['0001256'], name="FoodFoodProductionFacility_samp_surf_moisture", curie=MIXS.curie('0001256'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_surf_moisture, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_transport_cont = Slot(uri=MIXS['0001230'], name="FoodFoodProductionFacility_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_transport_cont, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_transport_dur = Slot(uri=MIXS['0001231'], name="FoodFoodProductionFacility_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_transport_dur, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_transport_temp = Slot(uri=MIXS['0001232'], name="FoodFoodProductionFacility_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_transport_temp, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_type = Slot(uri=MIXS['0000998'], name="FoodFoodProductionFacility_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_type, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodFoodProductionFacility_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.FoodFoodProductionFacility_samp_vol_we_dna_ext, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_seq_meth = Slot(uri=MIXS['0000050'], name="FoodFoodProductionFacility_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.FoodFoodProductionFacility_seq_meth, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_sequencing_kit = Slot(uri=MIXS['0001155'], name="FoodFoodProductionFacility_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS.FoodFoodProductionFacility_sequencing_kit, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_sequencing_location = Slot(uri=MIXS['0001156'], name="FoodFoodProductionFacility_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.FoodFoodProductionFacility_sequencing_location, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_spec_intended_cons = Slot(uri=MIXS['0001234'], name="FoodFoodProductionFacility_spec_intended_cons", curie=MIXS.curie('0001234'),
                   model_uri=MIXS.FoodFoodProductionFacility_spec_intended_cons, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodFoodProductionFacility_ster_meth_samp_room = Slot(uri=MIXS['0001259'], name="FoodFoodProductionFacility_ster_meth_samp_room", curie=MIXS.curie('0001259'),
                   model_uri=MIXS.FoodFoodProductionFacility_ster_meth_samp_room, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_study_design = Slot(uri=MIXS['0001236'], name="FoodFoodProductionFacility_study_design", curie=MIXS.curie('0001236'),
                   model_uri=MIXS.FoodFoodProductionFacility_study_design, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_study_inc_dur = Slot(uri=MIXS['0001237'], name="FoodFoodProductionFacility_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=MIXS.FoodFoodProductionFacility_study_inc_dur, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_study_inc_temp = Slot(uri=MIXS['0001238'], name="FoodFoodProductionFacility_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=MIXS.FoodFoodProductionFacility_study_inc_temp, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_study_timecourse = Slot(uri=MIXS['0001239'], name="FoodFoodProductionFacility_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=MIXS.FoodFoodProductionFacility_study_timecourse, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodFoodProductionFacility_study_tmnt = Slot(uri=MIXS['0001240'], name="FoodFoodProductionFacility_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=MIXS.FoodFoodProductionFacility_study_tmnt, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="FoodFoodProductionFacility_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.FoodFoodProductionFacility_subspecf_gen_lin, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_surf_material = Slot(uri=MIXS['0000758'], name="FoodFoodProductionFacility_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS.FoodFoodProductionFacility_surf_material, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_timepoint = Slot(uri=MIXS['0001173'], name="FoodFoodProductionFacility_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS.FoodFoodProductionFacility_timepoint, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodHumanFoods_HACCP_term = Slot(uri=MIXS['0001215'], name="FoodHumanFoods_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=MIXS.FoodHumanFoods_HACCP_term, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_IFSAC_category = Slot(uri=MIXS['0001179'], name="FoodHumanFoods_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS.FoodHumanFoods_IFSAC_category, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_bacterial_density = Slot(uri=MIXS['0001194'], name="FoodHumanFoods_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=MIXS.FoodHumanFoods_bacterial_density, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="FoodHumanFoods_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=MIXS.FoodHumanFoods_coll_site_geo_feat, domain=FoodHumanFoods, range=str)

slots.FoodHumanFoods_collection_date = Slot(uri=MIXS['0000011'], name="FoodHumanFoods_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.FoodHumanFoods_collection_date, domain=FoodHumanFoods, range=str)

slots.FoodHumanFoods_cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="FoodHumanFoods_cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=MIXS.FoodHumanFoods_cons_food_stor_dur, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="FoodHumanFoods_cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=MIXS.FoodHumanFoods_cons_food_stor_temp, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cons_purch_date = Slot(uri=MIXS['0001197'], name="FoodHumanFoods_cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=MIXS.FoodHumanFoods_cons_purch_date, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cons_qty_purchased = Slot(uri=MIXS['0001198'], name="FoodHumanFoods_cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=MIXS.FoodHumanFoods_cons_qty_purchased, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_cult_isol_date = Slot(uri=MIXS['0001181'], name="FoodHumanFoods_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS.FoodHumanFoods_cult_isol_date, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cult_result = Slot(uri=MIXS['0001117'], name="FoodHumanFoods_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS.FoodHumanFoods_cult_result, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cult_result_org = Slot(uri=MIXS['0001118'], name="FoodHumanFoods_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS.FoodHumanFoods_cult_result_org, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_cult_target = Slot(uri=MIXS['0001119'], name="FoodHumanFoods_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS.FoodHumanFoods_cult_target, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_dietary_claim_use = Slot(uri=MIXS['0001199'], name="FoodHumanFoods_dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=MIXS.FoodHumanFoods_dietary_claim_use, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodHumanFoods_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS.FoodHumanFoods_enrichment_protocol, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodHumanFoods_env_broad_scale = Slot(uri=MIXS['0000012'], name="FoodHumanFoods_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.FoodHumanFoods_env_broad_scale, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_env_local_scale = Slot(uri=MIXS['0000013'], name="FoodHumanFoods_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.FoodHumanFoods_env_local_scale, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_env_medium = Slot(uri=MIXS['0000014'], name="FoodHumanFoods_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.FoodHumanFoods_env_medium, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodHumanFoods_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.FoodHumanFoods_experimental_factor, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_ferm_chem_add = Slot(uri=MIXS['0001185'], name="FoodHumanFoods_ferm_chem_add", curie=MIXS.curie('0001185'),
                   model_uri=MIXS.FoodHumanFoods_ferm_chem_add, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_ferm_chem_add_perc = Slot(uri=MIXS['0001186'], name="FoodHumanFoods_ferm_chem_add_perc", curie=MIXS.curie('0001186'),
                   model_uri=MIXS.FoodHumanFoods_ferm_chem_add_perc, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_ferm_headspace_oxy = Slot(uri=MIXS['0001187'], name="FoodHumanFoods_ferm_headspace_oxy", curie=MIXS.curie('0001187'),
                   model_uri=MIXS.FoodHumanFoods_ferm_headspace_oxy, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_ferm_medium = Slot(uri=MIXS['0001188'], name="FoodHumanFoods_ferm_medium", curie=MIXS.curie('0001188'),
                   model_uri=MIXS.FoodHumanFoods_ferm_medium, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_ferm_pH = Slot(uri=MIXS['0001189'], name="FoodHumanFoods_ferm_pH", curie=MIXS.curie('0001189'),
                   model_uri=MIXS.FoodHumanFoods_ferm_pH, domain=FoodHumanFoods, range=Optional[float])

slots.FoodHumanFoods_ferm_rel_humidity = Slot(uri=MIXS['0001190'], name="FoodHumanFoods_ferm_rel_humidity", curie=MIXS.curie('0001190'),
                   model_uri=MIXS.FoodHumanFoods_ferm_rel_humidity, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_ferm_temp = Slot(uri=MIXS['0001191'], name="FoodHumanFoods_ferm_temp", curie=MIXS.curie('0001191'),
                   model_uri=MIXS.FoodHumanFoods_ferm_temp, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_ferm_time = Slot(uri=MIXS['0001192'], name="FoodHumanFoods_ferm_time", curie=MIXS.curie('0001192'),
                   model_uri=MIXS.FoodHumanFoods_ferm_time, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_ferm_vessel = Slot(uri=MIXS['0001193'], name="FoodHumanFoods_ferm_vessel", curie=MIXS.curie('0001193'),
                   model_uri=MIXS.FoodHumanFoods_ferm_vessel, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_food_additive = Slot(uri=MIXS['0001200'], name="FoodHumanFoods_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=MIXS.FoodHumanFoods_food_additive, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_allergen_label = Slot(uri=MIXS['0001201'], name="FoodHumanFoods_food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=MIXS.FoodHumanFoods_food_allergen_label, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodHumanFoods_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS.FoodHumanFoods_food_contact_surf, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_contain_wrap = Slot(uri=MIXS['0001132'], name="FoodHumanFoods_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS.FoodHumanFoods_food_contain_wrap, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_cooking_proc = Slot(uri=MIXS['0001202'], name="FoodHumanFoods_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=MIXS.FoodHumanFoods_food_cooking_proc, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_dis_point = Slot(uri=MIXS['0001203'], name="FoodHumanFoods_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=MIXS.FoodHumanFoods_food_dis_point, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_ingredient = Slot(uri=MIXS['0001205'], name="FoodHumanFoods_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=MIXS.FoodHumanFoods_food_ingredient, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_name_status = Slot(uri=MIXS['0001206'], name="FoodHumanFoods_food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=MIXS.FoodHumanFoods_food_name_status, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_food_origin = Slot(uri=MIXS['0001207'], name="FoodHumanFoods_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS.FoodHumanFoods_food_origin, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_pack_capacity = Slot(uri=MIXS['0001208'], name="FoodHumanFoods_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=MIXS.FoodHumanFoods_food_pack_capacity, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_food_pack_integrity = Slot(uri=MIXS['0001209'], name="FoodHumanFoods_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=MIXS.FoodHumanFoods_food_pack_integrity, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodHumanFoods_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS.FoodHumanFoods_food_pack_medium, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_preserv_proc = Slot(uri=MIXS['0001135'], name="FoodHumanFoods_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS.FoodHumanFoods_food_preserv_proc, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_prior_contact = Slot(uri=MIXS['0001210'], name="FoodHumanFoods_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=MIXS.FoodHumanFoods_food_prior_contact, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_prod = Slot(uri=MIXS['0001211'], name="FoodHumanFoods_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS.FoodHumanFoods_food_prod, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_food_prod_synonym = Slot(uri=MIXS['0001212'], name="FoodHumanFoods_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=MIXS.FoodHumanFoods_food_prod_synonym, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodHumanFoods_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS.FoodHumanFoods_food_product_qual, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_food_product_type = Slot(uri=MIXS['0001184'], name="FoodHumanFoods_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS.FoodHumanFoods_food_product_type, domain=FoodHumanFoods, range=str)

slots.FoodHumanFoods_food_quality_date = Slot(uri=MIXS['0001178'], name="FoodHumanFoods_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS.FoodHumanFoods_food_quality_date, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_source = Slot(uri=MIXS['0001139'], name="FoodHumanFoods_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS.FoodHumanFoods_food_source, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_food_trace_list = Slot(uri=MIXS['0001214'], name="FoodHumanFoods_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=MIXS.FoodHumanFoods_food_trace_list, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_trav_mode = Slot(uri=MIXS['0001137'], name="FoodHumanFoods_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS.FoodHumanFoods_food_trav_mode, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_food_trav_vehic = Slot(uri=MIXS['0001138'], name="FoodHumanFoods_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS.FoodHumanFoods_food_trav_vehic, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_food_treat_proc = Slot(uri=MIXS['0001140'], name="FoodHumanFoods_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS.FoodHumanFoods_food_treat_proc, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_genetic_mod = Slot(uri=MIXS['0000859'], name="FoodHumanFoods_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.FoodHumanFoods_genetic_mod, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.FoodHumanFoods_geo_loc_name = Slot(uri=MIXS['0000010'], name="FoodHumanFoods_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.FoodHumanFoods_geo_loc_name, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodHumanFoods_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS.FoodHumanFoods_intended_consumer, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_lat_lon = Slot(uri=MIXS['0000009'], name="FoodHumanFoods_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.FoodHumanFoods_lat_lon, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.FoodHumanFoods_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodHumanFoods_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS.FoodHumanFoods_library_prep_kit, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_lot_number = Slot(uri=MIXS['0001147'], name="FoodHumanFoods_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS.FoodHumanFoods_lot_number, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_microb_cult_med = Slot(uri=MIXS['0001216'], name="FoodHumanFoods_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=MIXS.FoodHumanFoods_microb_cult_med, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_microb_start = Slot(uri=MIXS['0001217'], name="FoodHumanFoods_microb_start", curie=MIXS.curie('0001217'),
                   model_uri=MIXS.FoodHumanFoods_microb_start, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_microb_start_count = Slot(uri=MIXS['0001218'], name="FoodHumanFoods_microb_start_count", curie=MIXS.curie('0001218'),
                   model_uri=MIXS.FoodHumanFoods_microb_start_count, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_microb_start_inoc = Slot(uri=MIXS['0001219'], name="FoodHumanFoods_microb_start_inoc", curie=MIXS.curie('0001219'),
                   model_uri=MIXS.FoodHumanFoods_microb_start_inoc, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_microb_start_prep = Slot(uri=MIXS['0001220'], name="FoodHumanFoods_microb_start_prep", curie=MIXS.curie('0001220'),
                   model_uri=MIXS.FoodHumanFoods_microb_start_prep, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_microb_start_source = Slot(uri=MIXS['0001221'], name="FoodHumanFoods_microb_start_source", curie=MIXS.curie('0001221'),
                   model_uri=MIXS.FoodHumanFoods_microb_start_source, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_microb_start_taxID = Slot(uri=MIXS['0001222'], name="FoodHumanFoods_microb_start_taxID", curie=MIXS.curie('0001222'),
                   model_uri=MIXS.FoodHumanFoods_microb_start_taxID, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_misc_param = Slot(uri=MIXS['0000752'], name="FoodHumanFoods_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.FoodHumanFoods_misc_param, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.FoodHumanFoods_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodHumanFoods_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.FoodHumanFoods_nucl_acid_ext, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.FoodHumanFoods_nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="FoodHumanFoods_nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=MIXS.FoodHumanFoods_nucl_acid_ext_kit, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_num_samp_collect = Slot(uri=MIXS['0001224'], name="FoodHumanFoods_num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=MIXS.FoodHumanFoods_num_samp_collect, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_organism_count = Slot(uri=MIXS['0000103'], name="FoodHumanFoods_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.FoodHumanFoods_organism_count, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_part_plant_animal = Slot(uri=MIXS['0001149'], name="FoodHumanFoods_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS.FoodHumanFoods_part_plant_animal, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_perturbation = Slot(uri=MIXS['0000754'], name="FoodHumanFoods_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.FoodHumanFoods_perturbation, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodHumanFoods_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.FoodHumanFoods_pool_dna_extracts, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_project_name = Slot(uri=MIXS['0000092'], name="FoodHumanFoods_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.FoodHumanFoods_project_name, domain=FoodHumanFoods, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_repository_name = Slot(uri=MIXS['0001152'], name="FoodHumanFoods_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS.FoodHumanFoods_repository_name, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodHumanFoods_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS.FoodHumanFoods_samp_pooling, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodHumanFoods_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS.FoodHumanFoods_samp_purpose, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_rep_biol = Slot(uri=MIXS['0001226'], name="FoodHumanFoods_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=MIXS.FoodHumanFoods_samp_rep_biol, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_rep_tech = Slot(uri=MIXS['0001227'], name="FoodHumanFoods_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=MIXS.FoodHumanFoods_samp_rep_tech, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_size = Slot(uri=MIXS['0000001'], name="FoodHumanFoods_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.FoodHumanFoods_samp_size, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodHumanFoods_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS.FoodHumanFoods_samp_source_mat_cat, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.FoodHumanFoods_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodHumanFoods_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS.FoodHumanFoods_samp_stor_device, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodHumanFoods_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS.FoodHumanFoods_samp_stor_media, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodHumanFoods_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.FoodHumanFoods_samp_store_dur, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.FoodHumanFoods_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodHumanFoods_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.FoodHumanFoods_samp_store_loc, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_store_temp = Slot(uri=MIXS['0000110'], name="FoodHumanFoods_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.FoodHumanFoods_samp_store_temp, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_samp_transport_cont = Slot(uri=MIXS['0001230'], name="FoodHumanFoods_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=MIXS.FoodHumanFoods_samp_transport_cont, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_transport_dur = Slot(uri=MIXS['0001231'], name="FoodHumanFoods_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=MIXS.FoodHumanFoods_samp_transport_dur, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_transport_temp = Slot(uri=MIXS['0001232'], name="FoodHumanFoods_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=MIXS.FoodHumanFoods_samp_transport_temp, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodHumanFoods_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.FoodHumanFoods_samp_vol_we_dna_ext, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_seq_meth = Slot(uri=MIXS['0000050'], name="FoodHumanFoods_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.FoodHumanFoods_seq_meth, domain=FoodHumanFoods, range=str)

slots.FoodHumanFoods_sequencing_kit = Slot(uri=MIXS['0001155'], name="FoodHumanFoods_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS.FoodHumanFoods_sequencing_kit, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_sequencing_location = Slot(uri=MIXS['0001156'], name="FoodHumanFoods_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS.FoodHumanFoods_sequencing_location, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="FoodHumanFoods_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=MIXS.FoodHumanFoods_serovar_or_serotype, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_AMR = Slot(uri=MIXS['0001235'], name="FoodHumanFoods_spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=MIXS.FoodHumanFoods_spikein_AMR, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="FoodHumanFoods_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=MIXS.FoodHumanFoods_spikein_antibiotic, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_count = Slot(uri=MIXS['0001335'], name="FoodHumanFoods_spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=MIXS.FoodHumanFoods_spikein_count, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_growth_med = Slot(uri=MIXS['0001169'], name="FoodHumanFoods_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=MIXS.FoodHumanFoods_spikein_growth_med, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_metal = Slot(uri=MIXS['0001172'], name="FoodHumanFoods_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=MIXS.FoodHumanFoods_spikein_metal, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_org = Slot(uri=MIXS['0001167'], name="FoodHumanFoods_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=MIXS.FoodHumanFoods_spikein_org, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_serovar = Slot(uri=MIXS['0001168'], name="FoodHumanFoods_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=MIXS.FoodHumanFoods_spikein_serovar, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_spikein_strain = Slot(uri=MIXS['0001170'], name="FoodHumanFoods_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS.FoodHumanFoods_spikein_strain, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_study_design = Slot(uri=MIXS['0001236'], name="FoodHumanFoods_study_design", curie=MIXS.curie('0001236'),
                   model_uri=MIXS.FoodHumanFoods_study_design, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_study_inc_dur = Slot(uri=MIXS['0001237'], name="FoodHumanFoods_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=MIXS.FoodHumanFoods_study_inc_dur, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_study_inc_temp = Slot(uri=MIXS['0001238'], name="FoodHumanFoods_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=MIXS.FoodHumanFoods_study_inc_temp, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_study_timecourse = Slot(uri=MIXS['0001239'], name="FoodHumanFoods_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=MIXS.FoodHumanFoods_study_timecourse, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_study_tmnt = Slot(uri=MIXS['0001240'], name="FoodHumanFoods_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=MIXS.FoodHumanFoods_study_tmnt, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_temp = Slot(uri=MIXS['0000113'], name="FoodHumanFoods_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.FoodHumanFoods_temp, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.FoodHumanFoods_timepoint = Slot(uri=MIXS['0001173'], name="FoodHumanFoods_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS.FoodHumanFoods_timepoint, domain=FoodHumanFoods, range=Optional[str])

slots.HostAssociated_alt = Slot(uri=MIXS['0000094'], name="HostAssociated_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.HostAssociated_alt, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_ances_data = Slot(uri=MIXS['0000247'], name="HostAssociated_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS.HostAssociated_ances_data, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_biol_stat = Slot(uri=MIXS['0000858'], name="HostAssociated_biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=MIXS.HostAssociated_biol_stat, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_blood_press_diast = Slot(uri=MIXS['0000258'], name="HostAssociated_blood_press_diast", curie=MIXS.curie('0000258'),
                   model_uri=MIXS.HostAssociated_blood_press_diast, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_blood_press_syst = Slot(uri=MIXS['0000259'], name="HostAssociated_blood_press_syst", curie=MIXS.curie('0000259'),
                   model_uri=MIXS.HostAssociated_blood_press_syst, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="HostAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HostAssociated_chem_administration, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_elev = Slot(uri=MIXS['0000093'], name="HostAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.HostAssociated_elev, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_genetic_mod = Slot(uri=MIXS['0000859'], name="HostAssociated_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.HostAssociated_genetic_mod, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.HostAssociated_gravidity = Slot(uri=MIXS['0000875'], name="HostAssociated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS.HostAssociated_gravidity, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_age = Slot(uri=MIXS['0000255'], name="HostAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HostAssociated_host_age, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_body_habitat = Slot(uri=MIXS['0000866'], name="HostAssociated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS.HostAssociated_host_body_habitat, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="HostAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HostAssociated_host_body_site, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HostAssociated_host_body_temp = Slot(uri=MIXS['0000274'], name="HostAssociated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HostAssociated_host_body_temp, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_color = Slot(uri=MIXS['0000260'], name="HostAssociated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS.HostAssociated_host_color, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="HostAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS.HostAssociated_host_common_name, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_diet = Slot(uri=MIXS['0000869'], name="HostAssociated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HostAssociated_host_diet, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="HostAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HostAssociated_host_disease_stat, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HostAssociated_host_dry_mass = Slot(uri=MIXS['0000257'], name="HostAssociated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.HostAssociated_host_dry_mass, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="HostAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HostAssociated_host_genotype, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_growth_cond = Slot(uri=MIXS['0000871'], name="HostAssociated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS.HostAssociated_host_growth_cond, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_height = Slot(uri=MIXS['0000264'], name="HostAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HostAssociated_host_height, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_last_meal = Slot(uri=MIXS['0000870'], name="HostAssociated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HostAssociated_host_last_meal, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_length = Slot(uri=MIXS['0000256'], name="HostAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.HostAssociated_host_length, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="HostAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS.HostAssociated_host_life_stage, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="HostAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HostAssociated_host_phenotype, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HostAssociated_host_shape = Slot(uri=MIXS['0000261'], name="HostAssociated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS.HostAssociated_host_shape, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="HostAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HostAssociated_host_subject_id, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="HostAssociated_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS.HostAssociated_host_subspecf_genlin, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_substrate = Slot(uri=MIXS['0000252'], name="HostAssociated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS.HostAssociated_host_substrate, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="HostAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.HostAssociated_host_taxid, domain=HostAssociated, range=Optional[int])

slots.HostAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="HostAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HostAssociated_host_tot_mass, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_misc_param = Slot(uri=MIXS['0000752'], name="HostAssociated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HostAssociated_misc_param, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HostAssociated_organism_count = Slot(uri=MIXS['0000103'], name="HostAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HostAssociated_organism_count, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HostAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HostAssociated_oxy_stat_samp, domain=HostAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HostAssociated_perturbation = Slot(uri=MIXS['0000754'], name="HostAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HostAssociated_perturbation, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_project_name = Slot(uri=MIXS['0000092'], name="HostAssociated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HostAssociated_project_name, domain=HostAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_salinity = Slot(uri=MIXS['0000183'], name="HostAssociated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HostAssociated_salinity, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_samp_capt_status = Slot(uri=MIXS['0000860'], name="HostAssociated_samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=MIXS.HostAssociated_samp_capt_status, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_samp_dis_stage = Slot(uri=MIXS['0000249'], name="HostAssociated_samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=MIXS.HostAssociated_samp_dis_stage, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="HostAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HostAssociated_samp_store_dur, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HostAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="HostAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HostAssociated_samp_store_loc, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HostAssociated_samp_store_temp = Slot(uri=MIXS['0000110'], name="HostAssociated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HostAssociated_samp_store_temp, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HostAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HostAssociated_samp_vol_we_dna_ext, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HostAssociated_temp = Slot(uri=MIXS['0000113'], name="HostAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HostAssociated_temp, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_amniotic_fluid_color = Slot(uri=MIXS['0000276'], name="HumanAssociated_amniotic_fluid_color", curie=MIXS.curie('0000276'),
                   model_uri=MIXS.HumanAssociated_amniotic_fluid_color, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_blood_blood_disord = Slot(uri=MIXS['0000271'], name="HumanAssociated_blood_blood_disord", curie=MIXS.curie('0000271'),
                   model_uri=MIXS.HumanAssociated_blood_blood_disord, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="HumanAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HumanAssociated_chem_administration, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_diet_last_six_month = Slot(uri=MIXS['0000266'], name="HumanAssociated_diet_last_six_month", curie=MIXS.curie('0000266'),
                   model_uri=MIXS.HumanAssociated_diet_last_six_month, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_drug_usage = Slot(uri=MIXS['0000894'], name="HumanAssociated_drug_usage", curie=MIXS.curie('0000894'),
                   model_uri=MIXS.HumanAssociated_drug_usage, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_ethnicity = Slot(uri=MIXS['0000895'], name="HumanAssociated_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.HumanAssociated_ethnicity, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_foetal_health_stat = Slot(uri=MIXS['0000275'], name="HumanAssociated_foetal_health_stat", curie=MIXS.curie('0000275'),
                   model_uri=MIXS.HumanAssociated_foetal_health_stat, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_gestation_state = Slot(uri=MIXS['0000272'], name="HumanAssociated_gestation_state", curie=MIXS.curie('0000272'),
                   model_uri=MIXS.HumanAssociated_gestation_state, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_age = Slot(uri=MIXS['0000255'], name="HumanAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HumanAssociated_host_age, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_body_mass_index = Slot(uri=MIXS['0000317'], name="HumanAssociated_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.HumanAssociated_host_body_mass_index, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="HumanAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HumanAssociated_host_body_site, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanAssociated_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanAssociated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HumanAssociated_host_body_temp, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_diet = Slot(uri=MIXS['0000869'], name="HumanAssociated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HumanAssociated_host_diet, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HumanAssociated_host_disease_stat, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HumanAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="HumanAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HumanAssociated_host_genotype, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_height = Slot(uri=MIXS['0000264'], name="HumanAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HumanAssociated_host_height, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_hiv_stat = Slot(uri=MIXS['0000265'], name="HumanAssociated_host_hiv_stat", curie=MIXS.curie('0000265'),
                   model_uri=MIXS.HumanAssociated_host_hiv_stat, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanAssociated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HumanAssociated_host_last_meal, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_occupation = Slot(uri=MIXS['0000896'], name="HumanAssociated_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.HumanAssociated_host_occupation, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HumanAssociated_host_phenotype, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanAssociated_host_pulse = Slot(uri=MIXS['0000333'], name="HumanAssociated_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.HumanAssociated_host_pulse, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HumanAssociated_host_subject_id, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HumanAssociated_host_tot_mass, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="HumanAssociated_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.HumanAssociated_ihmc_medication_code, domain=HumanAssociated, range=Optional[int])

slots.HumanAssociated_kidney_disord = Slot(uri=MIXS['0000277'], name="HumanAssociated_kidney_disord", curie=MIXS.curie('0000277'),
                   model_uri=MIXS.HumanAssociated_kidney_disord, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_maternal_health_stat = Slot(uri=MIXS['0000273'], name="HumanAssociated_maternal_health_stat", curie=MIXS.curie('0000273'),
                   model_uri=MIXS.HumanAssociated_maternal_health_stat, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_medic_hist_perform = Slot(uri=MIXS['0000897'], name="HumanAssociated_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.HumanAssociated_medic_hist_perform, domain=HumanAssociated, range=Optional[Union[bool, Bool]])

slots.HumanAssociated_misc_param = Slot(uri=MIXS['0000752'], name="HumanAssociated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HumanAssociated_misc_param, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HumanAssociated_organism_count = Slot(uri=MIXS['0000103'], name="HumanAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HumanAssociated_organism_count, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HumanAssociated_oxy_stat_samp, domain=HumanAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanAssociated_perturbation = Slot(uri=MIXS['0000754'], name="HumanAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HumanAssociated_perturbation, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_pet_farm_animal = Slot(uri=MIXS['0000267'], name="HumanAssociated_pet_farm_animal", curie=MIXS.curie('0000267'),
                   model_uri=MIXS.HumanAssociated_pet_farm_animal, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_project_name = Slot(uri=MIXS['0000092'], name="HumanAssociated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HumanAssociated_project_name, domain=HumanAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_pulmonary_disord = Slot(uri=MIXS['0000269'], name="HumanAssociated_pulmonary_disord", curie=MIXS.curie('0000269'),
                   model_uri=MIXS.HumanAssociated_pulmonary_disord, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_salinity = Slot(uri=MIXS['0000183'], name="HumanAssociated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HumanAssociated_salinity, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HumanAssociated_samp_store_dur, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HumanAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HumanAssociated_samp_store_loc, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_samp_store_temp = Slot(uri=MIXS['0000110'], name="HumanAssociated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HumanAssociated_samp_store_temp, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HumanAssociated_samp_vol_we_dna_ext, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_smoker = Slot(uri=MIXS['0000262'], name="HumanAssociated_smoker", curie=MIXS.curie('0000262'),
                   model_uri=MIXS.HumanAssociated_smoker, domain=HumanAssociated, range=Optional[Union[bool, Bool]])

slots.HumanAssociated_study_complt_stat = Slot(uri=MIXS['0000898'], name="HumanAssociated_study_complt_stat", curie=MIXS.curie('0000898'),
                   model_uri=MIXS.HumanAssociated_study_complt_stat, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_temp = Slot(uri=MIXS['0000113'], name="HumanAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HumanAssociated_temp, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_travel_out_six_month = Slot(uri=MIXS['0000268'], name="HumanAssociated_travel_out_six_month", curie=MIXS.curie('0000268'),
                   model_uri=MIXS.HumanAssociated_travel_out_six_month, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_twin_sibling = Slot(uri=MIXS['0000326'], name="HumanAssociated_twin_sibling", curie=MIXS.curie('0000326'),
                   model_uri=MIXS.HumanAssociated_twin_sibling, domain=HumanAssociated, range=Optional[Union[bool, Bool]])

slots.HumanAssociated_urine_collect_meth = Slot(uri=MIXS['0000899'], name="HumanAssociated_urine_collect_meth", curie=MIXS.curie('0000899'),
                   model_uri=MIXS.HumanAssociated_urine_collect_meth, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_urogenit_tract_disor = Slot(uri=MIXS['0000278'], name="HumanAssociated_urogenit_tract_disor", curie=MIXS.curie('0000278'),
                   model_uri=MIXS.HumanAssociated_urogenit_tract_disor, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanAssociated_weight_loss_3_month = Slot(uri=MIXS['0000295'], name="HumanAssociated_weight_loss_3_month", curie=MIXS.curie('0000295'),
                   model_uri=MIXS.HumanAssociated_weight_loss_3_month, domain=HumanAssociated, range=Optional[str])

slots.HumanGut_chem_administration = Slot(uri=MIXS['0000751'], name="HumanGut_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HumanGut_chem_administration, domain=HumanGut, range=Optional[str])

slots.HumanGut_ethnicity = Slot(uri=MIXS['0000895'], name="HumanGut_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.HumanGut_ethnicity, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_gastrointest_disord = Slot(uri=MIXS['0000280'], name="HumanGut_gastrointest_disord", curie=MIXS.curie('0000280'),
                   model_uri=MIXS.HumanGut_gastrointest_disord, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_age = Slot(uri=MIXS['0000255'], name="HumanGut_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HumanGut_host_age, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_body_mass_index = Slot(uri=MIXS['0000317'], name="HumanGut_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.HumanGut_host_body_mass_index, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_body_site = Slot(uri=MIXS['0000867'], name="HumanGut_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HumanGut_host_body_site, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanGut_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanGut_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HumanGut_host_body_temp, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_diet = Slot(uri=MIXS['0000869'], name="HumanGut_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HumanGut_host_diet, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanGut_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HumanGut_host_disease_stat, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HumanGut_host_genotype = Slot(uri=MIXS['0000365'], name="HumanGut_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HumanGut_host_genotype, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_height = Slot(uri=MIXS['0000264'], name="HumanGut_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HumanGut_host_height, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanGut_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HumanGut_host_last_meal, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_occupation = Slot(uri=MIXS['0000896'], name="HumanGut_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.HumanGut_host_occupation, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanGut_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HumanGut_host_phenotype, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanGut_host_pulse = Slot(uri=MIXS['0000333'], name="HumanGut_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.HumanGut_host_pulse, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanGut_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HumanGut_host_subject_id, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanGut_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HumanGut_host_tot_mass, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="HumanGut_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.HumanGut_ihmc_medication_code, domain=HumanGut, range=Optional[int])

slots.HumanGut_liver_disord = Slot(uri=MIXS['0000282'], name="HumanGut_liver_disord", curie=MIXS.curie('0000282'),
                   model_uri=MIXS.HumanGut_liver_disord, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_medic_hist_perform = Slot(uri=MIXS['0000897'], name="HumanGut_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.HumanGut_medic_hist_perform, domain=HumanGut, range=Optional[Union[bool, Bool]])

slots.HumanGut_misc_param = Slot(uri=MIXS['0000752'], name="HumanGut_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HumanGut_misc_param, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HumanGut_organism_count = Slot(uri=MIXS['0000103'], name="HumanGut_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HumanGut_organism_count, domain=HumanGut, range=Optional[str])

slots.HumanGut_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanGut_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HumanGut_oxy_stat_samp, domain=HumanGut, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanGut_perturbation = Slot(uri=MIXS['0000754'], name="HumanGut_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HumanGut_perturbation, domain=HumanGut, range=Optional[str])

slots.HumanGut_project_name = Slot(uri=MIXS['0000092'], name="HumanGut_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HumanGut_project_name, domain=HumanGut, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_salinity = Slot(uri=MIXS['0000183'], name="HumanGut_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HumanGut_salinity, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanGut_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HumanGut_samp_store_dur, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HumanGut_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanGut_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HumanGut_samp_store_loc, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanGut_samp_store_temp = Slot(uri=MIXS['0000110'], name="HumanGut_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HumanGut_samp_store_temp, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanGut_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HumanGut_samp_vol_we_dna_ext, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanGut_special_diet = Slot(uri=MIXS['0000905'], name="HumanGut_special_diet", curie=MIXS.curie('0000905'),
                   model_uri=MIXS.HumanGut_special_diet, domain=HumanGut, range=Optional[str])

slots.HumanGut_temp = Slot(uri=MIXS['0000113'], name="HumanGut_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HumanGut_temp, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_chem_administration = Slot(uri=MIXS['0000751'], name="HumanOral_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HumanOral_chem_administration, domain=HumanOral, range=Optional[str])

slots.HumanOral_ethnicity = Slot(uri=MIXS['0000895'], name="HumanOral_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.HumanOral_ethnicity, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_age = Slot(uri=MIXS['0000255'], name="HumanOral_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HumanOral_host_age, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_body_mass_index = Slot(uri=MIXS['0000317'], name="HumanOral_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.HumanOral_host_body_mass_index, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_body_site = Slot(uri=MIXS['0000867'], name="HumanOral_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HumanOral_host_body_site, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanOral_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanOral_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HumanOral_host_body_temp, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_diet = Slot(uri=MIXS['0000869'], name="HumanOral_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HumanOral_host_diet, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanOral_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HumanOral_host_disease_stat, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HumanOral_host_genotype = Slot(uri=MIXS['0000365'], name="HumanOral_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HumanOral_host_genotype, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_height = Slot(uri=MIXS['0000264'], name="HumanOral_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HumanOral_host_height, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanOral_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HumanOral_host_last_meal, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_occupation = Slot(uri=MIXS['0000896'], name="HumanOral_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.HumanOral_host_occupation, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanOral_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HumanOral_host_phenotype, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanOral_host_pulse = Slot(uri=MIXS['0000333'], name="HumanOral_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.HumanOral_host_pulse, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanOral_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HumanOral_host_subject_id, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanOral_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HumanOral_host_tot_mass, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="HumanOral_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.HumanOral_ihmc_medication_code, domain=HumanOral, range=Optional[int])

slots.HumanOral_medic_hist_perform = Slot(uri=MIXS['0000897'], name="HumanOral_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.HumanOral_medic_hist_perform, domain=HumanOral, range=Optional[Union[bool, Bool]])

slots.HumanOral_misc_param = Slot(uri=MIXS['0000752'], name="HumanOral_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HumanOral_misc_param, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HumanOral_organism_count = Slot(uri=MIXS['0000103'], name="HumanOral_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HumanOral_organism_count, domain=HumanOral, range=Optional[str])

slots.HumanOral_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanOral_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HumanOral_oxy_stat_samp, domain=HumanOral, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanOral_perturbation = Slot(uri=MIXS['0000754'], name="HumanOral_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HumanOral_perturbation, domain=HumanOral, range=Optional[str])

slots.HumanOral_project_name = Slot(uri=MIXS['0000092'], name="HumanOral_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HumanOral_project_name, domain=HumanOral, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_salinity = Slot(uri=MIXS['0000183'], name="HumanOral_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HumanOral_salinity, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanOral_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HumanOral_samp_store_dur, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HumanOral_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanOral_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HumanOral_samp_store_loc, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanOral_samp_store_temp = Slot(uri=MIXS['0000110'], name="HumanOral_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HumanOral_samp_store_temp, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanOral_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HumanOral_samp_vol_we_dna_ext, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_temp = Slot(uri=MIXS['0000113'], name="HumanOral_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HumanOral_temp, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanOral_time_last_toothbrush = Slot(uri=MIXS['0000924'], name="HumanOral_time_last_toothbrush", curie=MIXS.curie('0000924'),
                   model_uri=MIXS.HumanOral_time_last_toothbrush, domain=HumanOral, range=Optional[str])

slots.HumanSkin_chem_administration = Slot(uri=MIXS['0000751'], name="HumanSkin_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HumanSkin_chem_administration, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_dermatology_disord = Slot(uri=MIXS['0000284'], name="HumanSkin_dermatology_disord", curie=MIXS.curie('0000284'),
                   model_uri=MIXS.HumanSkin_dermatology_disord, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_dominant_hand = Slot(uri=MIXS['0000944'], name="HumanSkin_dominant_hand", curie=MIXS.curie('0000944'),
                   model_uri=MIXS.HumanSkin_dominant_hand, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_ethnicity = Slot(uri=MIXS['0000895'], name="HumanSkin_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.HumanSkin_ethnicity, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_age = Slot(uri=MIXS['0000255'], name="HumanSkin_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HumanSkin_host_age, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_body_mass_index = Slot(uri=MIXS['0000317'], name="HumanSkin_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.HumanSkin_host_body_mass_index, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_body_site = Slot(uri=MIXS['0000867'], name="HumanSkin_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HumanSkin_host_body_site, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanSkin_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanSkin_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HumanSkin_host_body_temp, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_diet = Slot(uri=MIXS['0000869'], name="HumanSkin_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HumanSkin_host_diet, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanSkin_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HumanSkin_host_disease_stat, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HumanSkin_host_genotype = Slot(uri=MIXS['0000365'], name="HumanSkin_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HumanSkin_host_genotype, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_height = Slot(uri=MIXS['0000264'], name="HumanSkin_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HumanSkin_host_height, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanSkin_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HumanSkin_host_last_meal, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_occupation = Slot(uri=MIXS['0000896'], name="HumanSkin_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.HumanSkin_host_occupation, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanSkin_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HumanSkin_host_phenotype, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanSkin_host_pulse = Slot(uri=MIXS['0000333'], name="HumanSkin_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.HumanSkin_host_pulse, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanSkin_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HumanSkin_host_subject_id, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanSkin_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HumanSkin_host_tot_mass, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="HumanSkin_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.HumanSkin_ihmc_medication_code, domain=HumanSkin, range=Optional[int])

slots.HumanSkin_medic_hist_perform = Slot(uri=MIXS['0000897'], name="HumanSkin_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.HumanSkin_medic_hist_perform, domain=HumanSkin, range=Optional[Union[bool, Bool]])

slots.HumanSkin_misc_param = Slot(uri=MIXS['0000752'], name="HumanSkin_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HumanSkin_misc_param, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HumanSkin_organism_count = Slot(uri=MIXS['0000103'], name="HumanSkin_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HumanSkin_organism_count, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanSkin_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HumanSkin_oxy_stat_samp, domain=HumanSkin, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanSkin_perturbation = Slot(uri=MIXS['0000754'], name="HumanSkin_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HumanSkin_perturbation, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_project_name = Slot(uri=MIXS['0000092'], name="HumanSkin_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HumanSkin_project_name, domain=HumanSkin, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_salinity = Slot(uri=MIXS['0000183'], name="HumanSkin_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HumanSkin_salinity, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanSkin_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HumanSkin_samp_store_dur, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HumanSkin_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanSkin_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HumanSkin_samp_store_loc, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanSkin_samp_store_temp = Slot(uri=MIXS['0000110'], name="HumanSkin_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HumanSkin_samp_store_temp, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanSkin_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HumanSkin_samp_vol_we_dna_ext, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_temp = Slot(uri=MIXS['0000113'], name="HumanSkin_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HumanSkin_temp, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanSkin_time_since_last_wash = Slot(uri=MIXS['0000943'], name="HumanSkin_time_since_last_wash", curie=MIXS.curie('0000943'),
                   model_uri=MIXS.HumanSkin_time_since_last_wash, domain=HumanSkin, range=Optional[str])

slots.HumanVaginal_birth_control = Slot(uri=MIXS['0000286'], name="HumanVaginal_birth_control", curie=MIXS.curie('0000286'),
                   model_uri=MIXS.HumanVaginal_birth_control, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_chem_administration = Slot(uri=MIXS['0000751'], name="HumanVaginal_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.HumanVaginal_chem_administration, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_douche = Slot(uri=MIXS['0000967'], name="HumanVaginal_douche", curie=MIXS.curie('0000967'),
                   model_uri=MIXS.HumanVaginal_douche, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_ethnicity = Slot(uri=MIXS['0000895'], name="HumanVaginal_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS.HumanVaginal_ethnicity, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_gynecologic_disord = Slot(uri=MIXS['0000288'], name="HumanVaginal_gynecologic_disord", curie=MIXS.curie('0000288'),
                   model_uri=MIXS.HumanVaginal_gynecologic_disord, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_age = Slot(uri=MIXS['0000255'], name="HumanVaginal_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.HumanVaginal_host_age, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_body_mass_index = Slot(uri=MIXS['0000317'], name="HumanVaginal_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS.HumanVaginal_host_body_mass_index, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_body_site = Slot(uri=MIXS['0000867'], name="HumanVaginal_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.HumanVaginal_host_body_site, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanVaginal_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanVaginal_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS.HumanVaginal_host_body_temp, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_diet = Slot(uri=MIXS['0000869'], name="HumanVaginal_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS.HumanVaginal_host_diet, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanVaginal_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.HumanVaginal_host_disease_stat, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.HumanVaginal_host_genotype = Slot(uri=MIXS['0000365'], name="HumanVaginal_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.HumanVaginal_host_genotype, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_height = Slot(uri=MIXS['0000264'], name="HumanVaginal_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.HumanVaginal_host_height, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanVaginal_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS.HumanVaginal_host_last_meal, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_occupation = Slot(uri=MIXS['0000896'], name="HumanVaginal_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS.HumanVaginal_host_occupation, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanVaginal_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.HumanVaginal_host_phenotype, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HumanVaginal_host_pulse = Slot(uri=MIXS['0000333'], name="HumanVaginal_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS.HumanVaginal_host_pulse, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanVaginal_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.HumanVaginal_host_subject_id, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanVaginal_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.HumanVaginal_host_tot_mass, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_hrt = Slot(uri=MIXS['0000969'], name="HumanVaginal_hrt", curie=MIXS.curie('0000969'),
                   model_uri=MIXS.HumanVaginal_hrt, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_hysterectomy = Slot(uri=MIXS['0000287'], name="HumanVaginal_hysterectomy", curie=MIXS.curie('0000287'),
                   model_uri=MIXS.HumanVaginal_hysterectomy, domain=HumanVaginal, range=Optional[Union[bool, Bool]])

slots.HumanVaginal_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="HumanVaginal_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS.HumanVaginal_ihmc_medication_code, domain=HumanVaginal, range=Optional[int])

slots.HumanVaginal_medic_hist_perform = Slot(uri=MIXS['0000897'], name="HumanVaginal_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS.HumanVaginal_medic_hist_perform, domain=HumanVaginal, range=Optional[Union[bool, Bool]])

slots.HumanVaginal_menarche = Slot(uri=MIXS['0000965'], name="HumanVaginal_menarche", curie=MIXS.curie('0000965'),
                   model_uri=MIXS.HumanVaginal_menarche, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_menopause = Slot(uri=MIXS['0000968'], name="HumanVaginal_menopause", curie=MIXS.curie('0000968'),
                   model_uri=MIXS.HumanVaginal_menopause, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_misc_param = Slot(uri=MIXS['0000752'], name="HumanVaginal_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HumanVaginal_misc_param, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HumanVaginal_organism_count = Slot(uri=MIXS['0000103'], name="HumanVaginal_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HumanVaginal_organism_count, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanVaginal_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HumanVaginal_oxy_stat_samp, domain=HumanVaginal, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanVaginal_perturbation = Slot(uri=MIXS['0000754'], name="HumanVaginal_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.HumanVaginal_perturbation, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_pregnancy = Slot(uri=MIXS['0000966'], name="HumanVaginal_pregnancy", curie=MIXS.curie('0000966'),
                   model_uri=MIXS.HumanVaginal_pregnancy, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_project_name = Slot(uri=MIXS['0000092'], name="HumanVaginal_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HumanVaginal_project_name, domain=HumanVaginal, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_salinity = Slot(uri=MIXS['0000183'], name="HumanVaginal_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HumanVaginal_salinity, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_samp_salinity = Slot(uri=MIXS['0000109'], name="HumanVaginal_samp_salinity", curie=MIXS.curie('0000109'),
                   model_uri=MIXS.HumanVaginal_samp_salinity, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanVaginal_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HumanVaginal_samp_store_dur, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HumanVaginal_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanVaginal_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HumanVaginal_samp_store_loc, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_samp_store_temp = Slot(uri=MIXS['0000110'], name="HumanVaginal_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HumanVaginal_samp_store_temp, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanVaginal_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HumanVaginal_samp_vol_we_dna_ext, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_sexual_act = Slot(uri=MIXS['0000285'], name="HumanVaginal_sexual_act", curie=MIXS.curie('0000285'),
                   model_uri=MIXS.HumanVaginal_sexual_act, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_temp = Slot(uri=MIXS['0000113'], name="HumanVaginal_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HumanVaginal_temp, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HumanVaginal_urogenit_disord = Slot(uri=MIXS['0000289'], name="HumanVaginal_urogenit_disord", curie=MIXS.curie('0000289'),
                   model_uri=MIXS.HumanVaginal_urogenit_disord, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_additional_info = Slot(uri=MIXS['0000300'], name="HydrocarbonResourcesCores_additional_info", curie=MIXS.curie('0000300'),
                   model_uri=MIXS.HydrocarbonResourcesCores_additional_info, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_alkalinity = Slot(uri=MIXS['0000421'], name="HydrocarbonResourcesCores_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.HydrocarbonResourcesCores_alkalinity, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_alkalinity_method = Slot(uri=MIXS['0000298'], name="HydrocarbonResourcesCores_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=MIXS.HydrocarbonResourcesCores_alkalinity_method, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_ammonium = Slot(uri=MIXS['0000427'], name="HydrocarbonResourcesCores_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.HydrocarbonResourcesCores_ammonium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_api = Slot(uri=MIXS['0000157'], name="HydrocarbonResourcesCores_api", curie=MIXS.curie('0000157'),
                   model_uri=MIXS.HydrocarbonResourcesCores_api, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_aromatics_pc = Slot(uri=MIXS['0000133'], name="HydrocarbonResourcesCores_aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=MIXS.HydrocarbonResourcesCores_aromatics_pc, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_asphaltenes_pc = Slot(uri=MIXS['0000135'], name="HydrocarbonResourcesCores_asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=MIXS.HydrocarbonResourcesCores_asphaltenes_pc, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_basin = Slot(uri=MIXS['0000290'], name="HydrocarbonResourcesCores_basin", curie=MIXS.curie('0000290'),
                   model_uri=MIXS.HydrocarbonResourcesCores_basin, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_benzene = Slot(uri=MIXS['0000153'], name="HydrocarbonResourcesCores_benzene", curie=MIXS.curie('0000153'),
                   model_uri=MIXS.HydrocarbonResourcesCores_benzene, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_calcium = Slot(uri=MIXS['0000432'], name="HydrocarbonResourcesCores_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.HydrocarbonResourcesCores_calcium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_chloride = Slot(uri=MIXS['0000429'], name="HydrocarbonResourcesCores_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.HydrocarbonResourcesCores_chloride, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_density = Slot(uri=MIXS['0000435'], name="HydrocarbonResourcesCores_density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.HydrocarbonResourcesCores_density, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_depos_env = Slot(uri=MIXS['0000992'], name="HydrocarbonResourcesCores_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS.HydrocarbonResourcesCores_depos_env, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="HydrocarbonResourcesCores_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_carb_dioxide, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="HydrocarbonResourcesCores_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_inorg_carb, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="HydrocarbonResourcesCores_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_inorg_phosp, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_diss_iron = Slot(uri=MIXS['0000139'], name="HydrocarbonResourcesCores_diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_iron, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_diss_org_carb = Slot(uri=MIXS['0000433'], name="HydrocarbonResourcesCores_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_org_carb, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="HydrocarbonResourcesCores_diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=MIXS.HydrocarbonResourcesCores_diss_oxygen_fluid, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_elev = Slot(uri=MIXS['0000093'], name="HydrocarbonResourcesCores_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.HydrocarbonResourcesCores_elev, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_ethylbenzene = Slot(uri=MIXS['0000155'], name="HydrocarbonResourcesCores_ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=MIXS.HydrocarbonResourcesCores_ethylbenzene, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_field = Slot(uri=MIXS['0000291'], name="HydrocarbonResourcesCores_field", curie=MIXS.curie('0000291'),
                   model_uri=MIXS.HydrocarbonResourcesCores_field, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_hc_produced = Slot(uri=MIXS['0000989'], name="HydrocarbonResourcesCores_hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hc_produced, domain=HydrocarbonResourcesCores, range=str)

slots.HydrocarbonResourcesCores_hcr = Slot(uri=MIXS['0000988'], name="HydrocarbonResourcesCores_hcr", curie=MIXS.curie('0000988'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hcr, domain=HydrocarbonResourcesCores, range=str)

slots.HydrocarbonResourcesCores_hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="HydrocarbonResourcesCores_hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hcr_fw_salinity, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_hcr_geol_age = Slot(uri=MIXS['0000993'], name="HydrocarbonResourcesCores_hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hcr_geol_age, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_hcr_pressure = Slot(uri=MIXS['0000395'], name="HydrocarbonResourcesCores_hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hcr_pressure, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_hcr_temp = Slot(uri=MIXS['0000393'], name="HydrocarbonResourcesCores_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS.HydrocarbonResourcesCores_hcr_temp, domain=HydrocarbonResourcesCores, range=str)

slots.HydrocarbonResourcesCores_lithology = Slot(uri=MIXS['0000990'], name="HydrocarbonResourcesCores_lithology", curie=MIXS.curie('0000990'),
                   model_uri=MIXS.HydrocarbonResourcesCores_lithology, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_magnesium = Slot(uri=MIXS['0000431'], name="HydrocarbonResourcesCores_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.HydrocarbonResourcesCores_magnesium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_misc_param = Slot(uri=MIXS['0000752'], name="HydrocarbonResourcesCores_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HydrocarbonResourcesCores_misc_param, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HydrocarbonResourcesCores_nitrate = Slot(uri=MIXS['0000425'], name="HydrocarbonResourcesCores_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.HydrocarbonResourcesCores_nitrate, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_nitrite = Slot(uri=MIXS['0000426'], name="HydrocarbonResourcesCores_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.HydrocarbonResourcesCores_nitrite, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="HydrocarbonResourcesCores_org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=MIXS.HydrocarbonResourcesCores_org_count_qpcr_info, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_organism_count = Slot(uri=MIXS['0000103'], name="HydrocarbonResourcesCores_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HydrocarbonResourcesCores_organism_count, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_owc_tvdss = Slot(uri=MIXS['0000405'], name="HydrocarbonResourcesCores_owc_tvdss", curie=MIXS.curie('0000405'),
                   model_uri=MIXS.HydrocarbonResourcesCores_owc_tvdss, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HydrocarbonResourcesCores_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HydrocarbonResourcesCores_oxy_stat_samp, domain=HydrocarbonResourcesCores, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HydrocarbonResourcesCores_permeability = Slot(uri=MIXS['0000404'], name="HydrocarbonResourcesCores_permeability", curie=MIXS.curie('0000404'),
                   model_uri=MIXS.HydrocarbonResourcesCores_permeability, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_ph = Slot(uri=MIXS['0001001'], name="HydrocarbonResourcesCores_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.HydrocarbonResourcesCores_ph, domain=HydrocarbonResourcesCores, range=Optional[float])

slots.HydrocarbonResourcesCores_porosity = Slot(uri=MIXS['0000211'], name="HydrocarbonResourcesCores_porosity", curie=MIXS.curie('0000211'),
                   model_uri=MIXS.HydrocarbonResourcesCores_porosity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_potassium = Slot(uri=MIXS['0000430'], name="HydrocarbonResourcesCores_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.HydrocarbonResourcesCores_potassium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_pour_point = Slot(uri=MIXS['0000127'], name="HydrocarbonResourcesCores_pour_point", curie=MIXS.curie('0000127'),
                   model_uri=MIXS.HydrocarbonResourcesCores_pour_point, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_pressure = Slot(uri=MIXS['0000412'], name="HydrocarbonResourcesCores_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.HydrocarbonResourcesCores_pressure, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_project_name = Slot(uri=MIXS['0000092'], name="HydrocarbonResourcesCores_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HydrocarbonResourcesCores_project_name, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_reservoir = Slot(uri=MIXS['0000303'], name="HydrocarbonResourcesCores_reservoir", curie=MIXS.curie('0000303'),
                   model_uri=MIXS.HydrocarbonResourcesCores_reservoir, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_resins_pc = Slot(uri=MIXS['0000134'], name="HydrocarbonResourcesCores_resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=MIXS.HydrocarbonResourcesCores_resins_pc, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_salinity = Slot(uri=MIXS['0000183'], name="HydrocarbonResourcesCores_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HydrocarbonResourcesCores_salinity, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_samp_md = Slot(uri=MIXS['0000413'], name="HydrocarbonResourcesCores_samp_md", curie=MIXS.curie('0000413'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_md, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_samp_store_dur = Slot(uri=MIXS['0000116'], name="HydrocarbonResourcesCores_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_store_dur, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HydrocarbonResourcesCores_samp_store_loc = Slot(uri=MIXS['0000755'], name="HydrocarbonResourcesCores_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_store_loc, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_samp_store_temp = Slot(uri=MIXS['0000110'], name="HydrocarbonResourcesCores_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_store_temp, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_samp_subtype = Slot(uri=MIXS['0000999'], name="HydrocarbonResourcesCores_samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_subtype, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_samp_transport_cond = Slot(uri=MIXS['0000410'], name="HydrocarbonResourcesCores_samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_transport_cond, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_samp_tvdss = Slot(uri=MIXS['0000409'], name="HydrocarbonResourcesCores_samp_tvdss", curie=MIXS.curie('0000409'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_tvdss, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_samp_type = Slot(uri=MIXS['0000998'], name="HydrocarbonResourcesCores_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_type, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HydrocarbonResourcesCores_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HydrocarbonResourcesCores_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_vol_we_dna_ext, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_samp_well_name = Slot(uri=MIXS['0000296'], name="HydrocarbonResourcesCores_samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=MIXS.HydrocarbonResourcesCores_samp_well_name, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_saturates_pc = Slot(uri=MIXS['0000131'], name="HydrocarbonResourcesCores_saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=MIXS.HydrocarbonResourcesCores_saturates_pc, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_sodium = Slot(uri=MIXS['0000428'], name="HydrocarbonResourcesCores_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sodium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_sr_dep_env = Slot(uri=MIXS['0000996'], name="HydrocarbonResourcesCores_sr_dep_env", curie=MIXS.curie('0000996'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sr_dep_env, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_sr_geol_age = Slot(uri=MIXS['0000997'], name="HydrocarbonResourcesCores_sr_geol_age", curie=MIXS.curie('0000997'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sr_geol_age, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_sr_kerog_type = Slot(uri=MIXS['0000994'], name="HydrocarbonResourcesCores_sr_kerog_type", curie=MIXS.curie('0000994'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sr_kerog_type, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_sr_lithology = Slot(uri=MIXS['0000995'], name="HydrocarbonResourcesCores_sr_lithology", curie=MIXS.curie('0000995'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sr_lithology, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_sulfate = Slot(uri=MIXS['0000423'], name="HydrocarbonResourcesCores_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sulfate, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_sulfate_fw = Slot(uri=MIXS['0000407'], name="HydrocarbonResourcesCores_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sulfate_fw, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_sulfide = Slot(uri=MIXS['0000424'], name="HydrocarbonResourcesCores_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.HydrocarbonResourcesCores_sulfide, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_suspend_solids = Slot(uri=MIXS['0000150'], name="HydrocarbonResourcesCores_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=MIXS.HydrocarbonResourcesCores_suspend_solids, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tan = Slot(uri=MIXS['0000120'], name="HydrocarbonResourcesCores_tan", curie=MIXS.curie('0000120'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tan, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_temp = Slot(uri=MIXS['0000113'], name="HydrocarbonResourcesCores_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HydrocarbonResourcesCores_temp, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_toluene = Slot(uri=MIXS['0000154'], name="HydrocarbonResourcesCores_toluene", curie=MIXS.curie('0000154'),
                   model_uri=MIXS.HydrocarbonResourcesCores_toluene, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tot_iron = Slot(uri=MIXS['0000105'], name="HydrocarbonResourcesCores_tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tot_iron, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tot_phosp = Slot(uri=MIXS['0000117'], name="HydrocarbonResourcesCores_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tot_phosp, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tot_sulfur = Slot(uri=MIXS['0000419'], name="HydrocarbonResourcesCores_tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tot_sulfur, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="HydrocarbonResourcesCores_tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tvdss_of_hcr_press, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="HydrocarbonResourcesCores_tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=MIXS.HydrocarbonResourcesCores_tvdss_of_hcr_temp, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_vfa = Slot(uri=MIXS['0000152'], name="HydrocarbonResourcesCores_vfa", curie=MIXS.curie('0000152'),
                   model_uri=MIXS.HydrocarbonResourcesCores_vfa, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_vfa_fw = Slot(uri=MIXS['0000408'], name="HydrocarbonResourcesCores_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS.HydrocarbonResourcesCores_vfa_fw, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_viscosity = Slot(uri=MIXS['0000126'], name="HydrocarbonResourcesCores_viscosity", curie=MIXS.curie('0000126'),
                   model_uri=MIXS.HydrocarbonResourcesCores_viscosity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_win = Slot(uri=MIXS['0000297'], name="HydrocarbonResourcesCores_win", curie=MIXS.curie('0000297'),
                   model_uri=MIXS.HydrocarbonResourcesCores_win, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesCores_xylene = Slot(uri=MIXS['0000156'], name="HydrocarbonResourcesCores_xylene", curie=MIXS.curie('0000156'),
                   model_uri=MIXS.HydrocarbonResourcesCores_xylene, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_add_recov_method = Slot(uri=MIXS['0001009'], name="HydrocarbonResourcesFluidsSwabs_add_recov_method", curie=MIXS.curie('0001009'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_add_recov_method, domain=HydrocarbonResourcesFluidsSwabs, range=str)

slots.HydrocarbonResourcesFluidsSwabs_additional_info = Slot(uri=MIXS['0000300'], name="HydrocarbonResourcesFluidsSwabs_additional_info", curie=MIXS.curie('0000300'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_additional_info, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_alkalinity = Slot(uri=MIXS['0000421'], name="HydrocarbonResourcesFluidsSwabs_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_alkalinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_alkalinity_method = Slot(uri=MIXS['0000298'], name="HydrocarbonResourcesFluidsSwabs_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_alkalinity_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_ammonium = Slot(uri=MIXS['0000427'], name="HydrocarbonResourcesFluidsSwabs_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_ammonium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_api = Slot(uri=MIXS['0000157'], name="HydrocarbonResourcesFluidsSwabs_api", curie=MIXS.curie('0000157'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_api, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_aromatics_pc = Slot(uri=MIXS['0000133'], name="HydrocarbonResourcesFluidsSwabs_aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_aromatics_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_asphaltenes_pc = Slot(uri=MIXS['0000135'], name="HydrocarbonResourcesFluidsSwabs_asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_asphaltenes_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_basin = Slot(uri=MIXS['0000290'], name="HydrocarbonResourcesFluidsSwabs_basin", curie=MIXS.curie('0000290'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_basin, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_benzene = Slot(uri=MIXS['0000153'], name="HydrocarbonResourcesFluidsSwabs_benzene", curie=MIXS.curie('0000153'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_benzene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_biocide = Slot(uri=MIXS['0001011'], name="HydrocarbonResourcesFluidsSwabs_biocide", curie=MIXS.curie('0001011'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_biocide, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_biocide_admin_method = Slot(uri=MIXS['0000456'], name="HydrocarbonResourcesFluidsSwabs_biocide_admin_method", curie=MIXS.curie('0000456'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_biocide_admin_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_calcium = Slot(uri=MIXS['0000432'], name="HydrocarbonResourcesFluidsSwabs_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_calcium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_chem_treat_method = Slot(uri=MIXS['0000457'], name="HydrocarbonResourcesFluidsSwabs_chem_treat_method", curie=MIXS.curie('0000457'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_chem_treat_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_chem_treatment = Slot(uri=MIXS['0001012'], name="HydrocarbonResourcesFluidsSwabs_chem_treatment", curie=MIXS.curie('0001012'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_chem_treatment, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_chloride = Slot(uri=MIXS['0000429'], name="HydrocarbonResourcesFluidsSwabs_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_chloride, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_density = Slot(uri=MIXS['0000435'], name="HydrocarbonResourcesFluidsSwabs_density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_density, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_depos_env = Slot(uri=MIXS['0000992'], name="HydrocarbonResourcesFluidsSwabs_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_depos_env, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="HydrocarbonResourcesFluidsSwabs_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_carb_dioxide, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="HydrocarbonResourcesFluidsSwabs_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_inorg_carb, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_diss_iron = Slot(uri=MIXS['0000139'], name="HydrocarbonResourcesFluidsSwabs_diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_iron, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_diss_org_carb = Slot(uri=MIXS['0000433'], name="HydrocarbonResourcesFluidsSwabs_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_org_carb, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="HydrocarbonResourcesFluidsSwabs_diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_diss_oxygen_fluid, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_ethylbenzene = Slot(uri=MIXS['0000155'], name="HydrocarbonResourcesFluidsSwabs_ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_ethylbenzene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_field = Slot(uri=MIXS['0000291'], name="HydrocarbonResourcesFluidsSwabs_field", curie=MIXS.curie('0000291'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_field, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_hc_produced = Slot(uri=MIXS['0000989'], name="HydrocarbonResourcesFluidsSwabs_hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hc_produced, domain=HydrocarbonResourcesFluidsSwabs, range=str)

slots.HydrocarbonResourcesFluidsSwabs_hcr = Slot(uri=MIXS['0000988'], name="HydrocarbonResourcesFluidsSwabs_hcr", curie=MIXS.curie('0000988'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hcr, domain=HydrocarbonResourcesFluidsSwabs, range=str)

slots.HydrocarbonResourcesFluidsSwabs_hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="HydrocarbonResourcesFluidsSwabs_hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hcr_fw_salinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_hcr_geol_age = Slot(uri=MIXS['0000993'], name="HydrocarbonResourcesFluidsSwabs_hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hcr_geol_age, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_hcr_pressure = Slot(uri=MIXS['0000395'], name="HydrocarbonResourcesFluidsSwabs_hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hcr_pressure, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_hcr_temp = Slot(uri=MIXS['0000393'], name="HydrocarbonResourcesFluidsSwabs_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_hcr_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_iw_bt_date_well = Slot(uri=MIXS['0001010'], name="HydrocarbonResourcesFluidsSwabs_iw_bt_date_well", curie=MIXS.curie('0001010'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_iw_bt_date_well, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_iwf = Slot(uri=MIXS['0000455'], name="HydrocarbonResourcesFluidsSwabs_iwf", curie=MIXS.curie('0000455'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_iwf, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_lithology = Slot(uri=MIXS['0000990'], name="HydrocarbonResourcesFluidsSwabs_lithology", curie=MIXS.curie('0000990'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_lithology, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_magnesium = Slot(uri=MIXS['0000431'], name="HydrocarbonResourcesFluidsSwabs_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_magnesium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_misc_param = Slot(uri=MIXS['0000752'], name="HydrocarbonResourcesFluidsSwabs_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_misc_param, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.HydrocarbonResourcesFluidsSwabs_nitrate = Slot(uri=MIXS['0000425'], name="HydrocarbonResourcesFluidsSwabs_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_nitrate, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_nitrite = Slot(uri=MIXS['0000426'], name="HydrocarbonResourcesFluidsSwabs_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_nitrite, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="HydrocarbonResourcesFluidsSwabs_org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_org_count_qpcr_info, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_organism_count = Slot(uri=MIXS['0000103'], name="HydrocarbonResourcesFluidsSwabs_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_organism_count, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HydrocarbonResourcesFluidsSwabs_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_oxy_stat_samp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HydrocarbonResourcesFluidsSwabs_ph = Slot(uri=MIXS['0001001'], name="HydrocarbonResourcesFluidsSwabs_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_ph, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[float])

slots.HydrocarbonResourcesFluidsSwabs_potassium = Slot(uri=MIXS['0000430'], name="HydrocarbonResourcesFluidsSwabs_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_potassium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_pour_point = Slot(uri=MIXS['0000127'], name="HydrocarbonResourcesFluidsSwabs_pour_point", curie=MIXS.curie('0000127'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_pour_point, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_pressure = Slot(uri=MIXS['0000412'], name="HydrocarbonResourcesFluidsSwabs_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_pressure, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_prod_rate = Slot(uri=MIXS['0000452'], name="HydrocarbonResourcesFluidsSwabs_prod_rate", curie=MIXS.curie('0000452'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_prod_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_prod_start_date = Slot(uri=MIXS['0001008'], name="HydrocarbonResourcesFluidsSwabs_prod_start_date", curie=MIXS.curie('0001008'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_prod_start_date, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_project_name = Slot(uri=MIXS['0000092'], name="HydrocarbonResourcesFluidsSwabs_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_project_name, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_reservoir = Slot(uri=MIXS['0000303'], name="HydrocarbonResourcesFluidsSwabs_reservoir", curie=MIXS.curie('0000303'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_reservoir, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_resins_pc = Slot(uri=MIXS['0000134'], name="HydrocarbonResourcesFluidsSwabs_resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_resins_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_salinity = Slot(uri=MIXS['0000183'], name="HydrocarbonResourcesFluidsSwabs_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_salinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_samp_collect_point = Slot(uri=MIXS['0001015'], name="HydrocarbonResourcesFluidsSwabs_samp_collect_point", curie=MIXS.curie('0001015'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_collect_point, domain=HydrocarbonResourcesFluidsSwabs, range=str)

slots.HydrocarbonResourcesFluidsSwabs_samp_loc_corr_rate = Slot(uri=MIXS['0000136'], name="HydrocarbonResourcesFluidsSwabs_samp_loc_corr_rate", curie=MIXS.curie('0000136'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_loc_corr_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_samp_preserv = Slot(uri=MIXS['0000463'], name="HydrocarbonResourcesFluidsSwabs_samp_preserv", curie=MIXS.curie('0000463'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_preserv, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_samp_store_dur = Slot(uri=MIXS['0000116'], name="HydrocarbonResourcesFluidsSwabs_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_store_dur, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.HydrocarbonResourcesFluidsSwabs_samp_store_loc = Slot(uri=MIXS['0000755'], name="HydrocarbonResourcesFluidsSwabs_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_store_loc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_samp_store_temp = Slot(uri=MIXS['0000110'], name="HydrocarbonResourcesFluidsSwabs_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_store_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_samp_subtype = Slot(uri=MIXS['0000999'], name="HydrocarbonResourcesFluidsSwabs_samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_subtype, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_samp_transport_cond = Slot(uri=MIXS['0000410'], name="HydrocarbonResourcesFluidsSwabs_samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_transport_cond, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_samp_type = Slot(uri=MIXS['0000998'], name="HydrocarbonResourcesFluidsSwabs_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_type, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_samp_well_name = Slot(uri=MIXS['0000296'], name="HydrocarbonResourcesFluidsSwabs_samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_samp_well_name, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_saturates_pc = Slot(uri=MIXS['0000131'], name="HydrocarbonResourcesFluidsSwabs_saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_saturates_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_sodium = Slot(uri=MIXS['0000428'], name="HydrocarbonResourcesFluidsSwabs_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_sodium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_sulfate = Slot(uri=MIXS['0000423'], name="HydrocarbonResourcesFluidsSwabs_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_sulfate, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_sulfate_fw = Slot(uri=MIXS['0000407'], name="HydrocarbonResourcesFluidsSwabs_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_sulfate_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_sulfide = Slot(uri=MIXS['0000424'], name="HydrocarbonResourcesFluidsSwabs_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_sulfide, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_suspend_solids = Slot(uri=MIXS['0000150'], name="HydrocarbonResourcesFluidsSwabs_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_suspend_solids, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tan = Slot(uri=MIXS['0000120'], name="HydrocarbonResourcesFluidsSwabs_tan", curie=MIXS.curie('0000120'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tan, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_temp = Slot(uri=MIXS['0000113'], name="HydrocarbonResourcesFluidsSwabs_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_temp, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_toluene = Slot(uri=MIXS['0000154'], name="HydrocarbonResourcesFluidsSwabs_toluene", curie=MIXS.curie('0000154'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_toluene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tot_iron = Slot(uri=MIXS['0000105'], name="HydrocarbonResourcesFluidsSwabs_tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tot_iron, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tot_phosp = Slot(uri=MIXS['0000117'], name="HydrocarbonResourcesFluidsSwabs_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tot_phosp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tot_sulfur = Slot(uri=MIXS['0000419'], name="HydrocarbonResourcesFluidsSwabs_tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tot_sulfur, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_press, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_tvdss_of_hcr_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_vfa = Slot(uri=MIXS['0000152'], name="HydrocarbonResourcesFluidsSwabs_vfa", curie=MIXS.curie('0000152'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_vfa, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_vfa_fw = Slot(uri=MIXS['0000408'], name="HydrocarbonResourcesFluidsSwabs_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_vfa_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_viscosity = Slot(uri=MIXS['0000126'], name="HydrocarbonResourcesFluidsSwabs_viscosity", curie=MIXS.curie('0000126'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_viscosity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_water_cut = Slot(uri=MIXS['0000454'], name="HydrocarbonResourcesFluidsSwabs_water_cut", curie=MIXS.curie('0000454'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_water_cut, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_water_prod_rate = Slot(uri=MIXS['0000453'], name="HydrocarbonResourcesFluidsSwabs_water_prod_rate", curie=MIXS.curie('0000453'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_water_prod_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_win = Slot(uri=MIXS['0000297'], name="HydrocarbonResourcesFluidsSwabs_win", curie=MIXS.curie('0000297'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_win, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.HydrocarbonResourcesFluidsSwabs_xylene = Slot(uri=MIXS['0000156'], name="HydrocarbonResourcesFluidsSwabs_xylene", curie=MIXS.curie('0000156'),
                   model_uri=MIXS.HydrocarbonResourcesFluidsSwabs_xylene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_alkalinity = Slot(uri=MIXS['0000421'], name="MicrobialMatBiofilm_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.MicrobialMatBiofilm_alkalinity, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_alkyl_diethers = Slot(uri=MIXS['0000490'], name="MicrobialMatBiofilm_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS.MicrobialMatBiofilm_alkyl_diethers, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_aminopept_act = Slot(uri=MIXS['0000172'], name="MicrobialMatBiofilm_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=MIXS.MicrobialMatBiofilm_aminopept_act, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_ammonium = Slot(uri=MIXS['0000427'], name="MicrobialMatBiofilm_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.MicrobialMatBiofilm_ammonium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="MicrobialMatBiofilm_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS.MicrobialMatBiofilm_bacteria_carb_prod, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_biomass = Slot(uri=MIXS['0000174'], name="MicrobialMatBiofilm_biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS.MicrobialMatBiofilm_biomass, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_bishomohopanol = Slot(uri=MIXS['0000175'], name="MicrobialMatBiofilm_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=MIXS.MicrobialMatBiofilm_bishomohopanol, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_bromide = Slot(uri=MIXS['0000176'], name="MicrobialMatBiofilm_bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS.MicrobialMatBiofilm_bromide, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_calcium = Slot(uri=MIXS['0000432'], name="MicrobialMatBiofilm_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.MicrobialMatBiofilm_calcium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="MicrobialMatBiofilm_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=MIXS.MicrobialMatBiofilm_carb_nitro_ratio, domain=MicrobialMatBiofilm, range=Optional[float])

slots.MicrobialMatBiofilm_chem_administration = Slot(uri=MIXS['0000751'], name="MicrobialMatBiofilm_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.MicrobialMatBiofilm_chem_administration, domain=MicrobialMatBiofilm, range=Optional[str])

slots.MicrobialMatBiofilm_chloride = Slot(uri=MIXS['0000429'], name="MicrobialMatBiofilm_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.MicrobialMatBiofilm_chloride, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_chlorophyll = Slot(uri=MIXS['0000177'], name="MicrobialMatBiofilm_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS.MicrobialMatBiofilm_chlorophyll, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diether_lipids = Slot(uri=MIXS['0000178'], name="MicrobialMatBiofilm_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS.MicrobialMatBiofilm_diether_lipids, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.MicrobialMatBiofilm_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="MicrobialMatBiofilm_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_carb_dioxide, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diss_hydrogen = Slot(uri=MIXS['0000179'], name="MicrobialMatBiofilm_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_hydrogen, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="MicrobialMatBiofilm_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_inorg_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diss_org_carb = Slot(uri=MIXS['0000433'], name="MicrobialMatBiofilm_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diss_org_nitro = Slot(uri=MIXS['0000162'], name="MicrobialMatBiofilm_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_diss_oxygen = Slot(uri=MIXS['0000119'], name="MicrobialMatBiofilm_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS.MicrobialMatBiofilm_diss_oxygen, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_elev = Slot(uri=MIXS['0000093'], name="MicrobialMatBiofilm_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MicrobialMatBiofilm_elev, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_glucosidase_act = Slot(uri=MIXS['0000137'], name="MicrobialMatBiofilm_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=MIXS.MicrobialMatBiofilm_glucosidase_act, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_magnesium = Slot(uri=MIXS['0000431'], name="MicrobialMatBiofilm_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.MicrobialMatBiofilm_magnesium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_mean_frict_vel = Slot(uri=MIXS['0000498'], name="MicrobialMatBiofilm_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=MIXS.MicrobialMatBiofilm_mean_frict_vel, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="MicrobialMatBiofilm_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=MIXS.MicrobialMatBiofilm_mean_peak_frict_vel, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_methane = Slot(uri=MIXS['0000101'], name="MicrobialMatBiofilm_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS.MicrobialMatBiofilm_methane, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_misc_param = Slot(uri=MIXS['0000752'], name="MicrobialMatBiofilm_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.MicrobialMatBiofilm_misc_param, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.MicrobialMatBiofilm_n_alkanes = Slot(uri=MIXS['0000503'], name="MicrobialMatBiofilm_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS.MicrobialMatBiofilm_n_alkanes, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_nitrate = Slot(uri=MIXS['0000425'], name="MicrobialMatBiofilm_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.MicrobialMatBiofilm_nitrate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_nitrite = Slot(uri=MIXS['0000426'], name="MicrobialMatBiofilm_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.MicrobialMatBiofilm_nitrite, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_nitro = Slot(uri=MIXS['0000504'], name="MicrobialMatBiofilm_nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS.MicrobialMatBiofilm_nitro, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_org_carb = Slot(uri=MIXS['0000508'], name="MicrobialMatBiofilm_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS.MicrobialMatBiofilm_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_org_matter = Slot(uri=MIXS['0000204'], name="MicrobialMatBiofilm_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.MicrobialMatBiofilm_org_matter, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_org_nitro = Slot(uri=MIXS['0000205'], name="MicrobialMatBiofilm_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.MicrobialMatBiofilm_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_organism_count = Slot(uri=MIXS['0000103'], name="MicrobialMatBiofilm_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.MicrobialMatBiofilm_organism_count, domain=MicrobialMatBiofilm, range=Optional[str])

slots.MicrobialMatBiofilm_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="MicrobialMatBiofilm_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.MicrobialMatBiofilm_oxy_stat_samp, domain=MicrobialMatBiofilm, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.MicrobialMatBiofilm_part_org_carb = Slot(uri=MIXS['0000515'], name="MicrobialMatBiofilm_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS.MicrobialMatBiofilm_part_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_perturbation = Slot(uri=MIXS['0000754'], name="MicrobialMatBiofilm_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.MicrobialMatBiofilm_perturbation, domain=MicrobialMatBiofilm, range=Optional[str])

slots.MicrobialMatBiofilm_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="MicrobialMatBiofilm_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=MIXS.MicrobialMatBiofilm_petroleum_hydrocarb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_ph = Slot(uri=MIXS['0001001'], name="MicrobialMatBiofilm_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.MicrobialMatBiofilm_ph, domain=MicrobialMatBiofilm, range=Optional[float])

slots.MicrobialMatBiofilm_phaeopigments = Slot(uri=MIXS['0000180'], name="MicrobialMatBiofilm_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=MIXS.MicrobialMatBiofilm_phaeopigments, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.MicrobialMatBiofilm_phosphate = Slot(uri=MIXS['0000505'], name="MicrobialMatBiofilm_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.MicrobialMatBiofilm_phosphate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="MicrobialMatBiofilm_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS.MicrobialMatBiofilm_phosplipid_fatt_acid, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*)'))

slots.MicrobialMatBiofilm_potassium = Slot(uri=MIXS['0000430'], name="MicrobialMatBiofilm_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.MicrobialMatBiofilm_potassium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_pressure = Slot(uri=MIXS['0000412'], name="MicrobialMatBiofilm_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.MicrobialMatBiofilm_pressure, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_project_name = Slot(uri=MIXS['0000092'], name="MicrobialMatBiofilm_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MicrobialMatBiofilm_project_name, domain=MicrobialMatBiofilm, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_redox_potential = Slot(uri=MIXS['0000182'], name="MicrobialMatBiofilm_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=MIXS.MicrobialMatBiofilm_redox_potential, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_salinity = Slot(uri=MIXS['0000183'], name="MicrobialMatBiofilm_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.MicrobialMatBiofilm_salinity, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_samp_store_dur = Slot(uri=MIXS['0000116'], name="MicrobialMatBiofilm_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.MicrobialMatBiofilm_samp_store_dur, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.MicrobialMatBiofilm_samp_store_loc = Slot(uri=MIXS['0000755'], name="MicrobialMatBiofilm_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.MicrobialMatBiofilm_samp_store_loc, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_samp_store_temp = Slot(uri=MIXS['0000110'], name="MicrobialMatBiofilm_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.MicrobialMatBiofilm_samp_store_temp, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MicrobialMatBiofilm_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MicrobialMatBiofilm_samp_vol_we_dna_ext, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_silicate = Slot(uri=MIXS['0000184'], name="MicrobialMatBiofilm_silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS.MicrobialMatBiofilm_silicate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_sodium = Slot(uri=MIXS['0000428'], name="MicrobialMatBiofilm_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.MicrobialMatBiofilm_sodium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_sulfate = Slot(uri=MIXS['0000423'], name="MicrobialMatBiofilm_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.MicrobialMatBiofilm_sulfate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_sulfide = Slot(uri=MIXS['0000424'], name="MicrobialMatBiofilm_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.MicrobialMatBiofilm_sulfide, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_temp = Slot(uri=MIXS['0000113'], name="MicrobialMatBiofilm_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MicrobialMatBiofilm_temp, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_tot_carb = Slot(uri=MIXS['0000525'], name="MicrobialMatBiofilm_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS.MicrobialMatBiofilm_tot_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_tot_org_carb = Slot(uri=MIXS['0000533'], name="MicrobialMatBiofilm_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.MicrobialMatBiofilm_tot_org_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.MicrobialMatBiofilm_turbidity = Slot(uri=MIXS['0000191'], name="MicrobialMatBiofilm_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS.MicrobialMatBiofilm_turbidity, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MicrobialMatBiofilm_water_content = Slot(uri=MIXS['0000185'], name="MicrobialMatBiofilm_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS.MicrobialMatBiofilm_water_content, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_adapters = Slot(uri=MIXS['0000048'], name="MigsBa_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MigsBa_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MigsBa_alt = Slot(uri=MIXS['0000094'], name="MigsBa_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MigsBa_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_annot = Slot(uri=MIXS['0000059'], name="MigsBa_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.MigsBa_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_assembly_name = Slot(uri=MIXS['0000057'], name="MigsBa_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.MigsBa_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.MigsBa_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsBa_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.MigsBa_assembly_qual, domain=None, range=Union[str, "ASSEMBLYQUALENUM"])

slots.MigsBa_assembly_software = Slot(uri=MIXS['0000058'], name="MigsBa_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MigsBa_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsBa_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsBa_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.MigsBa_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsBa_collection_date = Slot(uri=MIXS['0000011'], name="MigsBa_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MigsBa_collection_date, domain=None, range=str)

slots.MigsBa_compl_score = Slot(uri=MIXS['0000069'], name="MigsBa_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.MigsBa_compl_score, domain=None, range=Optional[str])

slots.MigsBa_compl_software = Slot(uri=MIXS['0000070'], name="MigsBa_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.MigsBa_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsBa_elev = Slot(uri=MIXS['0000093'], name="MigsBa_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MigsBa_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsBa_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS.MigsBa_encoded_traits, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_env_broad_scale = Slot(uri=MIXS['0000012'], name="MigsBa_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MigsBa_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsBa_env_local_scale = Slot(uri=MIXS['0000013'], name="MigsBa_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MigsBa_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsBa_env_medium = Slot(uri=MIXS['0000014'], name="MigsBa_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MigsBa_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsBa_estimated_size = Slot(uri=MIXS['0000024'], name="MigsBa_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.MigsBa_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.MigsBa_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsBa_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MigsBa_experimental_factor, domain=None, range=Optional[str])

slots.MigsBa_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsBa_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.MigsBa_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsBa_feat_pred = Slot(uri=MIXS['0000061'], name="MigsBa_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.MigsBa_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsBa_geo_loc_name = Slot(uri=MIXS['0000010'], name="MigsBa_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MigsBa_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MigsBa_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsBa_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.MigsBa_host_disease_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.MigsBa_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsBa_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.MigsBa_host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.MigsBa_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsBa_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MigsBa_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsBa_lat_lon = Slot(uri=MIXS['0000009'], name="MigsBa_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MigsBa_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MigsBa_lib_layout = Slot(uri=MIXS['0000041'], name="MigsBa_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MigsBa_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsBa_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsBa_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MigsBa_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsBa_lib_screen = Slot(uri=MIXS['0000043'], name="MigsBa_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MigsBa_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_lib_size = Slot(uri=MIXS['0000039'], name="MigsBa_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MigsBa_lib_size, domain=None, range=Optional[int])

slots.MigsBa_lib_vector = Slot(uri=MIXS['0000042'], name="MigsBa_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MigsBa_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_neg_cont_type = Slot(uri=MIXS['0001321'], name="MigsBa_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MigsBa_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MigsBa_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsBa_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MigsBa_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsBa_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsBa_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MigsBa_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsBa_num_replicons = Slot(uri=MIXS['0000022'], name="MigsBa_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS.MigsBa_num_replicons, domain=None, range=int)

slots.MigsBa_number_contig = Slot(uri=MIXS['0000060'], name="MigsBa_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.MigsBa_number_contig, domain=None, range=int)

slots.MigsBa_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsBa_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.MigsBa_pathogenicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_pos_cont_type = Slot(uri=MIXS['0001322'], name="MigsBa_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MigsBa_pos_cont_type, domain=None, range=Optional[str])

slots.MigsBa_project_name = Slot(uri=MIXS['0000092'], name="MigsBa_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MigsBa_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsBa_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.MigsBa_ref_biomaterial, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsBa_ref_db = Slot(uri=MIXS['0000062'], name="MigsBa_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.MigsBa_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsBa_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MigsBa_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.MigsBa_rel_to_oxygen, domain=None, range=Optional[str])

slots.MigsBa_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsBa_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MigsBa_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_samp_size = Slot(uri=MIXS['0000001'], name="MigsBa_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MigsBa_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MigsBa_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MigsBa_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MigsBa_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsBa_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MigsBa_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_seq_meth = Slot(uri=MIXS['0000050'], name="MigsBa_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MigsBa_seq_meth, domain=None, range=str)

slots.MigsBa_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsBa_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.MigsBa_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsBa_sop = Slot(uri=MIXS['0000090'], name="MigsBa_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MigsBa_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MigsBa_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsBa_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MigsBa_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_specific_host = Slot(uri=MIXS['0000029'], name="MigsBa_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.MigsBa_specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.MigsBa_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsBa_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MigsBa_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsBa_tax_class = Slot(uri=MIXS['0000064'], name="MigsBa_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.MigsBa_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsBa_tax_ident = Slot(uri=MIXS['0000053'], name="MigsBa_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.MigsBa_tax_ident, domain=None, range=Optional[str])

slots.MigsBa_temp = Slot(uri=MIXS['0000113'], name="MigsBa_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MigsBa_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsBa_trophic_level = Slot(uri=MIXS['0000032'], name="MigsBa_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.MigsBa_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MigsEu_adapters = Slot(uri=MIXS['0000048'], name="MigsEu_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MigsEu_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MigsEu_alt = Slot(uri=MIXS['0000094'], name="MigsEu_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MigsEu_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsEu_annot = Slot(uri=MIXS['0000059'], name="MigsEu_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.MigsEu_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_assembly_name = Slot(uri=MIXS['0000057'], name="MigsEu_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.MigsEu_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.MigsEu_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsEu_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.MigsEu_assembly_qual, domain=None, range=Union[str, "ASSEMBLYQUALENUM"])

slots.MigsEu_assembly_software = Slot(uri=MIXS['0000058'], name="MigsEu_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MigsEu_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsEu_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsEu_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.MigsEu_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsEu_collection_date = Slot(uri=MIXS['0000011'], name="MigsEu_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MigsEu_collection_date, domain=None, range=str)

slots.MigsEu_compl_score = Slot(uri=MIXS['0000069'], name="MigsEu_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.MigsEu_compl_score, domain=None, range=Optional[str])

slots.MigsEu_compl_software = Slot(uri=MIXS['0000070'], name="MigsEu_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.MigsEu_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsEu_elev = Slot(uri=MIXS['0000093'], name="MigsEu_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MigsEu_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsEu_env_broad_scale = Slot(uri=MIXS['0000012'], name="MigsEu_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MigsEu_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsEu_env_local_scale = Slot(uri=MIXS['0000013'], name="MigsEu_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MigsEu_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsEu_env_medium = Slot(uri=MIXS['0000014'], name="MigsEu_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MigsEu_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsEu_estimated_size = Slot(uri=MIXS['0000024'], name="MigsEu_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.MigsEu_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.MigsEu_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsEu_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MigsEu_experimental_factor, domain=None, range=Optional[str])

slots.MigsEu_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsEu_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.MigsEu_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsEu_feat_pred = Slot(uri=MIXS['0000061'], name="MigsEu_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.MigsEu_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsEu_geo_loc_name = Slot(uri=MIXS['0000010'], name="MigsEu_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MigsEu_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MigsEu_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsEu_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.MigsEu_host_disease_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.MigsEu_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsEu_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.MigsEu_host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.MigsEu_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsEu_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MigsEu_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsEu_lat_lon = Slot(uri=MIXS['0000009'], name="MigsEu_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MigsEu_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MigsEu_lib_layout = Slot(uri=MIXS['0000041'], name="MigsEu_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MigsEu_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsEu_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsEu_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MigsEu_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsEu_lib_screen = Slot(uri=MIXS['0000043'], name="MigsEu_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MigsEu_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_lib_size = Slot(uri=MIXS['0000039'], name="MigsEu_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MigsEu_lib_size, domain=None, range=Optional[int])

slots.MigsEu_lib_vector = Slot(uri=MIXS['0000042'], name="MigsEu_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MigsEu_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_neg_cont_type = Slot(uri=MIXS['0001321'], name="MigsEu_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MigsEu_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MigsEu_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsEu_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MigsEu_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsEu_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsEu_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MigsEu_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsEu_num_replicons = Slot(uri=MIXS['0000022'], name="MigsEu_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS.MigsEu_num_replicons, domain=None, range=Optional[int])

slots.MigsEu_number_contig = Slot(uri=MIXS['0000060'], name="MigsEu_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.MigsEu_number_contig, domain=None, range=int)

slots.MigsEu_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsEu_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.MigsEu_pathogenicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_ploidy = Slot(uri=MIXS['0000021'], name="MigsEu_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=MIXS.MigsEu_ploidy, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsEu_pos_cont_type = Slot(uri=MIXS['0001322'], name="MigsEu_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MigsEu_pos_cont_type, domain=None, range=Optional[str])

slots.MigsEu_project_name = Slot(uri=MIXS['0000092'], name="MigsEu_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MigsEu_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_propagation = Slot(uri=MIXS['0000033'], name="MigsEu_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS.MigsEu_propagation, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsEu_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.MigsEu_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsEu_ref_db = Slot(uri=MIXS['0000062'], name="MigsEu_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.MigsEu_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsEu_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsEu_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MigsEu_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_samp_size = Slot(uri=MIXS['0000001'], name="MigsEu_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MigsEu_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsEu_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MigsEu_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MigsEu_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MigsEu_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsEu_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MigsEu_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsEu_seq_meth = Slot(uri=MIXS['0000050'], name="MigsEu_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MigsEu_seq_meth, domain=None, range=str)

slots.MigsEu_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsEu_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.MigsEu_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsEu_sop = Slot(uri=MIXS['0000090'], name="MigsEu_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MigsEu_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MigsEu_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsEu_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MigsEu_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_specific_host = Slot(uri=MIXS['0000029'], name="MigsEu_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.MigsEu_specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.MigsEu_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsEu_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MigsEu_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsEu_tax_class = Slot(uri=MIXS['0000064'], name="MigsEu_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.MigsEu_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsEu_tax_ident = Slot(uri=MIXS['0000053'], name="MigsEu_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.MigsEu_tax_ident, domain=None, range=Optional[str])

slots.MigsEu_temp = Slot(uri=MIXS['0000113'], name="MigsEu_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MigsEu_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsEu_trophic_level = Slot(uri=MIXS['0000032'], name="MigsEu_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.MigsEu_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MigsOrg_adapters = Slot(uri=MIXS['0000048'], name="MigsOrg_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MigsOrg_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MigsOrg_alt = Slot(uri=MIXS['0000094'], name="MigsOrg_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MigsOrg_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_annot = Slot(uri=MIXS['0000059'], name="MigsOrg_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.MigsOrg_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_assembly_name = Slot(uri=MIXS['0000057'], name="MigsOrg_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.MigsOrg_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsOrg_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.MigsOrg_assembly_qual, domain=None, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.MigsOrg_assembly_software = Slot(uri=MIXS['0000058'], name="MigsOrg_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MigsOrg_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_collection_date = Slot(uri=MIXS['0000011'], name="MigsOrg_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MigsOrg_collection_date, domain=None, range=str)

slots.MigsOrg_compl_score = Slot(uri=MIXS['0000069'], name="MigsOrg_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.MigsOrg_compl_score, domain=None, range=Optional[str])

slots.MigsOrg_compl_software = Slot(uri=MIXS['0000070'], name="MigsOrg_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.MigsOrg_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_elev = Slot(uri=MIXS['0000093'], name="MigsOrg_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MigsOrg_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_env_broad_scale = Slot(uri=MIXS['0000012'], name="MigsOrg_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MigsOrg_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsOrg_env_local_scale = Slot(uri=MIXS['0000013'], name="MigsOrg_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MigsOrg_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsOrg_env_medium = Slot(uri=MIXS['0000014'], name="MigsOrg_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MigsOrg_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsOrg_estimated_size = Slot(uri=MIXS['0000024'], name="MigsOrg_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.MigsOrg_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.MigsOrg_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsOrg_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MigsOrg_experimental_factor, domain=None, range=Optional[str])

slots.MigsOrg_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsOrg_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.MigsOrg_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsOrg_feat_pred = Slot(uri=MIXS['0000061'], name="MigsOrg_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.MigsOrg_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_geo_loc_name = Slot(uri=MIXS['0000010'], name="MigsOrg_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MigsOrg_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsOrg_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MigsOrg_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsOrg_lat_lon = Slot(uri=MIXS['0000009'], name="MigsOrg_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MigsOrg_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MigsOrg_lib_layout = Slot(uri=MIXS['0000041'], name="MigsOrg_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MigsOrg_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsOrg_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsOrg_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MigsOrg_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsOrg_lib_screen = Slot(uri=MIXS['0000043'], name="MigsOrg_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MigsOrg_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_lib_size = Slot(uri=MIXS['0000039'], name="MigsOrg_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MigsOrg_lib_size, domain=None, range=Optional[int])

slots.MigsOrg_lib_vector = Slot(uri=MIXS['0000042'], name="MigsOrg_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MigsOrg_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_neg_cont_type = Slot(uri=MIXS['0001321'], name="MigsOrg_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MigsOrg_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MigsOrg_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsOrg_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MigsOrg_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsOrg_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsOrg_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MigsOrg_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsOrg_number_contig = Slot(uri=MIXS['0000060'], name="MigsOrg_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.MigsOrg_number_contig, domain=None, range=Optional[int])

slots.MigsOrg_pos_cont_type = Slot(uri=MIXS['0001322'], name="MigsOrg_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MigsOrg_pos_cont_type, domain=None, range=Optional[str])

slots.MigsOrg_project_name = Slot(uri=MIXS['0000092'], name="MigsOrg_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MigsOrg_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsOrg_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.MigsOrg_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsOrg_ref_db = Slot(uri=MIXS['0000062'], name="MigsOrg_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.MigsOrg_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsOrg_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MigsOrg_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_samp_size = Slot(uri=MIXS['0000001'], name="MigsOrg_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MigsOrg_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MigsOrg_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MigsOrg_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MigsOrg_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsOrg_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MigsOrg_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsOrg_seq_meth = Slot(uri=MIXS['0000050'], name="MigsOrg_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MigsOrg_seq_meth, domain=None, range=str)

slots.MigsOrg_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsOrg_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.MigsOrg_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_sop = Slot(uri=MIXS['0000090'], name="MigsOrg_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MigsOrg_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MigsOrg_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsOrg_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MigsOrg_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsOrg_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MigsOrg_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsOrg_tax_class = Slot(uri=MIXS['0000064'], name="MigsOrg_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.MigsOrg_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsOrg_tax_ident = Slot(uri=MIXS['0000053'], name="MigsOrg_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.MigsOrg_tax_ident, domain=None, range=Optional[str])

slots.MigsOrg_temp = Slot(uri=MIXS['0000113'], name="MigsOrg_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MigsOrg_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsPl_adapters = Slot(uri=MIXS['0000048'], name="MigsPl_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MigsPl_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MigsPl_alt = Slot(uri=MIXS['0000094'], name="MigsPl_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MigsPl_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsPl_annot = Slot(uri=MIXS['0000059'], name="MigsPl_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.MigsPl_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_assembly_name = Slot(uri=MIXS['0000057'], name="MigsPl_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.MigsPl_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.MigsPl_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsPl_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.MigsPl_assembly_qual, domain=None, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.MigsPl_assembly_software = Slot(uri=MIXS['0000058'], name="MigsPl_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MigsPl_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsPl_collection_date = Slot(uri=MIXS['0000011'], name="MigsPl_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MigsPl_collection_date, domain=None, range=str)

slots.MigsPl_compl_score = Slot(uri=MIXS['0000069'], name="MigsPl_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.MigsPl_compl_score, domain=None, range=Optional[str])

slots.MigsPl_compl_software = Slot(uri=MIXS['0000070'], name="MigsPl_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.MigsPl_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsPl_elev = Slot(uri=MIXS['0000093'], name="MigsPl_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MigsPl_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsPl_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsPl_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS.MigsPl_encoded_traits, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_env_broad_scale = Slot(uri=MIXS['0000012'], name="MigsPl_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MigsPl_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsPl_env_local_scale = Slot(uri=MIXS['0000013'], name="MigsPl_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MigsPl_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsPl_env_medium = Slot(uri=MIXS['0000014'], name="MigsPl_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MigsPl_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsPl_estimated_size = Slot(uri=MIXS['0000024'], name="MigsPl_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.MigsPl_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.MigsPl_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsPl_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MigsPl_experimental_factor, domain=None, range=Optional[str])

slots.MigsPl_feat_pred = Slot(uri=MIXS['0000061'], name="MigsPl_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.MigsPl_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsPl_geo_loc_name = Slot(uri=MIXS['0000010'], name="MigsPl_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MigsPl_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MigsPl_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsPl_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.MigsPl_host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.MigsPl_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsPl_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MigsPl_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsPl_lat_lon = Slot(uri=MIXS['0000009'], name="MigsPl_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MigsPl_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MigsPl_lib_layout = Slot(uri=MIXS['0000041'], name="MigsPl_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MigsPl_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsPl_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsPl_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MigsPl_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsPl_lib_screen = Slot(uri=MIXS['0000043'], name="MigsPl_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MigsPl_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_lib_size = Slot(uri=MIXS['0000039'], name="MigsPl_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MigsPl_lib_size, domain=None, range=Optional[int])

slots.MigsPl_lib_vector = Slot(uri=MIXS['0000042'], name="MigsPl_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MigsPl_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_neg_cont_type = Slot(uri=MIXS['0001321'], name="MigsPl_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MigsPl_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MigsPl_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsPl_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MigsPl_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsPl_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsPl_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MigsPl_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsPl_number_contig = Slot(uri=MIXS['0000060'], name="MigsPl_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.MigsPl_number_contig, domain=None, range=Optional[int])

slots.MigsPl_pos_cont_type = Slot(uri=MIXS['0001322'], name="MigsPl_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MigsPl_pos_cont_type, domain=None, range=Optional[str])

slots.MigsPl_project_name = Slot(uri=MIXS['0000092'], name="MigsPl_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MigsPl_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_propagation = Slot(uri=MIXS['0000033'], name="MigsPl_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS.MigsPl_propagation, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsPl_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.MigsPl_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsPl_ref_db = Slot(uri=MIXS['0000062'], name="MigsPl_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.MigsPl_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsPl_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsPl_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MigsPl_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_samp_size = Slot(uri=MIXS['0000001'], name="MigsPl_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MigsPl_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsPl_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MigsPl_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MigsPl_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MigsPl_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsPl_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MigsPl_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsPl_seq_meth = Slot(uri=MIXS['0000050'], name="MigsPl_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MigsPl_seq_meth, domain=None, range=str)

slots.MigsPl_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsPl_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.MigsPl_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsPl_sop = Slot(uri=MIXS['0000090'], name="MigsPl_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MigsPl_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MigsPl_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsPl_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MigsPl_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_specific_host = Slot(uri=MIXS['0000029'], name="MigsPl_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.MigsPl_specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.MigsPl_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsPl_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MigsPl_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsPl_tax_class = Slot(uri=MIXS['0000064'], name="MigsPl_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.MigsPl_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsPl_tax_ident = Slot(uri=MIXS['0000053'], name="MigsPl_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.MigsPl_tax_ident, domain=None, range=Optional[str])

slots.MigsPl_temp = Slot(uri=MIXS['0000113'], name="MigsPl_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MigsPl_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_adapters = Slot(uri=MIXS['0000048'], name="MigsVi_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MigsVi_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MigsVi_alt = Slot(uri=MIXS['0000094'], name="MigsVi_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MigsVi_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_annot = Slot(uri=MIXS['0000059'], name="MigsVi_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.MigsVi_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_assembly_name = Slot(uri=MIXS['0000057'], name="MigsVi_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.MigsVi_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.MigsVi_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsVi_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.MigsVi_assembly_qual, domain=None, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.MigsVi_assembly_software = Slot(uri=MIXS['0000058'], name="MigsVi_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MigsVi_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsVi_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsVi_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.MigsVi_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsVi_collection_date = Slot(uri=MIXS['0000011'], name="MigsVi_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MigsVi_collection_date, domain=None, range=str)

slots.MigsVi_compl_score = Slot(uri=MIXS['0000069'], name="MigsVi_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.MigsVi_compl_score, domain=None, range=Optional[str])

slots.MigsVi_compl_software = Slot(uri=MIXS['0000070'], name="MigsVi_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.MigsVi_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsVi_elev = Slot(uri=MIXS['0000093'], name="MigsVi_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MigsVi_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsVi_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS.MigsVi_encoded_traits, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_env_broad_scale = Slot(uri=MIXS['0000012'], name="MigsVi_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MigsVi_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsVi_env_local_scale = Slot(uri=MIXS['0000013'], name="MigsVi_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MigsVi_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsVi_env_medium = Slot(uri=MIXS['0000014'], name="MigsVi_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MigsVi_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MigsVi_estimated_size = Slot(uri=MIXS['0000024'], name="MigsVi_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.MigsVi_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.MigsVi_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsVi_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MigsVi_experimental_factor, domain=None, range=Optional[str])

slots.MigsVi_feat_pred = Slot(uri=MIXS['0000061'], name="MigsVi_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.MigsVi_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsVi_geo_loc_name = Slot(uri=MIXS['0000010'], name="MigsVi_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MigsVi_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MigsVi_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsVi_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.MigsVi_host_disease_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.MigsVi_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsVi_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.MigsVi_host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.MigsVi_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsVi_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MigsVi_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsVi_lat_lon = Slot(uri=MIXS['0000009'], name="MigsVi_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MigsVi_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MigsVi_lib_layout = Slot(uri=MIXS['0000041'], name="MigsVi_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MigsVi_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsVi_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsVi_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MigsVi_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsVi_lib_screen = Slot(uri=MIXS['0000043'], name="MigsVi_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MigsVi_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_lib_size = Slot(uri=MIXS['0000039'], name="MigsVi_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MigsVi_lib_size, domain=None, range=Optional[int])

slots.MigsVi_lib_vector = Slot(uri=MIXS['0000042'], name="MigsVi_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MigsVi_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_neg_cont_type = Slot(uri=MIXS['0001321'], name="MigsVi_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MigsVi_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MigsVi_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsVi_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MigsVi_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsVi_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsVi_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MigsVi_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsVi_num_replicons = Slot(uri=MIXS['0000022'], name="MigsVi_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS.MigsVi_num_replicons, domain=None, range=Optional[int])

slots.MigsVi_number_contig = Slot(uri=MIXS['0000060'], name="MigsVi_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.MigsVi_number_contig, domain=None, range=Optional[int])

slots.MigsVi_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsVi_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.MigsVi_pathogenicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_pos_cont_type = Slot(uri=MIXS['0001322'], name="MigsVi_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MigsVi_pos_cont_type, domain=None, range=Optional[str])

slots.MigsVi_project_name = Slot(uri=MIXS['0000092'], name="MigsVi_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MigsVi_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_propagation = Slot(uri=MIXS['0000033'], name="MigsVi_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS.MigsVi_propagation, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsVi_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.MigsVi_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MigsVi_ref_db = Slot(uri=MIXS['0000062'], name="MigsVi_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.MigsVi_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsVi_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsVi_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MigsVi_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_samp_size = Slot(uri=MIXS['0000001'], name="MigsVi_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MigsVi_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MigsVi_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MigsVi_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MigsVi_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsVi_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MigsVi_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_seq_meth = Slot(uri=MIXS['0000050'], name="MigsVi_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MigsVi_seq_meth, domain=None, range=str)

slots.MigsVi_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsVi_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.MigsVi_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MigsVi_sop = Slot(uri=MIXS['0000090'], name="MigsVi_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MigsVi_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MigsVi_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsVi_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MigsVi_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_specific_host = Slot(uri=MIXS['0000029'], name="MigsVi_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.MigsVi_specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.MigsVi_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsVi_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MigsVi_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsVi_tax_class = Slot(uri=MIXS['0000064'], name="MigsVi_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.MigsVi_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MigsVi_tax_ident = Slot(uri=MIXS['0000053'], name="MigsVi_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.MigsVi_tax_ident, domain=None, range=Optional[str])

slots.MigsVi_temp = Slot(uri=MIXS['0000113'], name="MigsVi_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MigsVi_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MigsVi_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="MigsVi_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS.MigsVi_virus_enrich_appr, domain=None, range=Optional[str])

slots.Mimag_adapters = Slot(uri=MIXS['0000048'], name="Mimag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Mimag_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Mimag_alt = Slot(uri=MIXS['0000094'], name="Mimag_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Mimag_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_annot = Slot(uri=MIXS['0000059'], name="Mimag_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Mimag_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_assembly_name = Slot(uri=MIXS['0000057'], name="Mimag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Mimag_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Mimag_assembly_qual = Slot(uri=MIXS['0000056'], name="Mimag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Mimag_assembly_qual, domain=None, range=Union[str, "ASSEMBLYQUALENUM"])

slots.Mimag_assembly_software = Slot(uri=MIXS['0000058'], name="Mimag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Mimag_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_bin_param = Slot(uri=MIXS['0000077'], name="Mimag_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS.Mimag_bin_param, domain=None, range=str)

slots.Mimag_bin_software = Slot(uri=MIXS['0000078'], name="Mimag_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS.Mimag_bin_software, domain=None, range=str)

slots.Mimag_collection_date = Slot(uri=MIXS['0000011'], name="Mimag_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.Mimag_collection_date, domain=None, range=str)

slots.Mimag_compl_appr = Slot(uri=MIXS['0000071'], name="Mimag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS.Mimag_compl_appr, domain=None, range=Optional[str])

slots.Mimag_compl_score = Slot(uri=MIXS['0000069'], name="Mimag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.Mimag_compl_score, domain=None, range=str)

slots.Mimag_compl_software = Slot(uri=MIXS['0000070'], name="Mimag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.Mimag_compl_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_contam_score = Slot(uri=MIXS['0000072'], name="Mimag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS.Mimag_contam_score, domain=None, range=str)

slots.Mimag_contam_screen_input = Slot(uri=MIXS['0000005'], name="Mimag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS.Mimag_contam_screen_input, domain=None, range=Optional[str])

slots.Mimag_contam_screen_param = Slot(uri=MIXS['0000073'], name="Mimag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS.Mimag_contam_screen_param, domain=None, range=Optional[str])

slots.Mimag_decontam_software = Slot(uri=MIXS['0000074'], name="Mimag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS.Mimag_decontam_software, domain=None, range=Optional[str])

slots.Mimag_elev = Slot(uri=MIXS['0000093'], name="Mimag_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Mimag_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_env_broad_scale = Slot(uri=MIXS['0000012'], name="Mimag_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.Mimag_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mimag_env_local_scale = Slot(uri=MIXS['0000013'], name="Mimag_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.Mimag_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mimag_env_medium = Slot(uri=MIXS['0000014'], name="Mimag_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.Mimag_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mimag_experimental_factor = Slot(uri=MIXS['0000008'], name="Mimag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.Mimag_experimental_factor, domain=None, range=Optional[str])

slots.Mimag_feat_pred = Slot(uri=MIXS['0000061'], name="Mimag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.Mimag_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_geo_loc_name = Slot(uri=MIXS['0000010'], name="Mimag_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.Mimag_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.Mimag_lat_lon = Slot(uri=MIXS['0000009'], name="Mimag_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.Mimag_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.Mimag_lib_layout = Slot(uri=MIXS['0000041'], name="Mimag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Mimag_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Mimag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Mimag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Mimag_lib_reads_seqd, domain=None, range=Optional[int])

slots.Mimag_lib_screen = Slot(uri=MIXS['0000043'], name="Mimag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Mimag_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_lib_size = Slot(uri=MIXS['0000039'], name="Mimag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Mimag_lib_size, domain=None, range=Optional[int])

slots.Mimag_lib_vector = Slot(uri=MIXS['0000042'], name="Mimag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Mimag_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_mag_cov_software = Slot(uri=MIXS['0000080'], name="Mimag_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS.Mimag_mag_cov_software, domain=None, range=Optional[str])

slots.Mimag_mid = Slot(uri=MIXS['0000047'], name="Mimag_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Mimag_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.Mimag_neg_cont_type = Slot(uri=MIXS['0001321'], name="Mimag_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.Mimag_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.Mimag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Mimag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Mimag_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mimag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Mimag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Mimag_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mimag_number_contig = Slot(uri=MIXS['0000060'], name="Mimag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.Mimag_number_contig, domain=None, range=Optional[int])

slots.Mimag_pos_cont_type = Slot(uri=MIXS['0001322'], name="Mimag_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.Mimag_pos_cont_type, domain=None, range=Optional[str])

slots.Mimag_project_name = Slot(uri=MIXS['0000092'], name="Mimag_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Mimag_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_reassembly_bin = Slot(uri=MIXS['0000079'], name="Mimag_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS.Mimag_reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.Mimag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Mimag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.Mimag_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mimag_ref_db = Slot(uri=MIXS['0000062'], name="Mimag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.Mimag_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Mimag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.Mimag_rel_to_oxygen, domain=None, range=Optional[str])

slots.Mimag_samp_mat_process = Slot(uri=MIXS['0000016'], name="Mimag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Mimag_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_samp_size = Slot(uri=MIXS['0000001'], name="Mimag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Mimag_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_samp_taxon_id = Slot(uri=MIXS['0001320'], name="Mimag_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.Mimag_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.Mimag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Mimag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Mimag_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_seq_meth = Slot(uri=MIXS['0000050'], name="Mimag_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Mimag_seq_meth, domain=None, range=str)

slots.Mimag_sim_search_meth = Slot(uri=MIXS['0000063'], name="Mimag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.Mimag_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_size_frac = Slot(uri=MIXS['0000017'], name="Mimag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.Mimag_size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_sop = Slot(uri=MIXS['0000090'], name="Mimag_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Mimag_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Mimag_source_mat_id = Slot(uri=MIXS['0000026'], name="Mimag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Mimag_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_tax_class = Slot(uri=MIXS['0000064'], name="Mimag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.Mimag_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mimag_tax_ident = Slot(uri=MIXS['0000053'], name="Mimag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.Mimag_tax_ident, domain=None, range=str)

slots.Mimag_temp = Slot(uri=MIXS['0000113'], name="Mimag_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Mimag_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mimag_trna_ext_software = Slot(uri=MIXS['0000068'], name="Mimag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS.Mimag_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mimag_trnas = Slot(uri=MIXS['0000067'], name="Mimag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS.Mimag_trnas, domain=None, range=Optional[int])

slots.MimarksC_alt = Slot(uri=MIXS['0000094'], name="MimarksC_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MimarksC_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksC_biotic_relationship = Slot(uri=MIXS['0000028'], name="MimarksC_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.MimarksC_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MimarksC_chimera_check = Slot(uri=MIXS['0000052'], name="MimarksC_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS.MimarksC_chimera_check, domain=None, range=Optional[str])

slots.MimarksC_collection_date = Slot(uri=MIXS['0000011'], name="MimarksC_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MimarksC_collection_date, domain=None, range=str)

slots.MimarksC_elev = Slot(uri=MIXS['0000093'], name="MimarksC_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MimarksC_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksC_env_broad_scale = Slot(uri=MIXS['0000012'], name="MimarksC_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MimarksC_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksC_env_local_scale = Slot(uri=MIXS['0000013'], name="MimarksC_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MimarksC_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksC_env_medium = Slot(uri=MIXS['0000014'], name="MimarksC_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MimarksC_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksC_experimental_factor = Slot(uri=MIXS['0000008'], name="MimarksC_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MimarksC_experimental_factor, domain=None, range=Optional[str])

slots.MimarksC_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MimarksC_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS.MimarksC_extrachrom_elements, domain=None, range=Optional[int])

slots.MimarksC_geo_loc_name = Slot(uri=MIXS['0000010'], name="MimarksC_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MimarksC_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MimarksC_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MimarksC_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS.MimarksC_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MimarksC_lat_lon = Slot(uri=MIXS['0000009'], name="MimarksC_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MimarksC_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MimarksC_neg_cont_type = Slot(uri=MIXS['0001321'], name="MimarksC_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MimarksC_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MimarksC_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MimarksC_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MimarksC_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MimarksC_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MimarksC_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MimarksC_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MimarksC_pcr_cond = Slot(uri=MIXS['0000049'], name="MimarksC_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS.MimarksC_pcr_cond, domain=None, range=Optional[str])

slots.MimarksC_pcr_primers = Slot(uri=MIXS['0000046'], name="MimarksC_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS.MimarksC_pcr_primers, domain=None, range=Optional[str])

slots.MimarksC_pos_cont_type = Slot(uri=MIXS['0001322'], name="MimarksC_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MimarksC_pos_cont_type, domain=None, range=Optional[str])

slots.MimarksC_project_name = Slot(uri=MIXS['0000092'], name="MimarksC_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MimarksC_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksC_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MimarksC_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.MimarksC_rel_to_oxygen, domain=None, range=Optional[str])

slots.MimarksC_samp_mat_process = Slot(uri=MIXS['0000016'], name="MimarksC_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MimarksC_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksC_samp_size = Slot(uri=MIXS['0000001'], name="MimarksC_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MimarksC_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksC_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MimarksC_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MimarksC_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MimarksC_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MimarksC_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MimarksC_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksC_seq_meth = Slot(uri=MIXS['0000050'], name="MimarksC_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MimarksC_seq_meth, domain=None, range=str)

slots.MimarksC_seq_quality_check = Slot(uri=MIXS['0000051'], name="MimarksC_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS.MimarksC_seq_quality_check, domain=None, range=Optional[str])

slots.MimarksC_sop = Slot(uri=MIXS['0000090'], name="MimarksC_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MimarksC_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MimarksC_source_mat_id = Slot(uri=MIXS['0000026'], name="MimarksC_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MimarksC_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksC_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MimarksC_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS.MimarksC_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MimarksC_target_gene = Slot(uri=MIXS['0000044'], name="MimarksC_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS.MimarksC_target_gene, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksC_target_subfragment = Slot(uri=MIXS['0000045'], name="MimarksC_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS.MimarksC_target_subfragment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksC_temp = Slot(uri=MIXS['0000113'], name="MimarksC_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MimarksC_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksC_trophic_level = Slot(uri=MIXS['0000032'], name="MimarksC_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS.MimarksC_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MimarksS_adapters = Slot(uri=MIXS['0000048'], name="MimarksS_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.MimarksS_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.MimarksS_alt = Slot(uri=MIXS['0000094'], name="MimarksS_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MimarksS_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksS_assembly_software = Slot(uri=MIXS['0000058'], name="MimarksS_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.MimarksS_assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.MimarksS_chimera_check = Slot(uri=MIXS['0000052'], name="MimarksS_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS.MimarksS_chimera_check, domain=None, range=Optional[str])

slots.MimarksS_collection_date = Slot(uri=MIXS['0000011'], name="MimarksS_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.MimarksS_collection_date, domain=None, range=str)

slots.MimarksS_elev = Slot(uri=MIXS['0000093'], name="MimarksS_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MimarksS_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksS_env_broad_scale = Slot(uri=MIXS['0000012'], name="MimarksS_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.MimarksS_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksS_env_local_scale = Slot(uri=MIXS['0000013'], name="MimarksS_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.MimarksS_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksS_env_medium = Slot(uri=MIXS['0000014'], name="MimarksS_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.MimarksS_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.MimarksS_experimental_factor = Slot(uri=MIXS['0000008'], name="MimarksS_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.MimarksS_experimental_factor, domain=None, range=Optional[str])

slots.MimarksS_geo_loc_name = Slot(uri=MIXS['0000010'], name="MimarksS_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.MimarksS_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.MimarksS_lat_lon = Slot(uri=MIXS['0000009'], name="MimarksS_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.MimarksS_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.MimarksS_lib_layout = Slot(uri=MIXS['0000041'], name="MimarksS_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.MimarksS_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MimarksS_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MimarksS_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.MimarksS_lib_reads_seqd, domain=None, range=Optional[int])

slots.MimarksS_lib_screen = Slot(uri=MIXS['0000043'], name="MimarksS_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.MimarksS_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_lib_size = Slot(uri=MIXS['0000039'], name="MimarksS_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.MimarksS_lib_size, domain=None, range=Optional[int])

slots.MimarksS_lib_vector = Slot(uri=MIXS['0000042'], name="MimarksS_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.MimarksS_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_mid = Slot(uri=MIXS['0000047'], name="MimarksS_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.MimarksS_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.MimarksS_neg_cont_type = Slot(uri=MIXS['0001321'], name="MimarksS_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.MimarksS_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.MimarksS_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MimarksS_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.MimarksS_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MimarksS_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MimarksS_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.MimarksS_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.MimarksS_pcr_cond = Slot(uri=MIXS['0000049'], name="MimarksS_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS.MimarksS_pcr_cond, domain=None, range=Optional[str])

slots.MimarksS_pcr_primers = Slot(uri=MIXS['0000046'], name="MimarksS_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS.MimarksS_pcr_primers, domain=None, range=Optional[str])

slots.MimarksS_pos_cont_type = Slot(uri=MIXS['0001322'], name="MimarksS_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.MimarksS_pos_cont_type, domain=None, range=Optional[str])

slots.MimarksS_project_name = Slot(uri=MIXS['0000092'], name="MimarksS_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MimarksS_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MimarksS_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.MimarksS_rel_to_oxygen, domain=None, range=Optional[str])

slots.MimarksS_samp_mat_process = Slot(uri=MIXS['0000016'], name="MimarksS_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.MimarksS_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_samp_size = Slot(uri=MIXS['0000001'], name="MimarksS_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.MimarksS_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksS_samp_taxon_id = Slot(uri=MIXS['0001320'], name="MimarksS_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.MimarksS_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.MimarksS_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MimarksS_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MimarksS_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksS_seq_meth = Slot(uri=MIXS['0000050'], name="MimarksS_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.MimarksS_seq_meth, domain=None, range=str)

slots.MimarksS_seq_quality_check = Slot(uri=MIXS['0000051'], name="MimarksS_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS.MimarksS_seq_quality_check, domain=None, range=Optional[str])

slots.MimarksS_size_frac = Slot(uri=MIXS['0000017'], name="MimarksS_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.MimarksS_size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MimarksS_sop = Slot(uri=MIXS['0000090'], name="MimarksS_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.MimarksS_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.MimarksS_source_mat_id = Slot(uri=MIXS['0000026'], name="MimarksS_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.MimarksS_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_target_gene = Slot(uri=MIXS['0000044'], name="MimarksS_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS.MimarksS_target_gene, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_target_subfragment = Slot(uri=MIXS['0000045'], name="MimarksS_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS.MimarksS_target_subfragment, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MimarksS_temp = Slot(uri=MIXS['0000113'], name="MimarksS_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MimarksS_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_adapters = Slot(uri=MIXS['0000048'], name="Mims_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Mims_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Mims_alt = Slot(uri=MIXS['0000094'], name="Mims_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Mims_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_annot = Slot(uri=MIXS['0000059'], name="Mims_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Mims_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_assembly_name = Slot(uri=MIXS['0000057'], name="Mims_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Mims_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Mims_assembly_qual = Slot(uri=MIXS['0000056'], name="Mims_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Mims_assembly_qual, domain=None, range=Optional[Union[str, "ASSEMBLYQUALENUM"]])

slots.Mims_assembly_software = Slot(uri=MIXS['0000058'], name="Mims_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Mims_assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mims_collection_date = Slot(uri=MIXS['0000011'], name="Mims_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.Mims_collection_date, domain=None, range=str)

slots.Mims_elev = Slot(uri=MIXS['0000093'], name="Mims_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Mims_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_env_broad_scale = Slot(uri=MIXS['0000012'], name="Mims_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.Mims_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mims_env_local_scale = Slot(uri=MIXS['0000013'], name="Mims_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.Mims_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mims_env_medium = Slot(uri=MIXS['0000014'], name="Mims_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.Mims_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Mims_experimental_factor = Slot(uri=MIXS['0000008'], name="Mims_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.Mims_experimental_factor, domain=None, range=Optional[str])

slots.Mims_feat_pred = Slot(uri=MIXS['0000061'], name="Mims_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.Mims_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mims_geo_loc_name = Slot(uri=MIXS['0000010'], name="Mims_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.Mims_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.Mims_lat_lon = Slot(uri=MIXS['0000009'], name="Mims_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.Mims_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.Mims_lib_layout = Slot(uri=MIXS['0000041'], name="Mims_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Mims_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Mims_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Mims_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Mims_lib_reads_seqd, domain=None, range=Optional[int])

slots.Mims_lib_screen = Slot(uri=MIXS['0000043'], name="Mims_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Mims_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_lib_size = Slot(uri=MIXS['0000039'], name="Mims_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Mims_lib_size, domain=None, range=Optional[int])

slots.Mims_lib_vector = Slot(uri=MIXS['0000042'], name="Mims_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Mims_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_mid = Slot(uri=MIXS['0000047'], name="Mims_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Mims_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.Mims_neg_cont_type = Slot(uri=MIXS['0001321'], name="Mims_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.Mims_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.Mims_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Mims_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Mims_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mims_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Mims_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Mims_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mims_number_contig = Slot(uri=MIXS['0000060'], name="Mims_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.Mims_number_contig, domain=None, range=Optional[int])

slots.Mims_pos_cont_type = Slot(uri=MIXS['0001322'], name="Mims_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.Mims_pos_cont_type, domain=None, range=Optional[str])

slots.Mims_project_name = Slot(uri=MIXS['0000092'], name="Mims_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Mims_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Mims_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.Mims_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Mims_ref_db = Slot(uri=MIXS['0000062'], name="Mims_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.Mims_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mims_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Mims_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.Mims_rel_to_oxygen, domain=None, range=Optional[str])

slots.Mims_samp_mat_process = Slot(uri=MIXS['0000016'], name="Mims_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Mims_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_samp_size = Slot(uri=MIXS['0000001'], name="Mims_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Mims_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_samp_taxon_id = Slot(uri=MIXS['0001320'], name="Mims_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.Mims_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.Mims_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Mims_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Mims_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_seq_meth = Slot(uri=MIXS['0000050'], name="Mims_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Mims_seq_meth, domain=None, range=str)

slots.Mims_sim_search_meth = Slot(uri=MIXS['0000063'], name="Mims_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.Mims_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Mims_size_frac = Slot(uri=MIXS['0000017'], name="Mims_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.Mims_size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Mims_sop = Slot(uri=MIXS['0000090'], name="Mims_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Mims_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Mims_source_mat_id = Slot(uri=MIXS['0000026'], name="Mims_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Mims_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_tax_class = Slot(uri=MIXS['0000064'], name="Mims_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.Mims_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Mims_temp = Slot(uri=MIXS['0000113'], name="Mims_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Mims_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_adapters = Slot(uri=MIXS['0000048'], name="Misag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Misag_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Misag_alt = Slot(uri=MIXS['0000094'], name="Misag_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Misag_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_annot = Slot(uri=MIXS['0000059'], name="Misag_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Misag_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_assembly_name = Slot(uri=MIXS['0000057'], name="Misag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Misag_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Misag_assembly_qual = Slot(uri=MIXS['0000056'], name="Misag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Misag_assembly_qual, domain=None, range=Union[str, "ASSEMBLYQUALENUM"])

slots.Misag_assembly_software = Slot(uri=MIXS['0000058'], name="Misag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Misag_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_collection_date = Slot(uri=MIXS['0000011'], name="Misag_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.Misag_collection_date, domain=None, range=str)

slots.Misag_compl_appr = Slot(uri=MIXS['0000071'], name="Misag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS.Misag_compl_appr, domain=None, range=Optional[str])

slots.Misag_compl_score = Slot(uri=MIXS['0000069'], name="Misag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.Misag_compl_score, domain=None, range=str)

slots.Misag_compl_software = Slot(uri=MIXS['0000070'], name="Misag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.Misag_compl_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_contam_score = Slot(uri=MIXS['0000072'], name="Misag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS.Misag_contam_score, domain=None, range=str)

slots.Misag_contam_screen_input = Slot(uri=MIXS['0000005'], name="Misag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS.Misag_contam_screen_input, domain=None, range=Optional[str])

slots.Misag_contam_screen_param = Slot(uri=MIXS['0000073'], name="Misag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS.Misag_contam_screen_param, domain=None, range=Optional[str])

slots.Misag_decontam_software = Slot(uri=MIXS['0000074'], name="Misag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS.Misag_decontam_software, domain=None, range=Optional[str])

slots.Misag_elev = Slot(uri=MIXS['0000093'], name="Misag_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Misag_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_env_broad_scale = Slot(uri=MIXS['0000012'], name="Misag_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.Misag_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Misag_env_local_scale = Slot(uri=MIXS['0000013'], name="Misag_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.Misag_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Misag_env_medium = Slot(uri=MIXS['0000014'], name="Misag_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.Misag_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Misag_experimental_factor = Slot(uri=MIXS['0000008'], name="Misag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.Misag_experimental_factor, domain=None, range=Optional[str])

slots.Misag_feat_pred = Slot(uri=MIXS['0000061'], name="Misag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.Misag_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_geo_loc_name = Slot(uri=MIXS['0000010'], name="Misag_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.Misag_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.Misag_lat_lon = Slot(uri=MIXS['0000009'], name="Misag_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.Misag_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.Misag_lib_layout = Slot(uri=MIXS['0000041'], name="Misag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Misag_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Misag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Misag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Misag_lib_reads_seqd, domain=None, range=Optional[int])

slots.Misag_lib_screen = Slot(uri=MIXS['0000043'], name="Misag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Misag_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_lib_size = Slot(uri=MIXS['0000039'], name="Misag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Misag_lib_size, domain=None, range=Optional[int])

slots.Misag_lib_vector = Slot(uri=MIXS['0000042'], name="Misag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Misag_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_mid = Slot(uri=MIXS['0000047'], name="Misag_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Misag_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.Misag_neg_cont_type = Slot(uri=MIXS['0001321'], name="Misag_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.Misag_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.Misag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Misag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Misag_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Misag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Misag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Misag_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Misag_number_contig = Slot(uri=MIXS['0000060'], name="Misag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.Misag_number_contig, domain=None, range=Optional[int])

slots.Misag_pos_cont_type = Slot(uri=MIXS['0001322'], name="Misag_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.Misag_pos_cont_type, domain=None, range=Optional[str])

slots.Misag_project_name = Slot(uri=MIXS['0000092'], name="Misag_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Misag_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Misag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.Misag_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Misag_ref_db = Slot(uri=MIXS['0000062'], name="Misag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.Misag_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Misag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS.Misag_rel_to_oxygen, domain=None, range=Optional[str])

slots.Misag_samp_mat_process = Slot(uri=MIXS['0000016'], name="Misag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Misag_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_samp_size = Slot(uri=MIXS['0000001'], name="Misag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Misag_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_samp_taxon_id = Slot(uri=MIXS['0001320'], name="Misag_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.Misag_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.Misag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Misag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Misag_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_seq_meth = Slot(uri=MIXS['0000050'], name="Misag_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Misag_seq_meth, domain=None, range=str)

slots.Misag_sim_search_meth = Slot(uri=MIXS['0000063'], name="Misag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.Misag_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="Misag_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=MIXS.Misag_single_cell_lysis_appr, domain=None, range=str)

slots.Misag_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="Misag_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=MIXS.Misag_single_cell_lysis_prot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_size_frac = Slot(uri=MIXS['0000017'], name="Misag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.Misag_size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_sop = Slot(uri=MIXS['0000090'], name="Misag_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Misag_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Misag_sort_tech = Slot(uri=MIXS['0000075'], name="Misag_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS.Misag_sort_tech, domain=None, range=str)

slots.Misag_source_mat_id = Slot(uri=MIXS['0000026'], name="Misag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Misag_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_tax_class = Slot(uri=MIXS['0000064'], name="Misag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.Misag_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Misag_tax_ident = Slot(uri=MIXS['0000053'], name="Misag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.Misag_tax_ident, domain=None, range=str)

slots.Misag_temp = Slot(uri=MIXS['0000113'], name="Misag_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Misag_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Misag_trna_ext_software = Slot(uri=MIXS['0000068'], name="Misag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS.Misag_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Misag_trnas = Slot(uri=MIXS['0000067'], name="Misag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS.Misag_trnas, domain=None, range=Optional[int])

slots.Misag_wga_amp_appr = Slot(uri=MIXS['0000055'], name="Misag_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS.Misag_wga_amp_appr, domain=None, range=str)

slots.Misag_wga_amp_kit = Slot(uri=MIXS['0000006'], name="Misag_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS.Misag_wga_amp_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_alkalinity = Slot(uri=MIXS['0000421'], name="MiscellaneousNaturalOrArtificialEnvironment_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_alkalinity, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_alt = Slot(uri=MIXS['0000094'], name="MiscellaneousNaturalOrArtificialEnvironment_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_alt, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_ammonium = Slot(uri=MIXS['0000427'], name="MiscellaneousNaturalOrArtificialEnvironment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_ammonium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_biomass = Slot(uri=MIXS['0000174'], name="MiscellaneousNaturalOrArtificialEnvironment_biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_biomass, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_bromide = Slot(uri=MIXS['0000176'], name="MiscellaneousNaturalOrArtificialEnvironment_bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_bromide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_calcium = Slot(uri=MIXS['0000432'], name="MiscellaneousNaturalOrArtificialEnvironment_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_calcium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_chem_administration = Slot(uri=MIXS['0000751'], name="MiscellaneousNaturalOrArtificialEnvironment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_chem_administration, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.MiscellaneousNaturalOrArtificialEnvironment_chloride = Slot(uri=MIXS['0000429'], name="MiscellaneousNaturalOrArtificialEnvironment_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_chloride, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_chlorophyll = Slot(uri=MIXS['0000177'], name="MiscellaneousNaturalOrArtificialEnvironment_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_chlorophyll, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_density = Slot(uri=MIXS['0000435'], name="MiscellaneousNaturalOrArtificialEnvironment_density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_density, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diether_lipids = Slot(uri=MIXS['0000178'], name="MiscellaneousNaturalOrArtificialEnvironment_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diether_lipids, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diss_carb_dioxide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_hydrogen = Slot(uri=MIXS['0000179'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diss_hydrogen, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diss_inorg_carb, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_oxygen = Slot(uri=MIXS['0000119'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_diss_oxygen, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_elev = Slot(uri=MIXS['0000093'], name="MiscellaneousNaturalOrArtificialEnvironment_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_elev, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_misc_param = Slot(uri=MIXS['0000752'], name="MiscellaneousNaturalOrArtificialEnvironment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_misc_param, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.MiscellaneousNaturalOrArtificialEnvironment_nitrate = Slot(uri=MIXS['0000425'], name="MiscellaneousNaturalOrArtificialEnvironment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_nitrate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_nitrite = Slot(uri=MIXS['0000426'], name="MiscellaneousNaturalOrArtificialEnvironment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_nitrite, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_nitro = Slot(uri=MIXS['0000504'], name="MiscellaneousNaturalOrArtificialEnvironment_nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_org_carb = Slot(uri=MIXS['0000508'], name="MiscellaneousNaturalOrArtificialEnvironment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_org_carb, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_org_matter = Slot(uri=MIXS['0000204'], name="MiscellaneousNaturalOrArtificialEnvironment_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_org_matter, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_org_nitro = Slot(uri=MIXS['0000205'], name="MiscellaneousNaturalOrArtificialEnvironment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="MiscellaneousNaturalOrArtificialEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_organism_count, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.MiscellaneousNaturalOrArtificialEnvironment_perturbation = Slot(uri=MIXS['0000754'], name="MiscellaneousNaturalOrArtificialEnvironment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_perturbation, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.MiscellaneousNaturalOrArtificialEnvironment_ph = Slot(uri=MIXS['0001001'], name="MiscellaneousNaturalOrArtificialEnvironment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_ph, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[float])

slots.MiscellaneousNaturalOrArtificialEnvironment_phosphate = Slot(uri=MIXS['0000505'], name="MiscellaneousNaturalOrArtificialEnvironment_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_phosphate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*)'))

slots.MiscellaneousNaturalOrArtificialEnvironment_potassium = Slot(uri=MIXS['0000430'], name="MiscellaneousNaturalOrArtificialEnvironment_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_potassium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_pressure = Slot(uri=MIXS['0000412'], name="MiscellaneousNaturalOrArtificialEnvironment_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_pressure, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_project_name = Slot(uri=MIXS['0000092'], name="MiscellaneousNaturalOrArtificialEnvironment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_project_name, domain=MiscellaneousNaturalOrArtificialEnvironment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_salinity = Slot(uri=MIXS['0000183'], name="MiscellaneousNaturalOrArtificialEnvironment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_salinity, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur = Slot(uri=MIXS['0000116'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc = Slot(uri=MIXS['0000755'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_store_temp = Slot(uri=MIXS['0000110'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_samp_store_temp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_silicate = Slot(uri=MIXS['0000184'], name="MiscellaneousNaturalOrArtificialEnvironment_silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_silicate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_sodium = Slot(uri=MIXS['0000428'], name="MiscellaneousNaturalOrArtificialEnvironment_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_sodium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_sulfate = Slot(uri=MIXS['0000423'], name="MiscellaneousNaturalOrArtificialEnvironment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_sulfate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_sulfide = Slot(uri=MIXS['0000424'], name="MiscellaneousNaturalOrArtificialEnvironment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_sulfide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_temp = Slot(uri=MIXS['0000113'], name="MiscellaneousNaturalOrArtificialEnvironment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_temp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.MiscellaneousNaturalOrArtificialEnvironment_water_current = Slot(uri=MIXS['0000203'], name="MiscellaneousNaturalOrArtificialEnvironment_water_current", curie=MIXS.curie('0000203'),
                   model_uri=MIXS.MiscellaneousNaturalOrArtificialEnvironment_water_current, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_adapters = Slot(uri=MIXS['0000048'], name="Miuvig_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS.Miuvig_adapters, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+;[ACGT]+'))

slots.Miuvig_alt = Slot(uri=MIXS['0000094'], name="Miuvig_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.Miuvig_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_annot = Slot(uri=MIXS['0000059'], name="Miuvig_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS.Miuvig_annot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_assembly_name = Slot(uri=MIXS['0000057'], name="Miuvig_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS.Miuvig_assembly_name, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [^s\|][^\r\n\t\|]*'))

slots.Miuvig_assembly_qual = Slot(uri=MIXS['0000056'], name="Miuvig_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS.Miuvig_assembly_qual, domain=None, range=Union[str, "ASSEMBLYQUALENUM"])

slots.Miuvig_assembly_software = Slot(uri=MIXS['0000058'], name="Miuvig_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS.Miuvig_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_bin_param = Slot(uri=MIXS['0000077'], name="Miuvig_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS.Miuvig_bin_param, domain=None, range=Optional[str])

slots.Miuvig_bin_software = Slot(uri=MIXS['0000078'], name="Miuvig_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS.Miuvig_bin_software, domain=None, range=Optional[str])

slots.Miuvig_biotic_relationship = Slot(uri=MIXS['0000028'], name="Miuvig_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS.Miuvig_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.Miuvig_collection_date = Slot(uri=MIXS['0000011'], name="Miuvig_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.Miuvig_collection_date, domain=None, range=str)

slots.Miuvig_compl_appr = Slot(uri=MIXS['0000071'], name="Miuvig_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS.Miuvig_compl_appr, domain=None, range=Optional[str])

slots.Miuvig_compl_score = Slot(uri=MIXS['0000069'], name="Miuvig_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS.Miuvig_compl_score, domain=None, range=Optional[str])

slots.Miuvig_compl_software = Slot(uri=MIXS['0000070'], name="Miuvig_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS.Miuvig_compl_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_detec_type = Slot(uri=MIXS['0000084'], name="Miuvig_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=MIXS.Miuvig_detec_type, domain=None, range=str)

slots.Miuvig_elev = Slot(uri=MIXS['0000093'], name="Miuvig_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Miuvig_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_env_broad_scale = Slot(uri=MIXS['0000012'], name="Miuvig_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.Miuvig_env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Miuvig_env_local_scale = Slot(uri=MIXS['0000013'], name="Miuvig_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.Miuvig_env_local_scale, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Miuvig_env_medium = Slot(uri=MIXS['0000014'], name="Miuvig_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.Miuvig_env_medium, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Miuvig_estimated_size = Slot(uri=MIXS['0000024'], name="Miuvig_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS.Miuvig_estimated_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[+-]?[1-9][0-9]* bp'))

slots.Miuvig_experimental_factor = Slot(uri=MIXS['0000008'], name="Miuvig_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS.Miuvig_experimental_factor, domain=None, range=Optional[str])

slots.Miuvig_feat_pred = Slot(uri=MIXS['0000061'], name="Miuvig_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS.Miuvig_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_geo_loc_name = Slot(uri=MIXS['0000010'], name="Miuvig_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.Miuvig_geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.Miuvig_host_disease_stat = Slot(uri=MIXS['0000031'], name="Miuvig_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.Miuvig_host_disease_stat, domain=None, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.Miuvig_host_pred_appr = Slot(uri=MIXS['0000088'], name="Miuvig_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=MIXS.Miuvig_host_pred_appr, domain=None, range=Optional[str])

slots.Miuvig_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="Miuvig_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=MIXS.Miuvig_host_pred_est_acc, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_host_spec_range = Slot(uri=MIXS['0000030'], name="Miuvig_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS.Miuvig_host_spec_range, domain=None, range=Optional[str],
                   pattern=re.compile(r'([+-]?[1-9][0-9]*\|)*[+-]?[1-9][0-9]*'))

slots.Miuvig_lat_lon = Slot(uri=MIXS['0000009'], name="Miuvig_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.Miuvig_lat_lon, domain=None, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.Miuvig_lib_layout = Slot(uri=MIXS['0000041'], name="Miuvig_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS.Miuvig_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Miuvig_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Miuvig_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS.Miuvig_lib_reads_seqd, domain=None, range=Optional[int])

slots.Miuvig_lib_screen = Slot(uri=MIXS['0000043'], name="Miuvig_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS.Miuvig_lib_screen, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_lib_size = Slot(uri=MIXS['0000039'], name="Miuvig_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS.Miuvig_lib_size, domain=None, range=Optional[int])

slots.Miuvig_lib_vector = Slot(uri=MIXS['0000042'], name="Miuvig_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS.Miuvig_lib_vector, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_mag_cov_software = Slot(uri=MIXS['0000080'], name="Miuvig_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS.Miuvig_mag_cov_software, domain=None, range=Optional[str])

slots.Miuvig_mid = Slot(uri=MIXS['0000047'], name="Miuvig_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS.Miuvig_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'[ACGT]+'))

slots.Miuvig_neg_cont_type = Slot(uri=MIXS['0001321'], name="Miuvig_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS.Miuvig_neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.Miuvig_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Miuvig_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS.Miuvig_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Miuvig_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Miuvig_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS.Miuvig_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Miuvig_number_contig = Slot(uri=MIXS['0000060'], name="Miuvig_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS.Miuvig_number_contig, domain=None, range=int)

slots.Miuvig_otu_class_appr = Slot(uri=MIXS['0000085'], name="Miuvig_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=MIXS.Miuvig_otu_class_appr, domain=None, range=Optional[str])

slots.Miuvig_otu_db = Slot(uri=MIXS['0000087'], name="Miuvig_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=MIXS.Miuvig_otu_db, domain=None, range=Optional[str])

slots.Miuvig_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="Miuvig_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=MIXS.Miuvig_otu_seq_comp_appr, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_pathogenicity = Slot(uri=MIXS['0000027'], name="Miuvig_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS.Miuvig_pathogenicity, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_pos_cont_type = Slot(uri=MIXS['0001322'], name="Miuvig_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS.Miuvig_pos_cont_type, domain=None, range=Optional[str])

slots.Miuvig_pred_genome_struc = Slot(uri=MIXS['0000083'], name="Miuvig_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=MIXS.Miuvig_pred_genome_struc, domain=None, range=str)

slots.Miuvig_pred_genome_type = Slot(uri=MIXS['0000082'], name="Miuvig_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=MIXS.Miuvig_pred_genome_type, domain=None, range=str)

slots.Miuvig_project_name = Slot(uri=MIXS['0000092'], name="Miuvig_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Miuvig_project_name, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_reassembly_bin = Slot(uri=MIXS['0000079'], name="Miuvig_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS.Miuvig_reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.Miuvig_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Miuvig_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS.Miuvig_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Miuvig_ref_db = Slot(uri=MIXS['0000062'], name="Miuvig_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS.Miuvig_ref_db, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]+;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_samp_mat_process = Slot(uri=MIXS['0000016'], name="Miuvig_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS.Miuvig_samp_mat_process, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_samp_size = Slot(uri=MIXS['0000001'], name="Miuvig_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS.Miuvig_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_samp_taxon_id = Slot(uri=MIXS['0001320'], name="Miuvig_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS.Miuvig_samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [NCBITaxon:[0-9]+]'))

slots.Miuvig_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Miuvig_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Miuvig_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_seq_meth = Slot(uri=MIXS['0000050'], name="Miuvig_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS.Miuvig_seq_meth, domain=None, range=str)

slots.Miuvig_sim_search_meth = Slot(uri=MIXS['0000063'], name="Miuvig_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS.Miuvig_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="Miuvig_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=MIXS.Miuvig_single_cell_lysis_appr, domain=None, range=Optional[str])

slots.Miuvig_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="Miuvig_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=MIXS.Miuvig_single_cell_lysis_prot, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_size_frac = Slot(uri=MIXS['0000017'], name="Miuvig_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS.Miuvig_size_frac, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_sop = Slot(uri=MIXS['0000090'], name="Miuvig_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS.Miuvig_sop, domain=None, range=Optional[str],
                   pattern=re.compile(r'(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]))\|)*(((10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])))'))

slots.Miuvig_sort_tech = Slot(uri=MIXS['0000075'], name="Miuvig_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS.Miuvig_sort_tech, domain=None, range=Optional[str])

slots.Miuvig_source_mat_id = Slot(uri=MIXS['0000026'], name="Miuvig_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.Miuvig_source_mat_id, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_source_uvig = Slot(uri=MIXS['0000035'], name="Miuvig_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=MIXS.Miuvig_source_uvig, domain=None, range=str)

slots.Miuvig_specific_host = Slot(uri=MIXS['0000029'], name="Miuvig_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS.Miuvig_specific_host, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*|NCBITaxon:[0-9]+'))

slots.Miuvig_tax_class = Slot(uri=MIXS['0000064'], name="Miuvig_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS.Miuvig_tax_class, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Miuvig_tax_ident = Slot(uri=MIXS['0000053'], name="Miuvig_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS.Miuvig_tax_ident, domain=None, range=Optional[str])

slots.Miuvig_temp = Slot(uri=MIXS['0000113'], name="Miuvig_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Miuvig_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Miuvig_trna_ext_software = Slot(uri=MIXS['0000068'], name="Miuvig_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS.Miuvig_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_trnas = Slot(uri=MIXS['0000067'], name="Miuvig_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS.Miuvig_trnas, domain=None, range=Optional[int])

slots.Miuvig_vir_ident_software = Slot(uri=MIXS['0000081'], name="Miuvig_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=MIXS.Miuvig_vir_ident_software, domain=None, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*;[^s\|][^\r\n\t\|]*'))

slots.Miuvig_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="Miuvig_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS.Miuvig_virus_enrich_appr, domain=None, range=str)

slots.Miuvig_wga_amp_appr = Slot(uri=MIXS['0000055'], name="Miuvig_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS.Miuvig_wga_amp_appr, domain=None, range=Optional[str])

slots.Miuvig_wga_amp_kit = Slot(uri=MIXS['0000006'], name="Miuvig_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS.Miuvig_wga_amp_kit, domain=None, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_air_temp_regm = Slot(uri=MIXS['0000551'], name="PlantAssociated_air_temp_regm", curie=MIXS.curie('0000551'),
                   model_uri=MIXS.PlantAssociated_air_temp_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_ances_data = Slot(uri=MIXS['0000247'], name="PlantAssociated_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS.PlantAssociated_ances_data, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_antibiotic_regm = Slot(uri=MIXS['0000553'], name="PlantAssociated_antibiotic_regm", curie=MIXS.curie('0000553'),
                   model_uri=MIXS.PlantAssociated_antibiotic_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?)\|)*[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_biol_stat = Slot(uri=MIXS['0000858'], name="PlantAssociated_biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=MIXS.PlantAssociated_biol_stat, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_biotic_regm = Slot(uri=MIXS['0001038'], name="PlantAssociated_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS.PlantAssociated_biotic_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="PlantAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.PlantAssociated_chem_administration, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_chem_mutagen = Slot(uri=MIXS['0000555'], name="PlantAssociated_chem_mutagen", curie=MIXS.curie('0000555'),
                   model_uri=MIXS.PlantAssociated_chem_mutagen, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_climate_environment = Slot(uri=MIXS['0001040'], name="PlantAssociated_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS.PlantAssociated_climate_environment, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_cult_root_med = Slot(uri=MIXS['0001041'], name="PlantAssociated_cult_root_med", curie=MIXS.curie('0001041'),
                   model_uri=MIXS.PlantAssociated_cult_root_med, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_elev = Slot(uri=MIXS['0000093'], name="PlantAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.PlantAssociated_elev, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_fertilizer_regm = Slot(uri=MIXS['0000556'], name="PlantAssociated_fertilizer_regm", curie=MIXS.curie('0000556'),
                   model_uri=MIXS.PlantAssociated_fertilizer_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_fungicide_regm = Slot(uri=MIXS['0000557'], name="PlantAssociated_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS.PlantAssociated_fungicide_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_gaseous_environment = Slot(uri=MIXS['0000558'], name="PlantAssociated_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS.PlantAssociated_gaseous_environment, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_genetic_mod = Slot(uri=MIXS['0000859'], name="PlantAssociated_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS.PlantAssociated_genetic_mod, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.PlantAssociated_gravity = Slot(uri=MIXS['0000559'], name="PlantAssociated_gravity", curie=MIXS.curie('0000559'),
                   model_uri=MIXS.PlantAssociated_gravity, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_growth_facil = Slot(uri=MIXS['0001043'], name="PlantAssociated_growth_facil", curie=MIXS.curie('0001043'),
                   model_uri=MIXS.PlantAssociated_growth_facil, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_growth_habit = Slot(uri=MIXS['0001044'], name="PlantAssociated_growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=MIXS.PlantAssociated_growth_habit, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_growth_hormone_regm = Slot(uri=MIXS['0000560'], name="PlantAssociated_growth_hormone_regm", curie=MIXS.curie('0000560'),
                   model_uri=MIXS.PlantAssociated_growth_hormone_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_herbicide_regm = Slot(uri=MIXS['0000561'], name="PlantAssociated_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS.PlantAssociated_herbicide_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_host_age = Slot(uri=MIXS['0000255'], name="PlantAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.PlantAssociated_host_age, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="PlantAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS.PlantAssociated_host_common_name, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="PlantAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS.PlantAssociated_host_disease_stat, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'((([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)\|)*(([^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+])|[^s\|][^\r\n\t\|]*)'))

slots.PlantAssociated_host_dry_mass = Slot(uri=MIXS['0000257'], name="PlantAssociated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.PlantAssociated_host_dry_mass, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="PlantAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.PlantAssociated_host_genotype, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_height = Slot(uri=MIXS['0000264'], name="PlantAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.PlantAssociated_host_height, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_length = Slot(uri=MIXS['0000256'], name="PlantAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.PlantAssociated_host_length, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="PlantAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS.PlantAssociated_host_life_stage, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="PlantAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.PlantAssociated_host_phenotype, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.PlantAssociated_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="PlantAssociated_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS.PlantAssociated_host_subspecf_genlin, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="PlantAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.PlantAssociated_host_taxid, domain=PlantAssociated, range=Optional[int])

slots.PlantAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="PlantAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.PlantAssociated_host_tot_mass, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_host_wet_mass = Slot(uri=MIXS['0000567'], name="PlantAssociated_host_wet_mass", curie=MIXS.curie('0000567'),
                   model_uri=MIXS.PlantAssociated_host_wet_mass, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_humidity_regm = Slot(uri=MIXS['0000568'], name="PlantAssociated_humidity_regm", curie=MIXS.curie('0000568'),
                   model_uri=MIXS.PlantAssociated_humidity_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_light_regm = Slot(uri=MIXS['0000569'], name="PlantAssociated_light_regm", curie=MIXS.curie('0000569'),
                   model_uri=MIXS.PlantAssociated_light_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_mechanical_damage = Slot(uri=MIXS['0001052'], name="PlantAssociated_mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=MIXS.PlantAssociated_mechanical_damage, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_mineral_nutr_regm = Slot(uri=MIXS['0000570'], name="PlantAssociated_mineral_nutr_regm", curie=MIXS.curie('0000570'),
                   model_uri=MIXS.PlantAssociated_mineral_nutr_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_misc_param = Slot(uri=MIXS['0000752'], name="PlantAssociated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.PlantAssociated_misc_param, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.PlantAssociated_non_mineral_nutr_regm = Slot(uri=MIXS['0000571'], name="PlantAssociated_non_mineral_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS.PlantAssociated_non_mineral_nutr_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_organism_count = Slot(uri=MIXS['0000103'], name="PlantAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.PlantAssociated_organism_count, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="PlantAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.PlantAssociated_oxy_stat_samp, domain=PlantAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.PlantAssociated_perturbation = Slot(uri=MIXS['0000754'], name="PlantAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.PlantAssociated_perturbation, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_pesticide_regm = Slot(uri=MIXS['0000573'], name="PlantAssociated_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS.PlantAssociated_pesticide_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_ph_regm = Slot(uri=MIXS['0001056'], name="PlantAssociated_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS.PlantAssociated_ph_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_plant_growth_med = Slot(uri=MIXS['0001057'], name="PlantAssociated_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS.PlantAssociated_plant_growth_med, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_plant_product = Slot(uri=MIXS['0001058'], name="PlantAssociated_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS.PlantAssociated_plant_product, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_plant_sex = Slot(uri=MIXS['0001059'], name="PlantAssociated_plant_sex", curie=MIXS.curie('0001059'),
                   model_uri=MIXS.PlantAssociated_plant_sex, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_plant_struc = Slot(uri=MIXS['0001060'], name="PlantAssociated_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS.PlantAssociated_plant_struc, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.PlantAssociated_project_name = Slot(uri=MIXS['0000092'], name="PlantAssociated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.PlantAssociated_project_name, domain=PlantAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_radiation_regm = Slot(uri=MIXS['0000575'], name="PlantAssociated_radiation_regm", curie=MIXS.curie('0000575'),
                   model_uri=MIXS.PlantAssociated_radiation_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_rainfall_regm = Slot(uri=MIXS['0000576'], name="PlantAssociated_rainfall_regm", curie=MIXS.curie('0000576'),
                   model_uri=MIXS.PlantAssociated_rainfall_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_root_cond = Slot(uri=MIXS['0001061'], name="PlantAssociated_root_cond", curie=MIXS.curie('0001061'),
                   model_uri=MIXS.PlantAssociated_root_cond, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.PlantAssociated_root_med_carbon = Slot(uri=MIXS['0000577'], name="PlantAssociated_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=MIXS.PlantAssociated_root_med_carbon, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_root_med_macronutr = Slot(uri=MIXS['0000578'], name="PlantAssociated_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=MIXS.PlantAssociated_root_med_macronutr, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_root_med_micronutr = Slot(uri=MIXS['0000579'], name="PlantAssociated_root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=MIXS.PlantAssociated_root_med_micronutr, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_root_med_ph = Slot(uri=MIXS['0001062'], name="PlantAssociated_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=MIXS.PlantAssociated_root_med_ph, domain=PlantAssociated, range=Optional[float])

slots.PlantAssociated_root_med_regl = Slot(uri=MIXS['0000581'], name="PlantAssociated_root_med_regl", curie=MIXS.curie('0000581'),
                   model_uri=MIXS.PlantAssociated_root_med_regl, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_root_med_solid = Slot(uri=MIXS['0001063'], name="PlantAssociated_root_med_solid", curie=MIXS.curie('0001063'),
                   model_uri=MIXS.PlantAssociated_root_med_solid, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_root_med_suppl = Slot(uri=MIXS['0000580'], name="PlantAssociated_root_med_suppl", curie=MIXS.curie('0000580'),
                   model_uri=MIXS.PlantAssociated_root_med_suppl, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_salinity = Slot(uri=MIXS['0000183'], name="PlantAssociated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.PlantAssociated_salinity, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_salt_regm = Slot(uri=MIXS['0000582'], name="PlantAssociated_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS.PlantAssociated_salt_regm, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*;R[+-]?[1-9][0-9]*/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/\d{4}-\d\d-\d\d[Tt]\d\d:\d\d(:\d\d(\.\d+)?([Zz]|[\+\-]\d\d:\d\d)?)?/P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_samp_capt_status = Slot(uri=MIXS['0000860'], name="PlantAssociated_samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=MIXS.PlantAssociated_samp_capt_status, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_samp_dis_stage = Slot(uri=MIXS['0000249'], name="PlantAssociated_samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=MIXS.PlantAssociated_samp_dis_stage, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="PlantAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.PlantAssociated_samp_store_dur, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.PlantAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="PlantAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.PlantAssociated_samp_store_loc, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_samp_store_temp = Slot(uri=MIXS['0000110'], name="PlantAssociated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.PlantAssociated_samp_store_temp, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="PlantAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.PlantAssociated_samp_vol_we_dna_ext, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_season_environment = Slot(uri=MIXS['0001068'], name="PlantAssociated_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS.PlantAssociated_season_environment, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_standing_water_regm = Slot(uri=MIXS['0001069'], name="PlantAssociated_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS.PlantAssociated_standing_water_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_temp = Slot(uri=MIXS['0000113'], name="PlantAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.PlantAssociated_temp, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.PlantAssociated_tiss_cult_growth_med = Slot(uri=MIXS['0001070'], name="PlantAssociated_tiss_cult_growth_med", curie=MIXS.curie('0001070'),
                   model_uri=MIXS.PlantAssociated_tiss_cult_growth_med, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])|([^s\|][^\r\n\t\|]*)'))

slots.PlantAssociated_water_temp_regm = Slot(uri=MIXS['0000590'], name="PlantAssociated_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS.PlantAssociated_water_temp_regm, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_watering_regm = Slot(uri=MIXS['0000591'], name="PlantAssociated_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS.PlantAssociated_watering_regm, domain=PlantAssociated, range=Optional[str])

slots.Sediment_alkalinity = Slot(uri=MIXS['0000421'], name="Sediment_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.Sediment_alkalinity, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_alkyl_diethers = Slot(uri=MIXS['0000490'], name="Sediment_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS.Sediment_alkyl_diethers, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_aminopept_act = Slot(uri=MIXS['0000172'], name="Sediment_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=MIXS.Sediment_aminopept_act, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_ammonium = Slot(uri=MIXS['0000427'], name="Sediment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.Sediment_ammonium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="Sediment_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS.Sediment_bacteria_carb_prod, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_biomass = Slot(uri=MIXS['0000174'], name="Sediment_biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS.Sediment_biomass, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_bishomohopanol = Slot(uri=MIXS['0000175'], name="Sediment_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=MIXS.Sediment_bishomohopanol, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_bromide = Slot(uri=MIXS['0000176'], name="Sediment_bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS.Sediment_bromide, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_calcium = Slot(uri=MIXS['0000432'], name="Sediment_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.Sediment_calcium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="Sediment_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=MIXS.Sediment_carb_nitro_ratio, domain=Sediment, range=Optional[float])

slots.Sediment_chem_administration = Slot(uri=MIXS['0000751'], name="Sediment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.Sediment_chem_administration, domain=Sediment, range=Optional[str])

slots.Sediment_chloride = Slot(uri=MIXS['0000429'], name="Sediment_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.Sediment_chloride, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_chlorophyll = Slot(uri=MIXS['0000177'], name="Sediment_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS.Sediment_chlorophyll, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_density = Slot(uri=MIXS['0000435'], name="Sediment_density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.Sediment_density, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diether_lipids = Slot(uri=MIXS['0000178'], name="Sediment_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS.Sediment_diether_lipids, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Sediment_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="Sediment_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.Sediment_diss_carb_dioxide, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diss_hydrogen = Slot(uri=MIXS['0000179'], name="Sediment_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS.Sediment_diss_hydrogen, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="Sediment_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.Sediment_diss_inorg_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diss_org_carb = Slot(uri=MIXS['0000433'], name="Sediment_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.Sediment_diss_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="Sediment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS.Sediment_diss_org_nitro, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_diss_oxygen = Slot(uri=MIXS['0000119'], name="Sediment_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS.Sediment_diss_oxygen, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_elev = Slot(uri=MIXS['0000093'], name="Sediment_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Sediment_elev, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_glucosidase_act = Slot(uri=MIXS['0000137'], name="Sediment_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=MIXS.Sediment_glucosidase_act, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_magnesium = Slot(uri=MIXS['0000431'], name="Sediment_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.Sediment_magnesium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_mean_frict_vel = Slot(uri=MIXS['0000498'], name="Sediment_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=MIXS.Sediment_mean_frict_vel, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="Sediment_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=MIXS.Sediment_mean_peak_frict_vel, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_methane = Slot(uri=MIXS['0000101'], name="Sediment_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS.Sediment_methane, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_misc_param = Slot(uri=MIXS['0000752'], name="Sediment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.Sediment_misc_param, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Sediment_n_alkanes = Slot(uri=MIXS['0000503'], name="Sediment_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS.Sediment_n_alkanes, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_nitrate = Slot(uri=MIXS['0000425'], name="Sediment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.Sediment_nitrate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_nitrite = Slot(uri=MIXS['0000426'], name="Sediment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.Sediment_nitrite, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_nitro = Slot(uri=MIXS['0000504'], name="Sediment_nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS.Sediment_nitro, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_org_carb = Slot(uri=MIXS['0000508'], name="Sediment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS.Sediment_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_org_matter = Slot(uri=MIXS['0000204'], name="Sediment_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.Sediment_org_matter, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_org_nitro = Slot(uri=MIXS['0000205'], name="Sediment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.Sediment_org_nitro, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_organism_count = Slot(uri=MIXS['0000103'], name="Sediment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.Sediment_organism_count, domain=Sediment, range=Optional[str])

slots.Sediment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Sediment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.Sediment_oxy_stat_samp, domain=Sediment, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Sediment_part_org_carb = Slot(uri=MIXS['0000515'], name="Sediment_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS.Sediment_part_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_particle_class = Slot(uri=MIXS['0000206'], name="Sediment_particle_class", curie=MIXS.curie('0000206'),
                   model_uri=MIXS.Sediment_particle_class, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_perturbation = Slot(uri=MIXS['0000754'], name="Sediment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.Sediment_perturbation, domain=Sediment, range=Optional[str])

slots.Sediment_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="Sediment_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=MIXS.Sediment_petroleum_hydrocarb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_ph = Slot(uri=MIXS['0001001'], name="Sediment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.Sediment_ph, domain=Sediment, range=Optional[float])

slots.Sediment_phaeopigments = Slot(uri=MIXS['0000180'], name="Sediment_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=MIXS.Sediment_phaeopigments, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Sediment_phosphate = Slot(uri=MIXS['0000505'], name="Sediment_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.Sediment_phosphate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="Sediment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS.Sediment_phosplipid_fatt_acid, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*)'))

slots.Sediment_porosity = Slot(uri=MIXS['0000211'], name="Sediment_porosity", curie=MIXS.curie('0000211'),
                   model_uri=MIXS.Sediment_porosity, domain=Sediment, range=Optional[str])

slots.Sediment_potassium = Slot(uri=MIXS['0000430'], name="Sediment_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.Sediment_potassium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_pressure = Slot(uri=MIXS['0000412'], name="Sediment_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.Sediment_pressure, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_project_name = Slot(uri=MIXS['0000092'], name="Sediment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Sediment_project_name, domain=Sediment, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Sediment_redox_potential = Slot(uri=MIXS['0000182'], name="Sediment_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=MIXS.Sediment_redox_potential, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_salinity = Slot(uri=MIXS['0000183'], name="Sediment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.Sediment_salinity, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_samp_store_dur = Slot(uri=MIXS['0000116'], name="Sediment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.Sediment_samp_store_dur, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Sediment_samp_store_loc = Slot(uri=MIXS['0000755'], name="Sediment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.Sediment_samp_store_loc, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Sediment_samp_store_temp = Slot(uri=MIXS['0000110'], name="Sediment_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.Sediment_samp_store_temp, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Sediment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Sediment_samp_vol_we_dna_ext, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_sediment_type = Slot(uri=MIXS['0001078'], name="Sediment_sediment_type", curie=MIXS.curie('0001078'),
                   model_uri=MIXS.Sediment_sediment_type, domain=Sediment, range=Optional[str])

slots.Sediment_silicate = Slot(uri=MIXS['0000184'], name="Sediment_silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS.Sediment_silicate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_sodium = Slot(uri=MIXS['0000428'], name="Sediment_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.Sediment_sodium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_sulfate = Slot(uri=MIXS['0000423'], name="Sediment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.Sediment_sulfate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_sulfide = Slot(uri=MIXS['0000424'], name="Sediment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.Sediment_sulfide, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_temp = Slot(uri=MIXS['0000113'], name="Sediment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Sediment_temp, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_tidal_stage = Slot(uri=MIXS['0000750'], name="Sediment_tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=MIXS.Sediment_tidal_stage, domain=Sediment, range=Optional[Union[str, "TIDALSTAGEENUM"]])

slots.Sediment_tot_carb = Slot(uri=MIXS['0000525'], name="Sediment_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS.Sediment_tot_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_tot_depth_water_col = Slot(uri=MIXS['0000634'], name="Sediment_tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=MIXS.Sediment_tot_depth_water_col, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_tot_org_carb = Slot(uri=MIXS['0000533'], name="Sediment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.Sediment_tot_org_carb, domain=Sediment, range=Optional[str])

slots.Sediment_turbidity = Slot(uri=MIXS['0000191'], name="Sediment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS.Sediment_turbidity, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Sediment_water_content = Slot(uri=MIXS['0000185'], name="Sediment_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS.Sediment_water_content, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_agrochem_addition = Slot(uri=MIXS['0000639'], name="Soil_agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=MIXS.Soil_agrochem_addition, domain=Soil, range=Optional[str])

slots.Soil_al_sat = Slot(uri=MIXS['0000607'], name="Soil_al_sat", curie=MIXS.curie('0000607'),
                   model_uri=MIXS.Soil_al_sat, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_al_sat_meth = Slot(uri=MIXS['0000324'], name="Soil_al_sat_meth", curie=MIXS.curie('0000324'),
                   model_uri=MIXS.Soil_al_sat_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_annual_precpt = Slot(uri=MIXS['0000644'], name="Soil_annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=MIXS.Soil_annual_precpt, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_annual_temp = Slot(uri=MIXS['0000642'], name="Soil_annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=MIXS.Soil_annual_temp, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_crop_rotation = Slot(uri=MIXS['0000318'], name="Soil_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS.Soil_crop_rotation, domain=Soil, range=Optional[str])

slots.Soil_cur_land_use = Slot(uri=MIXS['0001080'], name="Soil_cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=MIXS.Soil_cur_land_use, domain=Soil, range=Optional[Union[str, "CURLANDUSEENUM"]])

slots.Soil_cur_vegetation = Slot(uri=MIXS['0000312'], name="Soil_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS.Soil_cur_vegetation, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Soil_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="Soil_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS.Soil_cur_vegetation_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_drainage_class = Slot(uri=MIXS['0001085'], name="Soil_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS.Soil_drainage_class, domain=Soil, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.Soil_elev = Slot(uri=MIXS['0000093'], name="Soil_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Soil_elev, domain=Soil, range=str,
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_extreme_event = Slot(uri=MIXS['0000320'], name="Soil_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS.Soil_extreme_event, domain=Soil, range=Optional[str])

slots.Soil_fao_class = Slot(uri=MIXS['0001083'], name="Soil_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS.Soil_fao_class, domain=Soil, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.Soil_fire = Slot(uri=MIXS['0001086'], name="Soil_fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS.Soil_fire, domain=Soil, range=Optional[str])

slots.Soil_flooding = Slot(uri=MIXS['0000319'], name="Soil_flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS.Soil_flooding, domain=Soil, range=Optional[str])

slots.Soil_heavy_metals = Slot(uri=MIXS['0000652'], name="Soil_heavy_metals", curie=MIXS.curie('0000652'),
                   model_uri=MIXS.Soil_heavy_metals, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Soil_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="Soil_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS.Soil_heavy_metals_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_horizon_meth = Slot(uri=MIXS['0000321'], name="Soil_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS.Soil_horizon_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_link_addit_analys = Slot(uri=MIXS['0000340'], name="Soil_link_addit_analys", curie=MIXS.curie('0000340'),
                   model_uri=MIXS.Soil_link_addit_analys, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_link_class_info = Slot(uri=MIXS['0000329'], name="Soil_link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=MIXS.Soil_link_class_info, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_link_climate_info = Slot(uri=MIXS['0000328'], name="Soil_link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=MIXS.Soil_link_climate_info, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_local_class = Slot(uri=MIXS['0000330'], name="Soil_local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS.Soil_local_class, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Soil_local_class_meth = Slot(uri=MIXS['0000331'], name="Soil_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS.Soil_local_class_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_microbial_biomass = Slot(uri=MIXS['0000650'], name="Soil_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS.Soil_microbial_biomass, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_misc_param = Slot(uri=MIXS['0000752'], name="Soil_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.Soil_misc_param, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Soil_org_matter = Slot(uri=MIXS['0000204'], name="Soil_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.Soil_org_matter, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_org_nitro = Slot(uri=MIXS['0000205'], name="Soil_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.Soil_org_nitro, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_ph = Slot(uri=MIXS['0001001'], name="Soil_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.Soil_ph, domain=Soil, range=Optional[float])

slots.Soil_ph_meth = Slot(uri=MIXS['0001106'], name="Soil_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS.Soil_ph_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="Soil_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS.Soil_pool_dna_extracts, domain=Soil, range=Optional[str])

slots.Soil_previous_land_use = Slot(uri=MIXS['0000315'], name="Soil_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS.Soil_previous_land_use, domain=Soil, range=Optional[str])

slots.Soil_previous_land_use_meth = Slot(uri=MIXS['0000316'], name="Soil_previous_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS.Soil_previous_land_use_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_profile_position = Slot(uri=MIXS['0001084'], name="Soil_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS.Soil_profile_position, domain=Soil, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.Soil_project_name = Slot(uri=MIXS['0000092'], name="Soil_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Soil_project_name, domain=Soil, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Soil_salinity_meth = Slot(uri=MIXS['0000341'], name="Soil_salinity_meth", curie=MIXS.curie('0000341'),
                   model_uri=MIXS.Soil_salinity_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Soil_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Soil_samp_vol_we_dna_ext, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_season_precpt = Slot(uri=MIXS['0000645'], name="Soil_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS.Soil_season_precpt, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_season_temp = Slot(uri=MIXS['0000643'], name="Soil_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=MIXS.Soil_season_temp, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_sieving = Slot(uri=MIXS['0000322'], name="Soil_sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS.Soil_sieving, domain=Soil, range=Optional[str])

slots.Soil_slope_aspect = Slot(uri=MIXS['0000647'], name="Soil_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS.Soil_slope_aspect, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_slope_gradient = Slot(uri=MIXS['0000646'], name="Soil_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS.Soil_slope_gradient, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_soil_type = Slot(uri=MIXS['0000332'], name="Soil_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS.Soil_soil_type, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.Soil_soil_type_meth = Slot(uri=MIXS['0000334'], name="Soil_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS.Soil_soil_type_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_store_cond = Slot(uri=MIXS['0000327'], name="Soil_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS.Soil_store_cond, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Soil_temp = Slot(uri=MIXS['0000113'], name="Soil_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Soil_temp, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Soil_tillage = Slot(uri=MIXS['0001081'], name="Soil_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS.Soil_tillage, domain=Soil, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.Soil_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="Soil_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS.Soil_tot_org_c_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_tot_org_carb = Slot(uri=MIXS['0000533'], name="Soil_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS.Soil_tot_org_carb, domain=Soil, range=Optional[str])

slots.Soil_water_cont_soil_meth = Slot(uri=MIXS['0000323'], name="Soil_water_cont_soil_meth", curie=MIXS.curie('0000323'),
                   model_uri=MIXS.Soil_water_cont_soil_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'(10.\d{4,9}/[-._;()/:a-zA-Z0-9]+)|(PMID:(\d{7,8}))|((?:https?://)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])'))

slots.Soil_water_content = Slot(uri=MIXS['0000185'], name="Soil_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS.Soil_water_content, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_alt = Slot(uri=MIXS['0000094'], name="SymbiontAssociated_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS.SymbiontAssociated_alt, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_association_duration = Slot(uri=MIXS['0001299'], name="SymbiontAssociated_association_duration", curie=MIXS.curie('0001299'),
                   model_uri=MIXS.SymbiontAssociated_association_duration, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="SymbiontAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.SymbiontAssociated_chem_administration, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_collection_date = Slot(uri=MIXS['0000011'], name="SymbiontAssociated_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS.SymbiontAssociated_collection_date, domain=SymbiontAssociated, range=str)

slots.SymbiontAssociated_elev = Slot(uri=MIXS['0000093'], name="SymbiontAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.SymbiontAssociated_elev, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_env_broad_scale = Slot(uri=MIXS['0000012'], name="SymbiontAssociated_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS.SymbiontAssociated_env_broad_scale, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_env_local_scale = Slot(uri=MIXS['0000013'], name="SymbiontAssociated_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS.SymbiontAssociated_env_local_scale, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_env_medium = Slot(uri=MIXS['0000014'], name="SymbiontAssociated_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS.SymbiontAssociated_env_medium, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_geo_loc_name = Slot(uri=MIXS['0000010'], name="SymbiontAssociated_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS.SymbiontAssociated_geo_loc_name, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*: [^s\|][^\r\n\t\|]*, [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_gravidity = Slot(uri=MIXS['0000875'], name="SymbiontAssociated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS.SymbiontAssociated_gravidity, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_age = Slot(uri=MIXS['0000255'], name="SymbiontAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS.SymbiontAssociated_host_age, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_body_habitat = Slot(uri=MIXS['0000866'], name="SymbiontAssociated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS.SymbiontAssociated_host_body_habitat, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="SymbiontAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS.SymbiontAssociated_host_body_site, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_host_cellular_loc = Slot(uri=MIXS['0001313'], name="SymbiontAssociated_host_cellular_loc", curie=MIXS.curie('0001313'),
                   model_uri=MIXS.SymbiontAssociated_host_cellular_loc, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_color = Slot(uri=MIXS['0000260'], name="SymbiontAssociated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS.SymbiontAssociated_host_color, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="SymbiontAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS.SymbiontAssociated_host_common_name, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_dependence = Slot(uri=MIXS['0001315'], name="SymbiontAssociated_host_dependence", curie=MIXS.curie('0001315'),
                   model_uri=MIXS.SymbiontAssociated_host_dependence, domain=SymbiontAssociated, range=str)

slots.SymbiontAssociated_host_dry_mass = Slot(uri=MIXS['0000257'], name="SymbiontAssociated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS.SymbiontAssociated_host_dry_mass, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="SymbiontAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS.SymbiontAssociated_host_genotype, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_growth_cond = Slot(uri=MIXS['0000871'], name="SymbiontAssociated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS.SymbiontAssociated_host_growth_cond, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_height = Slot(uri=MIXS['0000264'], name="SymbiontAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS.SymbiontAssociated_host_height, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_infra_specific_name = Slot(uri=MIXS['0000253'], name="SymbiontAssociated_host_infra_specific_name", curie=MIXS.curie('0000253'),
                   model_uri=MIXS.SymbiontAssociated_host_infra_specific_name, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_infra_specific_rank = Slot(uri=MIXS['0000254'], name="SymbiontAssociated_host_infra_specific_rank", curie=MIXS.curie('0000254'),
                   model_uri=MIXS.SymbiontAssociated_host_infra_specific_rank, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_length = Slot(uri=MIXS['0000256'], name="SymbiontAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS.SymbiontAssociated_host_length, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="SymbiontAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS.SymbiontAssociated_host_life_stage, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_number = Slot(uri=MIXS['0001305'], name="SymbiontAssociated_host_number", curie=MIXS.curie('0001305'),
                   model_uri=MIXS.SymbiontAssociated_host_number, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_of_host_coinf = Slot(uri=MIXS['0001310'], name="SymbiontAssociated_host_of_host_coinf", curie=MIXS.curie('0001310'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_coinf, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_disease = Slot(uri=MIXS['0001319'], name="SymbiontAssociated_host_of_host_disease", curie=MIXS.curie('0001319'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_disease, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_of_host_env_loc = Slot(uri=MIXS['0001325'], name="SymbiontAssociated_host_of_host_env_loc", curie=MIXS.curie('0001325'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_env_loc, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_host_of_host_env_med = Slot(uri=MIXS['0001326'], name="SymbiontAssociated_host_of_host_env_med", curie=MIXS.curie('0001326'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_env_med, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_host_of_host_fam_rel = Slot(uri=MIXS['0001328'], name="SymbiontAssociated_host_of_host_fam_rel", curie=MIXS.curie('0001328'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_fam_rel, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_of_host_geno = Slot(uri=MIXS['0001331'], name="SymbiontAssociated_host_of_host_geno", curie=MIXS.curie('0001331'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_geno, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_gravid = Slot(uri=MIXS['0001333'], name="SymbiontAssociated_host_of_host_gravid", curie=MIXS.curie('0001333'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_gravid, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_of_host_infname = Slot(uri=MIXS['0001329'], name="SymbiontAssociated_host_of_host_infname", curie=MIXS.curie('0001329'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_infname, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_infrank = Slot(uri=MIXS['0001330'], name="SymbiontAssociated_host_of_host_infrank", curie=MIXS.curie('0001330'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_infrank, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_name = Slot(uri=MIXS['0001324'], name="SymbiontAssociated_host_of_host_name", curie=MIXS.curie('0001324'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_name, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_pheno = Slot(uri=MIXS['0001332'], name="SymbiontAssociated_host_of_host_pheno", curie=MIXS.curie('0001332'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_pheno, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_of_host_sub_id = Slot(uri=MIXS['0001327'], name="SymbiontAssociated_host_of_host_sub_id", curie=MIXS.curie('0001327'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_sub_id, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_of_host_taxid = Slot(uri=MIXS['0001306'], name="SymbiontAssociated_host_of_host_taxid", curie=MIXS.curie('0001306'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_taxid, domain=SymbiontAssociated, range=Optional[int])

slots.SymbiontAssociated_host_of_host_totmass = Slot(uri=MIXS['0001334'], name="SymbiontAssociated_host_of_host_totmass", curie=MIXS.curie('0001334'),
                   model_uri=MIXS.SymbiontAssociated_host_of_host_totmass, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="SymbiontAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS.SymbiontAssociated_host_phenotype, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]* [[a-zA-Z]+:[0-9]+]'))

slots.SymbiontAssociated_host_shape = Slot(uri=MIXS['0000261'], name="SymbiontAssociated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS.SymbiontAssociated_host_shape, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_specificity = Slot(uri=MIXS['0001308'], name="SymbiontAssociated_host_specificity", curie=MIXS.curie('0001308'),
                   model_uri=MIXS.SymbiontAssociated_host_specificity, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="SymbiontAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS.SymbiontAssociated_host_subject_id, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_substrate = Slot(uri=MIXS['0000252'], name="SymbiontAssociated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS.SymbiontAssociated_host_substrate, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="SymbiontAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS.SymbiontAssociated_host_taxid, domain=SymbiontAssociated, range=Optional[int])

slots.SymbiontAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="SymbiontAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS.SymbiontAssociated_host_tot_mass, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_lat_lon = Slot(uri=MIXS['0000009'], name="SymbiontAssociated_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS.SymbiontAssociated_lat_lon, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?) [-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)'))

slots.SymbiontAssociated_misc_param = Slot(uri=MIXS['0000752'], name="SymbiontAssociated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.SymbiontAssociated_misc_param, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.SymbiontAssociated_mode_transmission = Slot(uri=MIXS['0001312'], name="SymbiontAssociated_mode_transmission", curie=MIXS.curie('0001312'),
                   model_uri=MIXS.SymbiontAssociated_mode_transmission, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_organism_count = Slot(uri=MIXS['0000103'], name="SymbiontAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.SymbiontAssociated_organism_count, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="SymbiontAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.SymbiontAssociated_oxy_stat_samp, domain=SymbiontAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.SymbiontAssociated_perturbation = Slot(uri=MIXS['0000754'], name="SymbiontAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.SymbiontAssociated_perturbation, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_project_name = Slot(uri=MIXS['0000092'], name="SymbiontAssociated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.SymbiontAssociated_project_name, domain=SymbiontAssociated, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_route_transmission = Slot(uri=MIXS['0001316'], name="SymbiontAssociated_route_transmission", curie=MIXS.curie('0001316'),
                   model_uri=MIXS.SymbiontAssociated_route_transmission, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_samp_salinity = Slot(uri=MIXS['0000109'], name="SymbiontAssociated_samp_salinity", curie=MIXS.curie('0000109'),
                   model_uri=MIXS.SymbiontAssociated_samp_salinity, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="SymbiontAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.SymbiontAssociated_samp_store_dur, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.SymbiontAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="SymbiontAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.SymbiontAssociated_samp_store_loc, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_samp_store_sol = Slot(uri=MIXS['0001317'], name="SymbiontAssociated_samp_store_sol", curie=MIXS.curie('0001317'),
                   model_uri=MIXS.SymbiontAssociated_samp_store_sol, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_samp_store_temp = Slot(uri=MIXS['0000110'], name="SymbiontAssociated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.SymbiontAssociated_samp_store_temp, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="SymbiontAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.SymbiontAssociated_samp_vol_we_dna_ext, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_source_mat_id = Slot(uri=MIXS['0000026'], name="SymbiontAssociated_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS.SymbiontAssociated_source_mat_id, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_sym_life_cycle_type = Slot(uri=MIXS['0001300'], name="SymbiontAssociated_sym_life_cycle_type", curie=MIXS.curie('0001300'),
                   model_uri=MIXS.SymbiontAssociated_sym_life_cycle_type, domain=SymbiontAssociated, range=str)

slots.SymbiontAssociated_symbiont_host_role = Slot(uri=MIXS['0001303'], name="SymbiontAssociated_symbiont_host_role", curie=MIXS.curie('0001303'),
                   model_uri=MIXS.SymbiontAssociated_symbiont_host_role, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_temp = Slot(uri=MIXS['0000113'], name="SymbiontAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.SymbiontAssociated_temp, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.SymbiontAssociated_type_of_symbiosis = Slot(uri=MIXS['0001307'], name="SymbiontAssociated_type_of_symbiosis", curie=MIXS.curie('0001307'),
                   model_uri=MIXS.SymbiontAssociated_type_of_symbiosis, domain=SymbiontAssociated, range=Optional[str])

slots.WastewaterSludge_alkalinity = Slot(uri=MIXS['0000421'], name="WastewaterSludge_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.WastewaterSludge_alkalinity, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_biochem_oxygen_dem = Slot(uri=MIXS['0000653'], name="WastewaterSludge_biochem_oxygen_dem", curie=MIXS.curie('0000653'),
                   model_uri=MIXS.WastewaterSludge_biochem_oxygen_dem, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_chem_administration = Slot(uri=MIXS['0000751'], name="WastewaterSludge_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.WastewaterSludge_chem_administration, domain=WastewaterSludge, range=Optional[str])

slots.WastewaterSludge_chem_oxygen_dem = Slot(uri=MIXS['0000656'], name="WastewaterSludge_chem_oxygen_dem", curie=MIXS.curie('0000656'),
                   model_uri=MIXS.WastewaterSludge_chem_oxygen_dem, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_efficiency_percent = Slot(uri=MIXS['0000657'], name="WastewaterSludge_efficiency_percent", curie=MIXS.curie('0000657'),
                   model_uri=MIXS.WastewaterSludge_efficiency_percent, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_emulsions = Slot(uri=MIXS['0000660'], name="WastewaterSludge_emulsions", curie=MIXS.curie('0000660'),
                   model_uri=MIXS.WastewaterSludge_emulsions, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_gaseous_substances = Slot(uri=MIXS['0000661'], name="WastewaterSludge_gaseous_substances", curie=MIXS.curie('0000661'),
                   model_uri=MIXS.WastewaterSludge_gaseous_substances, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_indust_eff_percent = Slot(uri=MIXS['0000662'], name="WastewaterSludge_indust_eff_percent", curie=MIXS.curie('0000662'),
                   model_uri=MIXS.WastewaterSludge_indust_eff_percent, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_inorg_particles = Slot(uri=MIXS['0000664'], name="WastewaterSludge_inorg_particles", curie=MIXS.curie('0000664'),
                   model_uri=MIXS.WastewaterSludge_inorg_particles, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_misc_param = Slot(uri=MIXS['0000752'], name="WastewaterSludge_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.WastewaterSludge_misc_param, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.WastewaterSludge_nitrate = Slot(uri=MIXS['0000425'], name="WastewaterSludge_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.WastewaterSludge_nitrate, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_org_particles = Slot(uri=MIXS['0000665'], name="WastewaterSludge_org_particles", curie=MIXS.curie('0000665'),
                   model_uri=MIXS.WastewaterSludge_org_particles, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_organism_count = Slot(uri=MIXS['0000103'], name="WastewaterSludge_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.WastewaterSludge_organism_count, domain=WastewaterSludge, range=Optional[str])

slots.WastewaterSludge_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="WastewaterSludge_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.WastewaterSludge_oxy_stat_samp, domain=WastewaterSludge, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.WastewaterSludge_perturbation = Slot(uri=MIXS['0000754'], name="WastewaterSludge_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.WastewaterSludge_perturbation, domain=WastewaterSludge, range=Optional[str])

slots.WastewaterSludge_ph = Slot(uri=MIXS['0001001'], name="WastewaterSludge_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.WastewaterSludge_ph, domain=WastewaterSludge, range=Optional[float])

slots.WastewaterSludge_phosphate = Slot(uri=MIXS['0000505'], name="WastewaterSludge_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.WastewaterSludge_phosphate, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_pre_treatment = Slot(uri=MIXS['0000348'], name="WastewaterSludge_pre_treatment", curie=MIXS.curie('0000348'),
                   model_uri=MIXS.WastewaterSludge_pre_treatment, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_primary_treatment = Slot(uri=MIXS['0000349'], name="WastewaterSludge_primary_treatment", curie=MIXS.curie('0000349'),
                   model_uri=MIXS.WastewaterSludge_primary_treatment, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_project_name = Slot(uri=MIXS['0000092'], name="WastewaterSludge_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.WastewaterSludge_project_name, domain=WastewaterSludge, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_reactor_type = Slot(uri=MIXS['0000350'], name="WastewaterSludge_reactor_type", curie=MIXS.curie('0000350'),
                   model_uri=MIXS.WastewaterSludge_reactor_type, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_salinity = Slot(uri=MIXS['0000183'], name="WastewaterSludge_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.WastewaterSludge_salinity, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_samp_store_dur = Slot(uri=MIXS['0000116'], name="WastewaterSludge_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.WastewaterSludge_samp_store_dur, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.WastewaterSludge_samp_store_loc = Slot(uri=MIXS['0000755'], name="WastewaterSludge_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.WastewaterSludge_samp_store_loc, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_samp_store_temp = Slot(uri=MIXS['0000110'], name="WastewaterSludge_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.WastewaterSludge_samp_store_temp, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="WastewaterSludge_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.WastewaterSludge_samp_vol_we_dna_ext, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_secondary_treatment = Slot(uri=MIXS['0000351'], name="WastewaterSludge_secondary_treatment", curie=MIXS.curie('0000351'),
                   model_uri=MIXS.WastewaterSludge_secondary_treatment, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_sewage_type = Slot(uri=MIXS['0000215'], name="WastewaterSludge_sewage_type", curie=MIXS.curie('0000215'),
                   model_uri=MIXS.WastewaterSludge_sewage_type, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_sludge_retent_time = Slot(uri=MIXS['0000669'], name="WastewaterSludge_sludge_retent_time", curie=MIXS.curie('0000669'),
                   model_uri=MIXS.WastewaterSludge_sludge_retent_time, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_sodium = Slot(uri=MIXS['0000428'], name="WastewaterSludge_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.WastewaterSludge_sodium, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_soluble_inorg_mat = Slot(uri=MIXS['0000672'], name="WastewaterSludge_soluble_inorg_mat", curie=MIXS.curie('0000672'),
                   model_uri=MIXS.WastewaterSludge_soluble_inorg_mat, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_soluble_org_mat = Slot(uri=MIXS['0000673'], name="WastewaterSludge_soluble_org_mat", curie=MIXS.curie('0000673'),
                   model_uri=MIXS.WastewaterSludge_soluble_org_mat, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_suspend_solids = Slot(uri=MIXS['0000150'], name="WastewaterSludge_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=MIXS.WastewaterSludge_suspend_solids, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_temp = Slot(uri=MIXS['0000113'], name="WastewaterSludge_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.WastewaterSludge_temp, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_tertiary_treatment = Slot(uri=MIXS['0000352'], name="WastewaterSludge_tertiary_treatment", curie=MIXS.curie('0000352'),
                   model_uri=MIXS.WastewaterSludge_tertiary_treatment, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_tot_phosphate = Slot(uri=MIXS['0000689'], name="WastewaterSludge_tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=MIXS.WastewaterSludge_tot_phosphate, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.WastewaterSludge_wastewater_type = Slot(uri=MIXS['0000353'], name="WastewaterSludge_wastewater_type", curie=MIXS.curie('0000353'),
                   model_uri=MIXS.WastewaterSludge_wastewater_type, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Water_alkalinity = Slot(uri=MIXS['0000421'], name="Water_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS.Water_alkalinity, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_alkalinity_method = Slot(uri=MIXS['0000298'], name="Water_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=MIXS.Water_alkalinity_method, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Water_alkyl_diethers = Slot(uri=MIXS['0000490'], name="Water_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS.Water_alkyl_diethers, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_aminopept_act = Slot(uri=MIXS['0000172'], name="Water_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=MIXS.Water_aminopept_act, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_ammonium = Slot(uri=MIXS['0000427'], name="Water_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS.Water_ammonium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_atmospheric_data = Slot(uri=MIXS['0001097'], name="Water_atmospheric_data", curie=MIXS.curie('0001097'),
                   model_uri=MIXS.Water_atmospheric_data, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_bac_prod = Slot(uri=MIXS['0000683'], name="Water_bac_prod", curie=MIXS.curie('0000683'),
                   model_uri=MIXS.Water_bac_prod, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_bac_resp = Slot(uri=MIXS['0000684'], name="Water_bac_resp", curie=MIXS.curie('0000684'),
                   model_uri=MIXS.Water_bac_resp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="Water_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS.Water_bacteria_carb_prod, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_biomass = Slot(uri=MIXS['0000174'], name="Water_biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS.Water_biomass, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_bishomohopanol = Slot(uri=MIXS['0000175'], name="Water_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=MIXS.Water_bishomohopanol, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_bromide = Slot(uri=MIXS['0000176'], name="Water_bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS.Water_bromide, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_calcium = Slot(uri=MIXS['0000432'], name="Water_calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS.Water_calcium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="Water_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=MIXS.Water_carb_nitro_ratio, domain=Water, range=Optional[float])

slots.Water_chem_administration = Slot(uri=MIXS['0000751'], name="Water_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS.Water_chem_administration, domain=Water, range=Optional[str])

slots.Water_chloride = Slot(uri=MIXS['0000429'], name="Water_chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS.Water_chloride, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_chlorophyll = Slot(uri=MIXS['0000177'], name="Water_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS.Water_chlorophyll, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_conduc = Slot(uri=MIXS['0000692'], name="Water_conduc", curie=MIXS.curie('0000692'),
                   model_uri=MIXS.Water_conduc, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_density = Slot(uri=MIXS['0000435'], name="Water_density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS.Water_density, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diether_lipids = Slot(uri=MIXS['0000178'], name="Water_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS.Water_diether_lipids, domain=Water, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Water_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="Water_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS.Water_diss_carb_dioxide, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_hydrogen = Slot(uri=MIXS['0000179'], name="Water_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS.Water_diss_hydrogen, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="Water_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS.Water_diss_inorg_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_inorg_nitro = Slot(uri=MIXS['0000698'], name="Water_diss_inorg_nitro", curie=MIXS.curie('0000698'),
                   model_uri=MIXS.Water_diss_inorg_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="Water_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS.Water_diss_inorg_phosp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_org_carb = Slot(uri=MIXS['0000433'], name="Water_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS.Water_diss_org_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_org_nitro = Slot(uri=MIXS['0000162'], name="Water_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS.Water_diss_org_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_diss_oxygen = Slot(uri=MIXS['0000119'], name="Water_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS.Water_diss_oxygen, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_down_par = Slot(uri=MIXS['0000703'], name="Water_down_par", curie=MIXS.curie('0000703'),
                   model_uri=MIXS.Water_down_par, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_elev = Slot(uri=MIXS['0000093'], name="Water_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS.Water_elev, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_fluor = Slot(uri=MIXS['0000704'], name="Water_fluor", curie=MIXS.curie('0000704'),
                   model_uri=MIXS.Water_fluor, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_glucosidase_act = Slot(uri=MIXS['0000137'], name="Water_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=MIXS.Water_glucosidase_act, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_light_intensity = Slot(uri=MIXS['0000706'], name="Water_light_intensity", curie=MIXS.curie('0000706'),
                   model_uri=MIXS.Water_light_intensity, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_magnesium = Slot(uri=MIXS['0000431'], name="Water_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS.Water_magnesium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_mean_frict_vel = Slot(uri=MIXS['0000498'], name="Water_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=MIXS.Water_mean_frict_vel, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="Water_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=MIXS.Water_mean_peak_frict_vel, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_misc_param = Slot(uri=MIXS['0000752'], name="Water_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS.Water_misc_param, domain=Water, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Water_n_alkanes = Slot(uri=MIXS['0000503'], name="Water_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS.Water_n_alkanes, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_nitrate = Slot(uri=MIXS['0000425'], name="Water_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS.Water_nitrate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_nitrite = Slot(uri=MIXS['0000426'], name="Water_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS.Water_nitrite, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_nitro = Slot(uri=MIXS['0000504'], name="Water_nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS.Water_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_org_carb = Slot(uri=MIXS['0000508'], name="Water_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS.Water_org_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_org_matter = Slot(uri=MIXS['0000204'], name="Water_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS.Water_org_matter, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_org_nitro = Slot(uri=MIXS['0000205'], name="Water_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS.Water_org_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_organism_count = Slot(uri=MIXS['0000103'], name="Water_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS.Water_organism_count, domain=Water, range=Optional[str])

slots.Water_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Water_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS.Water_oxy_stat_samp, domain=Water, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Water_part_org_carb = Slot(uri=MIXS['0000515'], name="Water_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS.Water_part_org_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_part_org_nitro = Slot(uri=MIXS['0000719'], name="Water_part_org_nitro", curie=MIXS.curie('0000719'),
                   model_uri=MIXS.Water_part_org_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_perturbation = Slot(uri=MIXS['0000754'], name="Water_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS.Water_perturbation, domain=Water, range=Optional[str])

slots.Water_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="Water_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=MIXS.Water_petroleum_hydrocarb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_ph = Slot(uri=MIXS['0001001'], name="Water_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS.Water_ph, domain=Water, range=Optional[float])

slots.Water_phaeopigments = Slot(uri=MIXS['0000180'], name="Water_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=MIXS.Water_phaeopigments, domain=Water, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*)'))

slots.Water_phosphate = Slot(uri=MIXS['0000505'], name="Water_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS.Water_phosphate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="Water_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS.Water_phosplipid_fatt_acid, domain=Water, range=Optional[str],
                   pattern=re.compile(r'(([^s\|][^\r\n\t\|]*)\|)*([^s\|][^\r\n\t\|]*)'))

slots.Water_photon_flux = Slot(uri=MIXS['0000725'], name="Water_photon_flux", curie=MIXS.curie('0000725'),
                   model_uri=MIXS.Water_photon_flux, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_potassium = Slot(uri=MIXS['0000430'], name="Water_potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS.Water_potassium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_pressure = Slot(uri=MIXS['0000412'], name="Water_pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS.Water_pressure, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_primary_prod = Slot(uri=MIXS['0000728'], name="Water_primary_prod", curie=MIXS.curie('0000728'),
                   model_uri=MIXS.Water_primary_prod, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_project_name = Slot(uri=MIXS['0000092'], name="Water_project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS.Water_project_name, domain=Water, range=str,
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Water_redox_potential = Slot(uri=MIXS['0000182'], name="Water_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=MIXS.Water_redox_potential, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_salinity = Slot(uri=MIXS['0000183'], name="Water_salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS.Water_salinity, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_samp_store_dur = Slot(uri=MIXS['0000116'], name="Water_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS.Water_samp_store_dur, domain=Water, range=Optional[str],
                   pattern=re.compile(r'P(?=\d+[YMWD])(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d+[HMS])(\d+H)?(\d+M)?(\d+S)?)?'))

slots.Water_samp_store_loc = Slot(uri=MIXS['0000755'], name="Water_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS.Water_samp_store_loc, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[^s\|][^\r\n\t\|]*'))

slots.Water_samp_store_temp = Slot(uri=MIXS['0000110'], name="Water_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS.Water_samp_store_temp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Water_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS.Water_samp_vol_we_dna_ext, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_silicate = Slot(uri=MIXS['0000184'], name="Water_silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS.Water_silicate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_size_frac_low = Slot(uri=MIXS['0000735'], name="Water_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=MIXS.Water_size_frac_low, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_size_frac_up = Slot(uri=MIXS['0000736'], name="Water_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=MIXS.Water_size_frac_up, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_sodium = Slot(uri=MIXS['0000428'], name="Water_sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS.Water_sodium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_soluble_react_phosp = Slot(uri=MIXS['0000738'], name="Water_soluble_react_phosp", curie=MIXS.curie('0000738'),
                   model_uri=MIXS.Water_soluble_react_phosp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_sulfate = Slot(uri=MIXS['0000423'], name="Water_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS.Water_sulfate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_sulfide = Slot(uri=MIXS['0000424'], name="Water_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS.Water_sulfide, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_suspend_part_matter = Slot(uri=MIXS['0000741'], name="Water_suspend_part_matter", curie=MIXS.curie('0000741'),
                   model_uri=MIXS.Water_suspend_part_matter, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_temp = Slot(uri=MIXS['0000113'], name="Water_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS.Water_temp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_tidal_stage = Slot(uri=MIXS['0000750'], name="Water_tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=MIXS.Water_tidal_stage, domain=Water, range=Optional[Union[str, "TIDALSTAGEENUM"]])

slots.Water_tot_depth_water_col = Slot(uri=MIXS['0000634'], name="Water_tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=MIXS.Water_tot_depth_water_col, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_tot_diss_nitro = Slot(uri=MIXS['0000744'], name="Water_tot_diss_nitro", curie=MIXS.curie('0000744'),
                   model_uri=MIXS.Water_tot_diss_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_tot_inorg_nitro = Slot(uri=MIXS['0000745'], name="Water_tot_inorg_nitro", curie=MIXS.curie('0000745'),
                   model_uri=MIXS.Water_tot_inorg_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_tot_part_carb = Slot(uri=MIXS['0000747'], name="Water_tot_part_carb", curie=MIXS.curie('0000747'),
                   model_uri=MIXS.Water_tot_part_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_tot_phosp = Slot(uri=MIXS['0000117'], name="Water_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=MIXS.Water_tot_phosp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_turbidity = Slot(uri=MIXS['0000191'], name="Water_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS.Water_turbidity, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))

slots.Water_water_current = Slot(uri=MIXS['0000203'], name="Water_water_current", curie=MIXS.curie('0000203'),
                   model_uri=MIXS.Water_water_current, domain=Water, range=Optional[str],
                   pattern=re.compile(r'[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? [^s\|][^\r\n\t\|]*'))